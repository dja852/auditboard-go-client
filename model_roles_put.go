/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the RolesPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RolesPut{}

// RolesPut struct for RolesPut
type RolesPut struct {
	Role *RolesPutRole `json:"role,omitempty"`
	PreviousValues *RolesPutPreviousValues `json:"previous_values,omitempty"`
}

// NewRolesPut instantiates a new RolesPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolesPut() *RolesPut {
	this := RolesPut{}
	return &this
}

// NewRolesPutWithDefaults instantiates a new RolesPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolesPutWithDefaults() *RolesPut {
	this := RolesPut{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RolesPut) GetRole() RolesPutRole {
	if o == nil || IsNil(o.Role) {
		var ret RolesPutRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesPut) GetRoleOk() (*RolesPutRole, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RolesPut) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given RolesPutRole and assigns it to the Role field.
func (o *RolesPut) SetRole(v RolesPutRole) {
	o.Role = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *RolesPut) GetPreviousValues() RolesPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret RolesPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesPut) GetPreviousValuesOk() (*RolesPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *RolesPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given RolesPutPreviousValues and assigns it to the PreviousValues field.
func (o *RolesPut) SetPreviousValues(v RolesPutPreviousValues) {
	o.PreviousValues = &v
}

func (o RolesPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RolesPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableRolesPut struct {
	value *RolesPut
	isSet bool
}

func (v NullableRolesPut) Get() *RolesPut {
	return v.value
}

func (v *NullableRolesPut) Set(val *RolesPut) {
	v.value = val
	v.isSet = true
}

func (v NullableRolesPut) IsSet() bool {
	return v.isSet
}

func (v *NullableRolesPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolesPut(val *RolesPut) *NullableRolesPut {
	return &NullableRolesPut{value: val, isSet: true}
}

func (v NullableRolesPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolesPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


