/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ControlsSegmentsAPIService ControlsSegmentsAPI service
type ControlsSegmentsAPIService service

type ApiControlsSegmentsControlsSegmentIdDeleteRequest struct {
	ctx context.Context
	ApiService *ControlsSegmentsAPIService
	controlsSegmentId int64
}

func (r ApiControlsSegmentsControlsSegmentIdDeleteRequest) Execute() (*ControlsSegments, *http.Response, error) {
	return r.ApiService.ControlsSegmentsControlsSegmentIdDeleteExecute(r)
}

/*
ControlsSegmentsControlsSegmentIdDelete Method for ControlsSegmentsControlsSegmentIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param controlsSegmentId Model id
 @return ApiControlsSegmentsControlsSegmentIdDeleteRequest
*/
func (a *ControlsSegmentsAPIService) ControlsSegmentsControlsSegmentIdDelete(ctx context.Context, controlsSegmentId int64) ApiControlsSegmentsControlsSegmentIdDeleteRequest {
	return ApiControlsSegmentsControlsSegmentIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		controlsSegmentId: controlsSegmentId,
	}
}

// Execute executes the request
//  @return ControlsSegments
func (a *ControlsSegmentsAPIService) ControlsSegmentsControlsSegmentIdDeleteExecute(r ApiControlsSegmentsControlsSegmentIdDeleteRequest) (*ControlsSegments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ControlsSegments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ControlsSegmentsAPIService.ControlsSegmentsControlsSegmentIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/controls_segments/{controls_segment_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"controls_segment_id"+"}", url.PathEscape(parameterValueToString(r.controlsSegmentId, "controlsSegmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiControlsSegmentsControlsSegmentIdGetRequest struct {
	ctx context.Context
	ApiService *ControlsSegmentsAPIService
	controlsSegmentId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiControlsSegmentsControlsSegmentIdGetRequest) Include(include []string) ApiControlsSegmentsControlsSegmentIdGetRequest {
	r.include = &include
	return r
}

func (r ApiControlsSegmentsControlsSegmentIdGetRequest) Execute() (*ControlsSegments, *http.Response, error) {
	return r.ApiService.ControlsSegmentsControlsSegmentIdGetExecute(r)
}

/*
ControlsSegmentsControlsSegmentIdGet Method for ControlsSegmentsControlsSegmentIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param controlsSegmentId Model id
 @return ApiControlsSegmentsControlsSegmentIdGetRequest
*/
func (a *ControlsSegmentsAPIService) ControlsSegmentsControlsSegmentIdGet(ctx context.Context, controlsSegmentId int64) ApiControlsSegmentsControlsSegmentIdGetRequest {
	return ApiControlsSegmentsControlsSegmentIdGetRequest{
		ApiService: a,
		ctx: ctx,
		controlsSegmentId: controlsSegmentId,
	}
}

// Execute executes the request
//  @return ControlsSegments
func (a *ControlsSegmentsAPIService) ControlsSegmentsControlsSegmentIdGetExecute(r ApiControlsSegmentsControlsSegmentIdGetRequest) (*ControlsSegments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ControlsSegments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ControlsSegmentsAPIService.ControlsSegmentsControlsSegmentIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/controls_segments/{controls_segment_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"controls_segment_id"+"}", url.PathEscape(parameterValueToString(r.controlsSegmentId, "controlsSegmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiControlsSegmentsControlsSegmentIdPutRequest struct {
	ctx context.Context
	ApiService *ControlsSegmentsAPIService
	controlsSegmentId int64
	controlsSegmentsPut *ControlsSegmentsPut
}

func (r ApiControlsSegmentsControlsSegmentIdPutRequest) ControlsSegmentsPut(controlsSegmentsPut ControlsSegmentsPut) ApiControlsSegmentsControlsSegmentIdPutRequest {
	r.controlsSegmentsPut = &controlsSegmentsPut
	return r
}

func (r ApiControlsSegmentsControlsSegmentIdPutRequest) Execute() (*ControlsSegments, *http.Response, error) {
	return r.ApiService.ControlsSegmentsControlsSegmentIdPutExecute(r)
}

/*
ControlsSegmentsControlsSegmentIdPut Method for ControlsSegmentsControlsSegmentIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param controlsSegmentId Model id
 @return ApiControlsSegmentsControlsSegmentIdPutRequest
*/
func (a *ControlsSegmentsAPIService) ControlsSegmentsControlsSegmentIdPut(ctx context.Context, controlsSegmentId int64) ApiControlsSegmentsControlsSegmentIdPutRequest {
	return ApiControlsSegmentsControlsSegmentIdPutRequest{
		ApiService: a,
		ctx: ctx,
		controlsSegmentId: controlsSegmentId,
	}
}

// Execute executes the request
//  @return ControlsSegments
func (a *ControlsSegmentsAPIService) ControlsSegmentsControlsSegmentIdPutExecute(r ApiControlsSegmentsControlsSegmentIdPutRequest) (*ControlsSegments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ControlsSegments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ControlsSegmentsAPIService.ControlsSegmentsControlsSegmentIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/controls_segments/{controls_segment_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"controls_segment_id"+"}", url.PathEscape(parameterValueToString(r.controlsSegmentId, "controlsSegmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.controlsSegmentsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiControlsSegmentsGetRequest struct {
	ctx context.Context
	ApiService *ControlsSegmentsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiControlsSegmentsGetRequest) Include(include []string) ApiControlsSegmentsGetRequest {
	r.include = &include
	return r
}

func (r ApiControlsSegmentsGetRequest) Execute() (*ControlsSegmentsGet200Response, *http.Response, error) {
	return r.ApiService.ControlsSegmentsGetExecute(r)
}

/*
ControlsSegmentsGet Method for ControlsSegmentsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiControlsSegmentsGetRequest
*/
func (a *ControlsSegmentsAPIService) ControlsSegmentsGet(ctx context.Context) ApiControlsSegmentsGetRequest {
	return ApiControlsSegmentsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ControlsSegmentsGet200Response
func (a *ControlsSegmentsAPIService) ControlsSegmentsGetExecute(r ApiControlsSegmentsGetRequest) (*ControlsSegmentsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ControlsSegmentsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ControlsSegmentsAPIService.ControlsSegmentsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/controls_segments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiControlsSegmentsPostRequest struct {
	ctx context.Context
	ApiService *ControlsSegmentsAPIService
	controlsSegmentsPostRequest *ControlsSegmentsPostRequest
}

func (r ApiControlsSegmentsPostRequest) ControlsSegmentsPostRequest(controlsSegmentsPostRequest ControlsSegmentsPostRequest) ApiControlsSegmentsPostRequest {
	r.controlsSegmentsPostRequest = &controlsSegmentsPostRequest
	return r
}

func (r ApiControlsSegmentsPostRequest) Execute() (*ControlsSegmentsGet200Response, *http.Response, error) {
	return r.ApiService.ControlsSegmentsPostExecute(r)
}

/*
ControlsSegmentsPost Method for ControlsSegmentsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiControlsSegmentsPostRequest
*/
func (a *ControlsSegmentsAPIService) ControlsSegmentsPost(ctx context.Context) ApiControlsSegmentsPostRequest {
	return ApiControlsSegmentsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ControlsSegmentsGet200Response
func (a *ControlsSegmentsAPIService) ControlsSegmentsPostExecute(r ApiControlsSegmentsPostRequest) (*ControlsSegmentsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ControlsSegmentsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ControlsSegmentsAPIService.ControlsSegmentsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/controls_segments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.controlsSegmentsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
