/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OpsAuditCustomSelect1OptionsAPIService OpsAuditCustomSelect1OptionsAPI service
type OpsAuditCustomSelect1OptionsAPIService service

type ApiOpsAuditCustomSelect1OptionsGetRequest struct {
	ctx context.Context
	ApiService *OpsAuditCustomSelect1OptionsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiOpsAuditCustomSelect1OptionsGetRequest) Include(include []string) ApiOpsAuditCustomSelect1OptionsGetRequest {
	r.include = &include
	return r
}

func (r ApiOpsAuditCustomSelect1OptionsGetRequest) Execute() (*OpsAuditCustomSelect1OptionsGet200Response, *http.Response, error) {
	return r.ApiService.OpsAuditCustomSelect1OptionsGetExecute(r)
}

/*
OpsAuditCustomSelect1OptionsGet Method for OpsAuditCustomSelect1OptionsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOpsAuditCustomSelect1OptionsGetRequest
*/
func (a *OpsAuditCustomSelect1OptionsAPIService) OpsAuditCustomSelect1OptionsGet(ctx context.Context) ApiOpsAuditCustomSelect1OptionsGetRequest {
	return ApiOpsAuditCustomSelect1OptionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpsAuditCustomSelect1OptionsGet200Response
func (a *OpsAuditCustomSelect1OptionsAPIService) OpsAuditCustomSelect1OptionsGetExecute(r ApiOpsAuditCustomSelect1OptionsGetRequest) (*OpsAuditCustomSelect1OptionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditCustomSelect1OptionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditCustomSelect1OptionsAPIService.OpsAuditCustomSelect1OptionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_custom_select1_options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdDeleteRequest struct {
	ctx context.Context
	ApiService *OpsAuditCustomSelect1OptionsAPIService
	opsAuditCustomSelect1OptionId int64
}

func (r ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdDeleteRequest) Execute() (*OpsAuditCustomSelect1Options, *http.Response, error) {
	return r.ApiService.OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdDeleteExecute(r)
}

/*
OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdDelete Method for OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param opsAuditCustomSelect1OptionId Model id
 @return ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdDeleteRequest
*/
func (a *OpsAuditCustomSelect1OptionsAPIService) OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdDelete(ctx context.Context, opsAuditCustomSelect1OptionId int64) ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdDeleteRequest {
	return ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		opsAuditCustomSelect1OptionId: opsAuditCustomSelect1OptionId,
	}
}

// Execute executes the request
//  @return OpsAuditCustomSelect1Options
func (a *OpsAuditCustomSelect1OptionsAPIService) OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdDeleteExecute(r ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdDeleteRequest) (*OpsAuditCustomSelect1Options, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditCustomSelect1Options
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditCustomSelect1OptionsAPIService.OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_custom_select1_options/{ops_audit_custom_select1_option_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ops_audit_custom_select1_option_id"+"}", url.PathEscape(parameterValueToString(r.opsAuditCustomSelect1OptionId, "opsAuditCustomSelect1OptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdGetRequest struct {
	ctx context.Context
	ApiService *OpsAuditCustomSelect1OptionsAPIService
	opsAuditCustomSelect1OptionId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdGetRequest) Include(include []string) ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdGetRequest {
	r.include = &include
	return r
}

func (r ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdGetRequest) Execute() (*OpsAuditCustomSelect1Options, *http.Response, error) {
	return r.ApiService.OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdGetExecute(r)
}

/*
OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdGet Method for OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param opsAuditCustomSelect1OptionId Model id
 @return ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdGetRequest
*/
func (a *OpsAuditCustomSelect1OptionsAPIService) OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdGet(ctx context.Context, opsAuditCustomSelect1OptionId int64) ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdGetRequest {
	return ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		opsAuditCustomSelect1OptionId: opsAuditCustomSelect1OptionId,
	}
}

// Execute executes the request
//  @return OpsAuditCustomSelect1Options
func (a *OpsAuditCustomSelect1OptionsAPIService) OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdGetExecute(r ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdGetRequest) (*OpsAuditCustomSelect1Options, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditCustomSelect1Options
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditCustomSelect1OptionsAPIService.OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_custom_select1_options/{ops_audit_custom_select1_option_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ops_audit_custom_select1_option_id"+"}", url.PathEscape(parameterValueToString(r.opsAuditCustomSelect1OptionId, "opsAuditCustomSelect1OptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdPutRequest struct {
	ctx context.Context
	ApiService *OpsAuditCustomSelect1OptionsAPIService
	opsAuditCustomSelect1OptionId int64
	opsAuditCustomSelect1OptionsPut *OpsAuditCustomSelect1OptionsPut
}

func (r ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdPutRequest) OpsAuditCustomSelect1OptionsPut(opsAuditCustomSelect1OptionsPut OpsAuditCustomSelect1OptionsPut) ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdPutRequest {
	r.opsAuditCustomSelect1OptionsPut = &opsAuditCustomSelect1OptionsPut
	return r
}

func (r ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdPutRequest) Execute() (*OpsAuditCustomSelect1Options, *http.Response, error) {
	return r.ApiService.OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdPutExecute(r)
}

/*
OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdPut Method for OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param opsAuditCustomSelect1OptionId Model id
 @return ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdPutRequest
*/
func (a *OpsAuditCustomSelect1OptionsAPIService) OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdPut(ctx context.Context, opsAuditCustomSelect1OptionId int64) ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdPutRequest {
	return ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdPutRequest{
		ApiService: a,
		ctx: ctx,
		opsAuditCustomSelect1OptionId: opsAuditCustomSelect1OptionId,
	}
}

// Execute executes the request
//  @return OpsAuditCustomSelect1Options
func (a *OpsAuditCustomSelect1OptionsAPIService) OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdPutExecute(r ApiOpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdPutRequest) (*OpsAuditCustomSelect1Options, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditCustomSelect1Options
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditCustomSelect1OptionsAPIService.OpsAuditCustomSelect1OptionsOpsAuditCustomSelect1OptionIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_custom_select1_options/{ops_audit_custom_select1_option_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ops_audit_custom_select1_option_id"+"}", url.PathEscape(parameterValueToString(r.opsAuditCustomSelect1OptionId, "opsAuditCustomSelect1OptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.opsAuditCustomSelect1OptionsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditCustomSelect1OptionsPostRequest struct {
	ctx context.Context
	ApiService *OpsAuditCustomSelect1OptionsAPIService
	opsAuditCustomSelect1OptionsPostRequest *OpsAuditCustomSelect1OptionsPostRequest
}

func (r ApiOpsAuditCustomSelect1OptionsPostRequest) OpsAuditCustomSelect1OptionsPostRequest(opsAuditCustomSelect1OptionsPostRequest OpsAuditCustomSelect1OptionsPostRequest) ApiOpsAuditCustomSelect1OptionsPostRequest {
	r.opsAuditCustomSelect1OptionsPostRequest = &opsAuditCustomSelect1OptionsPostRequest
	return r
}

func (r ApiOpsAuditCustomSelect1OptionsPostRequest) Execute() (*OpsAuditCustomSelect1OptionsGet200Response, *http.Response, error) {
	return r.ApiService.OpsAuditCustomSelect1OptionsPostExecute(r)
}

/*
OpsAuditCustomSelect1OptionsPost Method for OpsAuditCustomSelect1OptionsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOpsAuditCustomSelect1OptionsPostRequest
*/
func (a *OpsAuditCustomSelect1OptionsAPIService) OpsAuditCustomSelect1OptionsPost(ctx context.Context) ApiOpsAuditCustomSelect1OptionsPostRequest {
	return ApiOpsAuditCustomSelect1OptionsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpsAuditCustomSelect1OptionsGet200Response
func (a *OpsAuditCustomSelect1OptionsAPIService) OpsAuditCustomSelect1OptionsPostExecute(r ApiOpsAuditCustomSelect1OptionsPostRequest) (*OpsAuditCustomSelect1OptionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditCustomSelect1OptionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditCustomSelect1OptionsAPIService.OpsAuditCustomSelect1OptionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_custom_select1_options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.opsAuditCustomSelect1OptionsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
