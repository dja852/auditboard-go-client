/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AuditSurveyTemplatesDefaultReviewerUsersAPIService AuditSurveyTemplatesDefaultReviewerUsersAPI service
type AuditSurveyTemplatesDefaultReviewerUsersAPIService service

type ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdDeleteRequest struct {
	ctx context.Context
	ApiService *AuditSurveyTemplatesDefaultReviewerUsersAPIService
	auditSurveyTemplatesDefaultReviewerUserId int64
}

func (r ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdDeleteRequest) Execute() (*AuditSurveyTemplatesDefaultReviewerUsers, *http.Response, error) {
	return r.ApiService.AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdDeleteExecute(r)
}

/*
AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdDelete Method for AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditSurveyTemplatesDefaultReviewerUserId Model id
 @return ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdDeleteRequest
*/
func (a *AuditSurveyTemplatesDefaultReviewerUsersAPIService) AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdDelete(ctx context.Context, auditSurveyTemplatesDefaultReviewerUserId int64) ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdDeleteRequest {
	return ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		auditSurveyTemplatesDefaultReviewerUserId: auditSurveyTemplatesDefaultReviewerUserId,
	}
}

// Execute executes the request
//  @return AuditSurveyTemplatesDefaultReviewerUsers
func (a *AuditSurveyTemplatesDefaultReviewerUsersAPIService) AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdDeleteExecute(r ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdDeleteRequest) (*AuditSurveyTemplatesDefaultReviewerUsers, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditSurveyTemplatesDefaultReviewerUsers
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditSurveyTemplatesDefaultReviewerUsersAPIService.AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_survey_templates_default_reviewer_users/{audit_survey_templates_default_reviewer_user_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_survey_templates_default_reviewer_user_id"+"}", url.PathEscape(parameterValueToString(r.auditSurveyTemplatesDefaultReviewerUserId, "auditSurveyTemplatesDefaultReviewerUserId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdGetRequest struct {
	ctx context.Context
	ApiService *AuditSurveyTemplatesDefaultReviewerUsersAPIService
	auditSurveyTemplatesDefaultReviewerUserId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdGetRequest) Include(include []string) ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdGetRequest) Execute() (*AuditSurveyTemplatesDefaultReviewerUsers, *http.Response, error) {
	return r.ApiService.AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdGetExecute(r)
}

/*
AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdGet Method for AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditSurveyTemplatesDefaultReviewerUserId Model id
 @return ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdGetRequest
*/
func (a *AuditSurveyTemplatesDefaultReviewerUsersAPIService) AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdGet(ctx context.Context, auditSurveyTemplatesDefaultReviewerUserId int64) ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdGetRequest {
	return ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdGetRequest{
		ApiService: a,
		ctx: ctx,
		auditSurveyTemplatesDefaultReviewerUserId: auditSurveyTemplatesDefaultReviewerUserId,
	}
}

// Execute executes the request
//  @return AuditSurveyTemplatesDefaultReviewerUsers
func (a *AuditSurveyTemplatesDefaultReviewerUsersAPIService) AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdGetExecute(r ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdGetRequest) (*AuditSurveyTemplatesDefaultReviewerUsers, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditSurveyTemplatesDefaultReviewerUsers
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditSurveyTemplatesDefaultReviewerUsersAPIService.AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_survey_templates_default_reviewer_users/{audit_survey_templates_default_reviewer_user_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_survey_templates_default_reviewer_user_id"+"}", url.PathEscape(parameterValueToString(r.auditSurveyTemplatesDefaultReviewerUserId, "auditSurveyTemplatesDefaultReviewerUserId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdPutRequest struct {
	ctx context.Context
	ApiService *AuditSurveyTemplatesDefaultReviewerUsersAPIService
	auditSurveyTemplatesDefaultReviewerUserId int64
	auditSurveyTemplatesDefaultReviewerUsersPut *AuditSurveyTemplatesDefaultReviewerUsersPut
}

func (r ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdPutRequest) AuditSurveyTemplatesDefaultReviewerUsersPut(auditSurveyTemplatesDefaultReviewerUsersPut AuditSurveyTemplatesDefaultReviewerUsersPut) ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdPutRequest {
	r.auditSurveyTemplatesDefaultReviewerUsersPut = &auditSurveyTemplatesDefaultReviewerUsersPut
	return r
}

func (r ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdPutRequest) Execute() (*AuditSurveyTemplatesDefaultReviewerUsers, *http.Response, error) {
	return r.ApiService.AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdPutExecute(r)
}

/*
AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdPut Method for AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditSurveyTemplatesDefaultReviewerUserId Model id
 @return ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdPutRequest
*/
func (a *AuditSurveyTemplatesDefaultReviewerUsersAPIService) AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdPut(ctx context.Context, auditSurveyTemplatesDefaultReviewerUserId int64) ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdPutRequest {
	return ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdPutRequest{
		ApiService: a,
		ctx: ctx,
		auditSurveyTemplatesDefaultReviewerUserId: auditSurveyTemplatesDefaultReviewerUserId,
	}
}

// Execute executes the request
//  @return AuditSurveyTemplatesDefaultReviewerUsers
func (a *AuditSurveyTemplatesDefaultReviewerUsersAPIService) AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdPutExecute(r ApiAuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdPutRequest) (*AuditSurveyTemplatesDefaultReviewerUsers, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditSurveyTemplatesDefaultReviewerUsers
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditSurveyTemplatesDefaultReviewerUsersAPIService.AuditSurveyTemplatesDefaultReviewerUsersAuditSurveyTemplatesDefaultReviewerUserIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_survey_templates_default_reviewer_users/{audit_survey_templates_default_reviewer_user_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_survey_templates_default_reviewer_user_id"+"}", url.PathEscape(parameterValueToString(r.auditSurveyTemplatesDefaultReviewerUserId, "auditSurveyTemplatesDefaultReviewerUserId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditSurveyTemplatesDefaultReviewerUsersPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditSurveyTemplatesDefaultReviewerUsersGetRequest struct {
	ctx context.Context
	ApiService *AuditSurveyTemplatesDefaultReviewerUsersAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditSurveyTemplatesDefaultReviewerUsersGetRequest) Include(include []string) ApiAuditSurveyTemplatesDefaultReviewerUsersGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditSurveyTemplatesDefaultReviewerUsersGetRequest) Execute() (*AuditSurveyTemplatesDefaultReviewerUsersGet200Response, *http.Response, error) {
	return r.ApiService.AuditSurveyTemplatesDefaultReviewerUsersGetExecute(r)
}

/*
AuditSurveyTemplatesDefaultReviewerUsersGet Method for AuditSurveyTemplatesDefaultReviewerUsersGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditSurveyTemplatesDefaultReviewerUsersGetRequest
*/
func (a *AuditSurveyTemplatesDefaultReviewerUsersAPIService) AuditSurveyTemplatesDefaultReviewerUsersGet(ctx context.Context) ApiAuditSurveyTemplatesDefaultReviewerUsersGetRequest {
	return ApiAuditSurveyTemplatesDefaultReviewerUsersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditSurveyTemplatesDefaultReviewerUsersGet200Response
func (a *AuditSurveyTemplatesDefaultReviewerUsersAPIService) AuditSurveyTemplatesDefaultReviewerUsersGetExecute(r ApiAuditSurveyTemplatesDefaultReviewerUsersGetRequest) (*AuditSurveyTemplatesDefaultReviewerUsersGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditSurveyTemplatesDefaultReviewerUsersGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditSurveyTemplatesDefaultReviewerUsersAPIService.AuditSurveyTemplatesDefaultReviewerUsersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_survey_templates_default_reviewer_users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditSurveyTemplatesDefaultReviewerUsersPostRequest struct {
	ctx context.Context
	ApiService *AuditSurveyTemplatesDefaultReviewerUsersAPIService
	auditSurveyTemplatesDefaultReviewerUsersPostRequest *AuditSurveyTemplatesDefaultReviewerUsersPostRequest
}

func (r ApiAuditSurveyTemplatesDefaultReviewerUsersPostRequest) AuditSurveyTemplatesDefaultReviewerUsersPostRequest(auditSurveyTemplatesDefaultReviewerUsersPostRequest AuditSurveyTemplatesDefaultReviewerUsersPostRequest) ApiAuditSurveyTemplatesDefaultReviewerUsersPostRequest {
	r.auditSurveyTemplatesDefaultReviewerUsersPostRequest = &auditSurveyTemplatesDefaultReviewerUsersPostRequest
	return r
}

func (r ApiAuditSurveyTemplatesDefaultReviewerUsersPostRequest) Execute() (*AuditSurveyTemplatesDefaultReviewerUsersGet200Response, *http.Response, error) {
	return r.ApiService.AuditSurveyTemplatesDefaultReviewerUsersPostExecute(r)
}

/*
AuditSurveyTemplatesDefaultReviewerUsersPost Method for AuditSurveyTemplatesDefaultReviewerUsersPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditSurveyTemplatesDefaultReviewerUsersPostRequest
*/
func (a *AuditSurveyTemplatesDefaultReviewerUsersAPIService) AuditSurveyTemplatesDefaultReviewerUsersPost(ctx context.Context) ApiAuditSurveyTemplatesDefaultReviewerUsersPostRequest {
	return ApiAuditSurveyTemplatesDefaultReviewerUsersPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditSurveyTemplatesDefaultReviewerUsersGet200Response
func (a *AuditSurveyTemplatesDefaultReviewerUsersAPIService) AuditSurveyTemplatesDefaultReviewerUsersPostExecute(r ApiAuditSurveyTemplatesDefaultReviewerUsersPostRequest) (*AuditSurveyTemplatesDefaultReviewerUsersGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditSurveyTemplatesDefaultReviewerUsersGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditSurveyTemplatesDefaultReviewerUsersAPIService.AuditSurveyTemplatesDefaultReviewerUsersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_survey_templates_default_reviewer_users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditSurveyTemplatesDefaultReviewerUsersPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
