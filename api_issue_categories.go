/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// IssueCategoriesAPIService IssueCategoriesAPI service
type IssueCategoriesAPIService service

type ApiIssueCategoriesGetRequest struct {
	ctx context.Context
	ApiService *IssueCategoriesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiIssueCategoriesGetRequest) Include(include []string) ApiIssueCategoriesGetRequest {
	r.include = &include
	return r
}

func (r ApiIssueCategoriesGetRequest) Execute() (*IssueCategoriesGet200Response, *http.Response, error) {
	return r.ApiService.IssueCategoriesGetExecute(r)
}

/*
IssueCategoriesGet Method for IssueCategoriesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIssueCategoriesGetRequest
*/
func (a *IssueCategoriesAPIService) IssueCategoriesGet(ctx context.Context) ApiIssueCategoriesGetRequest {
	return ApiIssueCategoriesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IssueCategoriesGet200Response
func (a *IssueCategoriesAPIService) IssueCategoriesGetExecute(r ApiIssueCategoriesGetRequest) (*IssueCategoriesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IssueCategoriesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IssueCategoriesAPIService.IssueCategoriesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/issue_categories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIssueCategoriesIssueCategoryIdDeleteRequest struct {
	ctx context.Context
	ApiService *IssueCategoriesAPIService
	issueCategoryId int64
}

func (r ApiIssueCategoriesIssueCategoryIdDeleteRequest) Execute() (*IssueCategories, *http.Response, error) {
	return r.ApiService.IssueCategoriesIssueCategoryIdDeleteExecute(r)
}

/*
IssueCategoriesIssueCategoryIdDelete Method for IssueCategoriesIssueCategoryIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param issueCategoryId Model id
 @return ApiIssueCategoriesIssueCategoryIdDeleteRequest
*/
func (a *IssueCategoriesAPIService) IssueCategoriesIssueCategoryIdDelete(ctx context.Context, issueCategoryId int64) ApiIssueCategoriesIssueCategoryIdDeleteRequest {
	return ApiIssueCategoriesIssueCategoryIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		issueCategoryId: issueCategoryId,
	}
}

// Execute executes the request
//  @return IssueCategories
func (a *IssueCategoriesAPIService) IssueCategoriesIssueCategoryIdDeleteExecute(r ApiIssueCategoriesIssueCategoryIdDeleteRequest) (*IssueCategories, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IssueCategories
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IssueCategoriesAPIService.IssueCategoriesIssueCategoryIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/issue_categories/{issue_category_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"issue_category_id"+"}", url.PathEscape(parameterValueToString(r.issueCategoryId, "issueCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIssueCategoriesIssueCategoryIdGetRequest struct {
	ctx context.Context
	ApiService *IssueCategoriesAPIService
	issueCategoryId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiIssueCategoriesIssueCategoryIdGetRequest) Include(include []string) ApiIssueCategoriesIssueCategoryIdGetRequest {
	r.include = &include
	return r
}

func (r ApiIssueCategoriesIssueCategoryIdGetRequest) Execute() (*IssueCategories, *http.Response, error) {
	return r.ApiService.IssueCategoriesIssueCategoryIdGetExecute(r)
}

/*
IssueCategoriesIssueCategoryIdGet Method for IssueCategoriesIssueCategoryIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param issueCategoryId Model id
 @return ApiIssueCategoriesIssueCategoryIdGetRequest
*/
func (a *IssueCategoriesAPIService) IssueCategoriesIssueCategoryIdGet(ctx context.Context, issueCategoryId int64) ApiIssueCategoriesIssueCategoryIdGetRequest {
	return ApiIssueCategoriesIssueCategoryIdGetRequest{
		ApiService: a,
		ctx: ctx,
		issueCategoryId: issueCategoryId,
	}
}

// Execute executes the request
//  @return IssueCategories
func (a *IssueCategoriesAPIService) IssueCategoriesIssueCategoryIdGetExecute(r ApiIssueCategoriesIssueCategoryIdGetRequest) (*IssueCategories, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IssueCategories
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IssueCategoriesAPIService.IssueCategoriesIssueCategoryIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/issue_categories/{issue_category_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"issue_category_id"+"}", url.PathEscape(parameterValueToString(r.issueCategoryId, "issueCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIssueCategoriesIssueCategoryIdPutRequest struct {
	ctx context.Context
	ApiService *IssueCategoriesAPIService
	issueCategoryId int64
	issueCategoriesPut *IssueCategoriesPut
}

func (r ApiIssueCategoriesIssueCategoryIdPutRequest) IssueCategoriesPut(issueCategoriesPut IssueCategoriesPut) ApiIssueCategoriesIssueCategoryIdPutRequest {
	r.issueCategoriesPut = &issueCategoriesPut
	return r
}

func (r ApiIssueCategoriesIssueCategoryIdPutRequest) Execute() (*IssueCategories, *http.Response, error) {
	return r.ApiService.IssueCategoriesIssueCategoryIdPutExecute(r)
}

/*
IssueCategoriesIssueCategoryIdPut Method for IssueCategoriesIssueCategoryIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param issueCategoryId Model id
 @return ApiIssueCategoriesIssueCategoryIdPutRequest
*/
func (a *IssueCategoriesAPIService) IssueCategoriesIssueCategoryIdPut(ctx context.Context, issueCategoryId int64) ApiIssueCategoriesIssueCategoryIdPutRequest {
	return ApiIssueCategoriesIssueCategoryIdPutRequest{
		ApiService: a,
		ctx: ctx,
		issueCategoryId: issueCategoryId,
	}
}

// Execute executes the request
//  @return IssueCategories
func (a *IssueCategoriesAPIService) IssueCategoriesIssueCategoryIdPutExecute(r ApiIssueCategoriesIssueCategoryIdPutRequest) (*IssueCategories, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IssueCategories
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IssueCategoriesAPIService.IssueCategoriesIssueCategoryIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/issue_categories/{issue_category_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"issue_category_id"+"}", url.PathEscape(parameterValueToString(r.issueCategoryId, "issueCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.issueCategoriesPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIssueCategoriesPostRequest struct {
	ctx context.Context
	ApiService *IssueCategoriesAPIService
	issueCategoriesPostRequest *IssueCategoriesPostRequest
}

func (r ApiIssueCategoriesPostRequest) IssueCategoriesPostRequest(issueCategoriesPostRequest IssueCategoriesPostRequest) ApiIssueCategoriesPostRequest {
	r.issueCategoriesPostRequest = &issueCategoriesPostRequest
	return r
}

func (r ApiIssueCategoriesPostRequest) Execute() (*IssueCategoriesGet200Response, *http.Response, error) {
	return r.ApiService.IssueCategoriesPostExecute(r)
}

/*
IssueCategoriesPost Method for IssueCategoriesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIssueCategoriesPostRequest
*/
func (a *IssueCategoriesAPIService) IssueCategoriesPost(ctx context.Context) ApiIssueCategoriesPostRequest {
	return ApiIssueCategoriesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IssueCategoriesGet200Response
func (a *IssueCategoriesAPIService) IssueCategoriesPostExecute(r ApiIssueCategoriesPostRequest) (*IssueCategoriesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IssueCategoriesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IssueCategoriesAPIService.IssueCategoriesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/issue_categories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.issueCategoriesPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
