/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// QuestionResponsesAPIService QuestionResponsesAPI service
type QuestionResponsesAPIService service

type ApiQuestionResponsesGetRequest struct {
	ctx context.Context
	ApiService *QuestionResponsesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiQuestionResponsesGetRequest) Include(include []string) ApiQuestionResponsesGetRequest {
	r.include = &include
	return r
}

func (r ApiQuestionResponsesGetRequest) Execute() (*QuestionResponsesGet200Response, *http.Response, error) {
	return r.ApiService.QuestionResponsesGetExecute(r)
}

/*
QuestionResponsesGet Method for QuestionResponsesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQuestionResponsesGetRequest
*/
func (a *QuestionResponsesAPIService) QuestionResponsesGet(ctx context.Context) ApiQuestionResponsesGetRequest {
	return ApiQuestionResponsesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QuestionResponsesGet200Response
func (a *QuestionResponsesAPIService) QuestionResponsesGetExecute(r ApiQuestionResponsesGetRequest) (*QuestionResponsesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QuestionResponsesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuestionResponsesAPIService.QuestionResponsesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/question_responses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQuestionResponsesPostRequest struct {
	ctx context.Context
	ApiService *QuestionResponsesAPIService
	questionResponsesPostRequest *QuestionResponsesPostRequest
}

func (r ApiQuestionResponsesPostRequest) QuestionResponsesPostRequest(questionResponsesPostRequest QuestionResponsesPostRequest) ApiQuestionResponsesPostRequest {
	r.questionResponsesPostRequest = &questionResponsesPostRequest
	return r
}

func (r ApiQuestionResponsesPostRequest) Execute() (*QuestionResponsesGet200Response, *http.Response, error) {
	return r.ApiService.QuestionResponsesPostExecute(r)
}

/*
QuestionResponsesPost Method for QuestionResponsesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQuestionResponsesPostRequest
*/
func (a *QuestionResponsesAPIService) QuestionResponsesPost(ctx context.Context) ApiQuestionResponsesPostRequest {
	return ApiQuestionResponsesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QuestionResponsesGet200Response
func (a *QuestionResponsesAPIService) QuestionResponsesPostExecute(r ApiQuestionResponsesPostRequest) (*QuestionResponsesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QuestionResponsesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuestionResponsesAPIService.QuestionResponsesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/question_responses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.questionResponsesPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQuestionResponsesQuestionResponseIdDeleteRequest struct {
	ctx context.Context
	ApiService *QuestionResponsesAPIService
	questionResponseId int64
}

func (r ApiQuestionResponsesQuestionResponseIdDeleteRequest) Execute() (*QuestionResponses, *http.Response, error) {
	return r.ApiService.QuestionResponsesQuestionResponseIdDeleteExecute(r)
}

/*
QuestionResponsesQuestionResponseIdDelete Method for QuestionResponsesQuestionResponseIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param questionResponseId Model id
 @return ApiQuestionResponsesQuestionResponseIdDeleteRequest
*/
func (a *QuestionResponsesAPIService) QuestionResponsesQuestionResponseIdDelete(ctx context.Context, questionResponseId int64) ApiQuestionResponsesQuestionResponseIdDeleteRequest {
	return ApiQuestionResponsesQuestionResponseIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		questionResponseId: questionResponseId,
	}
}

// Execute executes the request
//  @return QuestionResponses
func (a *QuestionResponsesAPIService) QuestionResponsesQuestionResponseIdDeleteExecute(r ApiQuestionResponsesQuestionResponseIdDeleteRequest) (*QuestionResponses, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QuestionResponses
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuestionResponsesAPIService.QuestionResponsesQuestionResponseIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/question_responses/{question_response_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"question_response_id"+"}", url.PathEscape(parameterValueToString(r.questionResponseId, "questionResponseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQuestionResponsesQuestionResponseIdGetRequest struct {
	ctx context.Context
	ApiService *QuestionResponsesAPIService
	questionResponseId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiQuestionResponsesQuestionResponseIdGetRequest) Include(include []string) ApiQuestionResponsesQuestionResponseIdGetRequest {
	r.include = &include
	return r
}

func (r ApiQuestionResponsesQuestionResponseIdGetRequest) Execute() (*QuestionResponses, *http.Response, error) {
	return r.ApiService.QuestionResponsesQuestionResponseIdGetExecute(r)
}

/*
QuestionResponsesQuestionResponseIdGet Method for QuestionResponsesQuestionResponseIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param questionResponseId Model id
 @return ApiQuestionResponsesQuestionResponseIdGetRequest
*/
func (a *QuestionResponsesAPIService) QuestionResponsesQuestionResponseIdGet(ctx context.Context, questionResponseId int64) ApiQuestionResponsesQuestionResponseIdGetRequest {
	return ApiQuestionResponsesQuestionResponseIdGetRequest{
		ApiService: a,
		ctx: ctx,
		questionResponseId: questionResponseId,
	}
}

// Execute executes the request
//  @return QuestionResponses
func (a *QuestionResponsesAPIService) QuestionResponsesQuestionResponseIdGetExecute(r ApiQuestionResponsesQuestionResponseIdGetRequest) (*QuestionResponses, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QuestionResponses
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuestionResponsesAPIService.QuestionResponsesQuestionResponseIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/question_responses/{question_response_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"question_response_id"+"}", url.PathEscape(parameterValueToString(r.questionResponseId, "questionResponseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQuestionResponsesQuestionResponseIdPutRequest struct {
	ctx context.Context
	ApiService *QuestionResponsesAPIService
	questionResponseId int64
	body *interface{}
}

func (r ApiQuestionResponsesQuestionResponseIdPutRequest) Body(body interface{}) ApiQuestionResponsesQuestionResponseIdPutRequest {
	r.body = &body
	return r
}

func (r ApiQuestionResponsesQuestionResponseIdPutRequest) Execute() (*QuestionResponses, *http.Response, error) {
	return r.ApiService.QuestionResponsesQuestionResponseIdPutExecute(r)
}

/*
QuestionResponsesQuestionResponseIdPut Method for QuestionResponsesQuestionResponseIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param questionResponseId Model id
 @return ApiQuestionResponsesQuestionResponseIdPutRequest
*/
func (a *QuestionResponsesAPIService) QuestionResponsesQuestionResponseIdPut(ctx context.Context, questionResponseId int64) ApiQuestionResponsesQuestionResponseIdPutRequest {
	return ApiQuestionResponsesQuestionResponseIdPutRequest{
		ApiService: a,
		ctx: ctx,
		questionResponseId: questionResponseId,
	}
}

// Execute executes the request
//  @return QuestionResponses
func (a *QuestionResponsesAPIService) QuestionResponsesQuestionResponseIdPutExecute(r ApiQuestionResponsesQuestionResponseIdPutRequest) (*QuestionResponses, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QuestionResponses
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuestionResponsesAPIService.QuestionResponsesQuestionResponseIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/question_responses/{question_response_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"question_response_id"+"}", url.PathEscape(parameterValueToString(r.questionResponseId, "questionResponseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
