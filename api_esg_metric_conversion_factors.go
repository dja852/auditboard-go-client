/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EsgMetricConversionFactorsAPIService EsgMetricConversionFactorsAPI service
type EsgMetricConversionFactorsAPIService service

type ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdDeleteRequest struct {
	ctx context.Context
	ApiService *EsgMetricConversionFactorsAPIService
	esgMetricConversionFactorId int64
}

func (r ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdDeleteRequest) Execute() (*EsgMetricConversionFactors, *http.Response, error) {
	return r.ApiService.EsgMetricConversionFactorsEsgMetricConversionFactorIdDeleteExecute(r)
}

/*
EsgMetricConversionFactorsEsgMetricConversionFactorIdDelete Method for EsgMetricConversionFactorsEsgMetricConversionFactorIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricConversionFactorId Model id
 @return ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdDeleteRequest
*/
func (a *EsgMetricConversionFactorsAPIService) EsgMetricConversionFactorsEsgMetricConversionFactorIdDelete(ctx context.Context, esgMetricConversionFactorId int64) ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdDeleteRequest {
	return ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricConversionFactorId: esgMetricConversionFactorId,
	}
}

// Execute executes the request
//  @return EsgMetricConversionFactors
func (a *EsgMetricConversionFactorsAPIService) EsgMetricConversionFactorsEsgMetricConversionFactorIdDeleteExecute(r ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdDeleteRequest) (*EsgMetricConversionFactors, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricConversionFactors
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricConversionFactorsAPIService.EsgMetricConversionFactorsEsgMetricConversionFactorIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_conversion_factors/{esg_metric_conversion_factor_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_conversion_factor_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricConversionFactorId, "esgMetricConversionFactorId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdGetRequest struct {
	ctx context.Context
	ApiService *EsgMetricConversionFactorsAPIService
	esgMetricConversionFactorId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdGetRequest) Include(include []string) ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdGetRequest {
	r.include = &include
	return r
}

func (r ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdGetRequest) Execute() (*EsgMetricConversionFactors, *http.Response, error) {
	return r.ApiService.EsgMetricConversionFactorsEsgMetricConversionFactorIdGetExecute(r)
}

/*
EsgMetricConversionFactorsEsgMetricConversionFactorIdGet Method for EsgMetricConversionFactorsEsgMetricConversionFactorIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricConversionFactorId Model id
 @return ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdGetRequest
*/
func (a *EsgMetricConversionFactorsAPIService) EsgMetricConversionFactorsEsgMetricConversionFactorIdGet(ctx context.Context, esgMetricConversionFactorId int64) ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdGetRequest {
	return ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdGetRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricConversionFactorId: esgMetricConversionFactorId,
	}
}

// Execute executes the request
//  @return EsgMetricConversionFactors
func (a *EsgMetricConversionFactorsAPIService) EsgMetricConversionFactorsEsgMetricConversionFactorIdGetExecute(r ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdGetRequest) (*EsgMetricConversionFactors, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricConversionFactors
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricConversionFactorsAPIService.EsgMetricConversionFactorsEsgMetricConversionFactorIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_conversion_factors/{esg_metric_conversion_factor_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_conversion_factor_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricConversionFactorId, "esgMetricConversionFactorId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdPutRequest struct {
	ctx context.Context
	ApiService *EsgMetricConversionFactorsAPIService
	esgMetricConversionFactorId int64
	esgMetricConversionFactorsPut *EsgMetricConversionFactorsPut
}

func (r ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdPutRequest) EsgMetricConversionFactorsPut(esgMetricConversionFactorsPut EsgMetricConversionFactorsPut) ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdPutRequest {
	r.esgMetricConversionFactorsPut = &esgMetricConversionFactorsPut
	return r
}

func (r ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdPutRequest) Execute() (*EsgMetricConversionFactors, *http.Response, error) {
	return r.ApiService.EsgMetricConversionFactorsEsgMetricConversionFactorIdPutExecute(r)
}

/*
EsgMetricConversionFactorsEsgMetricConversionFactorIdPut Method for EsgMetricConversionFactorsEsgMetricConversionFactorIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricConversionFactorId Model id
 @return ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdPutRequest
*/
func (a *EsgMetricConversionFactorsAPIService) EsgMetricConversionFactorsEsgMetricConversionFactorIdPut(ctx context.Context, esgMetricConversionFactorId int64) ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdPutRequest {
	return ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdPutRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricConversionFactorId: esgMetricConversionFactorId,
	}
}

// Execute executes the request
//  @return EsgMetricConversionFactors
func (a *EsgMetricConversionFactorsAPIService) EsgMetricConversionFactorsEsgMetricConversionFactorIdPutExecute(r ApiEsgMetricConversionFactorsEsgMetricConversionFactorIdPutRequest) (*EsgMetricConversionFactors, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricConversionFactors
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricConversionFactorsAPIService.EsgMetricConversionFactorsEsgMetricConversionFactorIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_conversion_factors/{esg_metric_conversion_factor_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_conversion_factor_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricConversionFactorId, "esgMetricConversionFactorId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esgMetricConversionFactorsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricConversionFactorsGetRequest struct {
	ctx context.Context
	ApiService *EsgMetricConversionFactorsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiEsgMetricConversionFactorsGetRequest) Include(include []string) ApiEsgMetricConversionFactorsGetRequest {
	r.include = &include
	return r
}

func (r ApiEsgMetricConversionFactorsGetRequest) Execute() (*EsgMetricConversionFactorsGet200Response, *http.Response, error) {
	return r.ApiService.EsgMetricConversionFactorsGetExecute(r)
}

/*
EsgMetricConversionFactorsGet Method for EsgMetricConversionFactorsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEsgMetricConversionFactorsGetRequest
*/
func (a *EsgMetricConversionFactorsAPIService) EsgMetricConversionFactorsGet(ctx context.Context) ApiEsgMetricConversionFactorsGetRequest {
	return ApiEsgMetricConversionFactorsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EsgMetricConversionFactorsGet200Response
func (a *EsgMetricConversionFactorsAPIService) EsgMetricConversionFactorsGetExecute(r ApiEsgMetricConversionFactorsGetRequest) (*EsgMetricConversionFactorsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricConversionFactorsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricConversionFactorsAPIService.EsgMetricConversionFactorsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_conversion_factors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricConversionFactorsPostRequest struct {
	ctx context.Context
	ApiService *EsgMetricConversionFactorsAPIService
	esgMetricConversionFactorsPostRequest *EsgMetricConversionFactorsPostRequest
}

func (r ApiEsgMetricConversionFactorsPostRequest) EsgMetricConversionFactorsPostRequest(esgMetricConversionFactorsPostRequest EsgMetricConversionFactorsPostRequest) ApiEsgMetricConversionFactorsPostRequest {
	r.esgMetricConversionFactorsPostRequest = &esgMetricConversionFactorsPostRequest
	return r
}

func (r ApiEsgMetricConversionFactorsPostRequest) Execute() (*EsgMetricConversionFactorsGet200Response, *http.Response, error) {
	return r.ApiService.EsgMetricConversionFactorsPostExecute(r)
}

/*
EsgMetricConversionFactorsPost Method for EsgMetricConversionFactorsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEsgMetricConversionFactorsPostRequest
*/
func (a *EsgMetricConversionFactorsAPIService) EsgMetricConversionFactorsPost(ctx context.Context) ApiEsgMetricConversionFactorsPostRequest {
	return ApiEsgMetricConversionFactorsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EsgMetricConversionFactorsGet200Response
func (a *EsgMetricConversionFactorsAPIService) EsgMetricConversionFactorsPostExecute(r ApiEsgMetricConversionFactorsPostRequest) (*EsgMetricConversionFactorsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricConversionFactorsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricConversionFactorsAPIService.EsgMetricConversionFactorsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_conversion_factors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esgMetricConversionFactorsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
