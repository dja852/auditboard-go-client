/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the IssuesArchives type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssuesArchives{}

// IssuesArchives struct for IssuesArchives
type IssuesArchives struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	Type string `json:"type"`
	Status *string `json:"status,omitempty"`
	// Note: This is a Foreign Key to `issues.id`.<fk table='issues' column='id'/>
	IssueId int32 `json:"issue_id"`
	// Note: This is a Foreign Key to `archives.id`.<fk table='archives' column='id'/>
	ArchiveId int32 `json:"archive_id"`
	// Note: This is a Foreign Key to `controls_data_archives.id`.<fk table='controls_data_archives' column='id'/>
	ControlsDataArchiveId int32 `json:"controls_data_archive_id"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	CreatorUserId *int32 `json:"creator_user_id,omitempty"`
	// Note: This is a Foreign Key to `controls_data.id`.<fk table='controls_data' column='id'/>
	ControlsDatumId *int32 `json:"controls_datum_id,omitempty"`
	// Note: This is a Foreign Key to `tests.id`.<fk table='tests' column='id'/>
	TestId *int32 `json:"test_id,omitempty"`
	// Note: This is a Foreign Key to `test_sections.id`.<fk table='test_sections' column='id'/>
	TestSectionId *int32 `json:"test_section_id,omitempty"`
	// Note: This is a Foreign Key to `issues.id`.<fk table='issues' column='id'/>
	ReferenceIssueId *int32 `json:"reference_issue_id,omitempty"`
	Flattened interface{} `json:"flattened"`
	ReferenceMeta interface{} `json:"reference_meta,omitempty"`
	RemediationOwners interface{} `json:"remediation_owners"`
	Totals interface{} `json:"totals"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	CreatedByUserId *int32 `json:"created_by_user_id,omitempty"`
}

type _IssuesArchives IssuesArchives

// NewIssuesArchives instantiates a new IssuesArchives object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesArchives(type_ string, issueId int32, archiveId int32, controlsDataArchiveId int32, flattened interface{}, remediationOwners interface{}, totals interface{}) *IssuesArchives {
	this := IssuesArchives{}
	this.Type = type_
	this.IssueId = issueId
	this.ArchiveId = archiveId
	this.ControlsDataArchiveId = controlsDataArchiveId
	this.Flattened = flattened
	this.RemediationOwners = remediationOwners
	this.Totals = totals
	return &this
}

// NewIssuesArchivesWithDefaults instantiates a new IssuesArchives object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesArchivesWithDefaults() *IssuesArchives {
	this := IssuesArchives{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IssuesArchives) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IssuesArchives) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *IssuesArchives) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value
func (o *IssuesArchives) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IssuesArchives) SetType(v string) {
	o.Type = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IssuesArchives) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IssuesArchives) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *IssuesArchives) SetStatus(v string) {
	o.Status = &v
}

// GetIssueId returns the IssueId field value
func (o *IssuesArchives) GetIssueId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IssueId
}

// GetIssueIdOk returns a tuple with the IssueId field value
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetIssueIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueId, true
}

// SetIssueId sets field value
func (o *IssuesArchives) SetIssueId(v int32) {
	o.IssueId = v
}

// GetArchiveId returns the ArchiveId field value
func (o *IssuesArchives) GetArchiveId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ArchiveId
}

// GetArchiveIdOk returns a tuple with the ArchiveId field value
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetArchiveIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchiveId, true
}

// SetArchiveId sets field value
func (o *IssuesArchives) SetArchiveId(v int32) {
	o.ArchiveId = v
}

// GetControlsDataArchiveId returns the ControlsDataArchiveId field value
func (o *IssuesArchives) GetControlsDataArchiveId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ControlsDataArchiveId
}

// GetControlsDataArchiveIdOk returns a tuple with the ControlsDataArchiveId field value
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetControlsDataArchiveIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ControlsDataArchiveId, true
}

// SetControlsDataArchiveId sets field value
func (o *IssuesArchives) SetControlsDataArchiveId(v int32) {
	o.ControlsDataArchiveId = v
}

// GetCreatorUserId returns the CreatorUserId field value if set, zero value otherwise.
func (o *IssuesArchives) GetCreatorUserId() int32 {
	if o == nil || IsNil(o.CreatorUserId) {
		var ret int32
		return ret
	}
	return *o.CreatorUserId
}

// GetCreatorUserIdOk returns a tuple with the CreatorUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetCreatorUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatorUserId) {
		return nil, false
	}
	return o.CreatorUserId, true
}

// HasCreatorUserId returns a boolean if a field has been set.
func (o *IssuesArchives) HasCreatorUserId() bool {
	if o != nil && !IsNil(o.CreatorUserId) {
		return true
	}

	return false
}

// SetCreatorUserId gets a reference to the given int32 and assigns it to the CreatorUserId field.
func (o *IssuesArchives) SetCreatorUserId(v int32) {
	o.CreatorUserId = &v
}

// GetControlsDatumId returns the ControlsDatumId field value if set, zero value otherwise.
func (o *IssuesArchives) GetControlsDatumId() int32 {
	if o == nil || IsNil(o.ControlsDatumId) {
		var ret int32
		return ret
	}
	return *o.ControlsDatumId
}

// GetControlsDatumIdOk returns a tuple with the ControlsDatumId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetControlsDatumIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ControlsDatumId) {
		return nil, false
	}
	return o.ControlsDatumId, true
}

// HasControlsDatumId returns a boolean if a field has been set.
func (o *IssuesArchives) HasControlsDatumId() bool {
	if o != nil && !IsNil(o.ControlsDatumId) {
		return true
	}

	return false
}

// SetControlsDatumId gets a reference to the given int32 and assigns it to the ControlsDatumId field.
func (o *IssuesArchives) SetControlsDatumId(v int32) {
	o.ControlsDatumId = &v
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *IssuesArchives) GetTestId() int32 {
	if o == nil || IsNil(o.TestId) {
		var ret int32
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetTestIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TestId) {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *IssuesArchives) HasTestId() bool {
	if o != nil && !IsNil(o.TestId) {
		return true
	}

	return false
}

// SetTestId gets a reference to the given int32 and assigns it to the TestId field.
func (o *IssuesArchives) SetTestId(v int32) {
	o.TestId = &v
}

// GetTestSectionId returns the TestSectionId field value if set, zero value otherwise.
func (o *IssuesArchives) GetTestSectionId() int32 {
	if o == nil || IsNil(o.TestSectionId) {
		var ret int32
		return ret
	}
	return *o.TestSectionId
}

// GetTestSectionIdOk returns a tuple with the TestSectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetTestSectionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TestSectionId) {
		return nil, false
	}
	return o.TestSectionId, true
}

// HasTestSectionId returns a boolean if a field has been set.
func (o *IssuesArchives) HasTestSectionId() bool {
	if o != nil && !IsNil(o.TestSectionId) {
		return true
	}

	return false
}

// SetTestSectionId gets a reference to the given int32 and assigns it to the TestSectionId field.
func (o *IssuesArchives) SetTestSectionId(v int32) {
	o.TestSectionId = &v
}

// GetReferenceIssueId returns the ReferenceIssueId field value if set, zero value otherwise.
func (o *IssuesArchives) GetReferenceIssueId() int32 {
	if o == nil || IsNil(o.ReferenceIssueId) {
		var ret int32
		return ret
	}
	return *o.ReferenceIssueId
}

// GetReferenceIssueIdOk returns a tuple with the ReferenceIssueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetReferenceIssueIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ReferenceIssueId) {
		return nil, false
	}
	return o.ReferenceIssueId, true
}

// HasReferenceIssueId returns a boolean if a field has been set.
func (o *IssuesArchives) HasReferenceIssueId() bool {
	if o != nil && !IsNil(o.ReferenceIssueId) {
		return true
	}

	return false
}

// SetReferenceIssueId gets a reference to the given int32 and assigns it to the ReferenceIssueId field.
func (o *IssuesArchives) SetReferenceIssueId(v int32) {
	o.ReferenceIssueId = &v
}

// GetFlattened returns the Flattened field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *IssuesArchives) GetFlattened() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Flattened
}

// GetFlattenedOk returns a tuple with the Flattened field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuesArchives) GetFlattenedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Flattened) {
		return nil, false
	}
	return &o.Flattened, true
}

// SetFlattened sets field value
func (o *IssuesArchives) SetFlattened(v interface{}) {
	o.Flattened = v
}

// GetReferenceMeta returns the ReferenceMeta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuesArchives) GetReferenceMeta() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ReferenceMeta
}

// GetReferenceMetaOk returns a tuple with the ReferenceMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuesArchives) GetReferenceMetaOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ReferenceMeta) {
		return nil, false
	}
	return &o.ReferenceMeta, true
}

// HasReferenceMeta returns a boolean if a field has been set.
func (o *IssuesArchives) HasReferenceMeta() bool {
	if o != nil && !IsNil(o.ReferenceMeta) {
		return true
	}

	return false
}

// SetReferenceMeta gets a reference to the given interface{} and assigns it to the ReferenceMeta field.
func (o *IssuesArchives) SetReferenceMeta(v interface{}) {
	o.ReferenceMeta = v
}

// GetRemediationOwners returns the RemediationOwners field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *IssuesArchives) GetRemediationOwners() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.RemediationOwners
}

// GetRemediationOwnersOk returns a tuple with the RemediationOwners field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuesArchives) GetRemediationOwnersOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RemediationOwners) {
		return nil, false
	}
	return &o.RemediationOwners, true
}

// SetRemediationOwners sets field value
func (o *IssuesArchives) SetRemediationOwners(v interface{}) {
	o.RemediationOwners = v
}

// GetTotals returns the Totals field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *IssuesArchives) GetTotals() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Totals
}

// GetTotalsOk returns a tuple with the Totals field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuesArchives) GetTotalsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Totals) {
		return nil, false
	}
	return &o.Totals, true
}

// SetTotals sets field value
func (o *IssuesArchives) SetTotals(v interface{}) {
	o.Totals = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IssuesArchives) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IssuesArchives) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *IssuesArchives) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IssuesArchives) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IssuesArchives) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *IssuesArchives) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *IssuesArchives) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *IssuesArchives) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *IssuesArchives) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetCreatedByUserId returns the CreatedByUserId field value if set, zero value otherwise.
func (o *IssuesArchives) GetCreatedByUserId() int32 {
	if o == nil || IsNil(o.CreatedByUserId) {
		var ret int32
		return ret
	}
	return *o.CreatedByUserId
}

// GetCreatedByUserIdOk returns a tuple with the CreatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesArchives) GetCreatedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedByUserId) {
		return nil, false
	}
	return o.CreatedByUserId, true
}

// HasCreatedByUserId returns a boolean if a field has been set.
func (o *IssuesArchives) HasCreatedByUserId() bool {
	if o != nil && !IsNil(o.CreatedByUserId) {
		return true
	}

	return false
}

// SetCreatedByUserId gets a reference to the given int32 and assigns it to the CreatedByUserId field.
func (o *IssuesArchives) SetCreatedByUserId(v int32) {
	o.CreatedByUserId = &v
}

func (o IssuesArchives) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssuesArchives) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["issue_id"] = o.IssueId
	toSerialize["archive_id"] = o.ArchiveId
	toSerialize["controls_data_archive_id"] = o.ControlsDataArchiveId
	if !IsNil(o.CreatorUserId) {
		toSerialize["creator_user_id"] = o.CreatorUserId
	}
	if !IsNil(o.ControlsDatumId) {
		toSerialize["controls_datum_id"] = o.ControlsDatumId
	}
	if !IsNil(o.TestId) {
		toSerialize["test_id"] = o.TestId
	}
	if !IsNil(o.TestSectionId) {
		toSerialize["test_section_id"] = o.TestSectionId
	}
	if !IsNil(o.ReferenceIssueId) {
		toSerialize["reference_issue_id"] = o.ReferenceIssueId
	}
	if o.Flattened != nil {
		toSerialize["flattened"] = o.Flattened
	}
	if o.ReferenceMeta != nil {
		toSerialize["reference_meta"] = o.ReferenceMeta
	}
	if o.RemediationOwners != nil {
		toSerialize["remediation_owners"] = o.RemediationOwners
	}
	if o.Totals != nil {
		toSerialize["totals"] = o.Totals
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.CreatedByUserId) {
		toSerialize["created_by_user_id"] = o.CreatedByUserId
	}
	return toSerialize, nil
}

type NullableIssuesArchives struct {
	value *IssuesArchives
	isSet bool
}

func (v NullableIssuesArchives) Get() *IssuesArchives {
	return v.value
}

func (v *NullableIssuesArchives) Set(val *IssuesArchives) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesArchives) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesArchives) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesArchives(val *IssuesArchives) *NullableIssuesArchives {
	return &NullableIssuesArchives{value: val, isSet: true}
}

func (v NullableIssuesArchives) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesArchives) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


