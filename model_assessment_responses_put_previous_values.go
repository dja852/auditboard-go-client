/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the AssessmentResponsesPutPreviousValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssessmentResponsesPutPreviousValues{}

// AssessmentResponsesPutPreviousValues struct for AssessmentResponsesPutPreviousValues
type AssessmentResponsesPutPreviousValues struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	Status *string `json:"status,omitempty"`
	ResponseJson interface{} `json:"response_json,omitempty"`
	AssessableType *string `json:"assessable_type,omitempty"`
	AssessableId *int32 `json:"assessable_id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	SubmittedByUserId *int32 `json:"submitted_by_user_id,omitempty"`
	SubmittedDate *string `json:"submitted_date,omitempty"`
	ReferenceMeta interface{} `json:"reference_meta,omitempty"`
	// Note: This is a Foreign Key to `assessments.id`.<fk table='assessments' column='id'/>
	AssessmentId *int32 `json:"assessment_id,omitempty"`
	Source *string `json:"source,omitempty"`
	// Note: This is a Foreign Key to `assessment_templates.id`.<fk table='assessment_templates' column='id'/>
	AssessmentTemplateId *int32 `json:"assessment_template_id,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	FinalizedByUserId *int32 `json:"finalized_by_user_id,omitempty"`
	FinalizedDate *string `json:"finalized_date,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	AnsweredByUserId *int32 `json:"answered_by_user_id,omitempty"`
	AnsweredDate *string `json:"answered_date,omitempty"`
	IsAnswered *bool `json:"is_answered,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	AssigneeUserId *int32 `json:"assignee_user_id,omitempty"`
	IsNotApplicable *bool `json:"is_not_applicable,omitempty"`
	Notes *string `json:"notes,omitempty"`
	// Note: This is a Foreign Key to `user_assessments.id`.<fk table='user_assessments' column='id'/>
	UserAssessmentId *int32 `json:"user_assessment_id,omitempty"`
	Name *string `json:"name,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	CreatedByUserId *int32 `json:"created_by_user_id,omitempty"`
	// Note: This is a Foreign Key to `risk_responses.id`.<fk table='risk_responses' column='id'/>
	RiskResponseId *int32 `json:"risk_response_id,omitempty"`
	RiskresponseactionId *int32 `json:"riskresponseaction_id,omitempty"`
	RiskresponseactionType *string `json:"riskresponseaction_type,omitempty"`
	// Note: This is a Foreign Key to `assessment_responses.id`.<fk table='assessment_responses' column='id'/>
	ParentAssessmentResponseId *int32 `json:"parent_assessment_response_id,omitempty"`
}

// NewAssessmentResponsesPutPreviousValues instantiates a new AssessmentResponsesPutPreviousValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssessmentResponsesPutPreviousValues() *AssessmentResponsesPutPreviousValues {
	this := AssessmentResponsesPutPreviousValues{}
	var isAnswered bool = false
	this.IsAnswered = &isAnswered
	var isNotApplicable bool = false
	this.IsNotApplicable = &isNotApplicable
	return &this
}

// NewAssessmentResponsesPutPreviousValuesWithDefaults instantiates a new AssessmentResponsesPutPreviousValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssessmentResponsesPutPreviousValuesWithDefaults() *AssessmentResponsesPutPreviousValues {
	this := AssessmentResponsesPutPreviousValues{}
	var isAnswered bool = false
	this.IsAnswered = &isAnswered
	var isNotApplicable bool = false
	this.IsNotApplicable = &isNotApplicable
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AssessmentResponsesPutPreviousValues) SetId(v int32) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AssessmentResponsesPutPreviousValues) SetStatus(v string) {
	o.Status = &v
}

// GetResponseJson returns the ResponseJson field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssessmentResponsesPutPreviousValues) GetResponseJson() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ResponseJson
}

// GetResponseJsonOk returns a tuple with the ResponseJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssessmentResponsesPutPreviousValues) GetResponseJsonOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ResponseJson) {
		return nil, false
	}
	return &o.ResponseJson, true
}

// HasResponseJson returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasResponseJson() bool {
	if o != nil && !IsNil(o.ResponseJson) {
		return true
	}

	return false
}

// SetResponseJson gets a reference to the given interface{} and assigns it to the ResponseJson field.
func (o *AssessmentResponsesPutPreviousValues) SetResponseJson(v interface{}) {
	o.ResponseJson = v
}

// GetAssessableType returns the AssessableType field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetAssessableType() string {
	if o == nil || IsNil(o.AssessableType) {
		var ret string
		return ret
	}
	return *o.AssessableType
}

// GetAssessableTypeOk returns a tuple with the AssessableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetAssessableTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AssessableType) {
		return nil, false
	}
	return o.AssessableType, true
}

// HasAssessableType returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasAssessableType() bool {
	if o != nil && !IsNil(o.AssessableType) {
		return true
	}

	return false
}

// SetAssessableType gets a reference to the given string and assigns it to the AssessableType field.
func (o *AssessmentResponsesPutPreviousValues) SetAssessableType(v string) {
	o.AssessableType = &v
}

// GetAssessableId returns the AssessableId field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetAssessableId() int32 {
	if o == nil || IsNil(o.AssessableId) {
		var ret int32
		return ret
	}
	return *o.AssessableId
}

// GetAssessableIdOk returns a tuple with the AssessableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetAssessableIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AssessableId) {
		return nil, false
	}
	return o.AssessableId, true
}

// HasAssessableId returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasAssessableId() bool {
	if o != nil && !IsNil(o.AssessableId) {
		return true
	}

	return false
}

// SetAssessableId gets a reference to the given int32 and assigns it to the AssessableId field.
func (o *AssessmentResponsesPutPreviousValues) SetAssessableId(v int32) {
	o.AssessableId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *AssessmentResponsesPutPreviousValues) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *AssessmentResponsesPutPreviousValues) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *AssessmentResponsesPutPreviousValues) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetSubmittedByUserId returns the SubmittedByUserId field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetSubmittedByUserId() int32 {
	if o == nil || IsNil(o.SubmittedByUserId) {
		var ret int32
		return ret
	}
	return *o.SubmittedByUserId
}

// GetSubmittedByUserIdOk returns a tuple with the SubmittedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetSubmittedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubmittedByUserId) {
		return nil, false
	}
	return o.SubmittedByUserId, true
}

// HasSubmittedByUserId returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasSubmittedByUserId() bool {
	if o != nil && !IsNil(o.SubmittedByUserId) {
		return true
	}

	return false
}

// SetSubmittedByUserId gets a reference to the given int32 and assigns it to the SubmittedByUserId field.
func (o *AssessmentResponsesPutPreviousValues) SetSubmittedByUserId(v int32) {
	o.SubmittedByUserId = &v
}

// GetSubmittedDate returns the SubmittedDate field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetSubmittedDate() string {
	if o == nil || IsNil(o.SubmittedDate) {
		var ret string
		return ret
	}
	return *o.SubmittedDate
}

// GetSubmittedDateOk returns a tuple with the SubmittedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetSubmittedDateOk() (*string, bool) {
	if o == nil || IsNil(o.SubmittedDate) {
		return nil, false
	}
	return o.SubmittedDate, true
}

// HasSubmittedDate returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasSubmittedDate() bool {
	if o != nil && !IsNil(o.SubmittedDate) {
		return true
	}

	return false
}

// SetSubmittedDate gets a reference to the given string and assigns it to the SubmittedDate field.
func (o *AssessmentResponsesPutPreviousValues) SetSubmittedDate(v string) {
	o.SubmittedDate = &v
}

// GetReferenceMeta returns the ReferenceMeta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssessmentResponsesPutPreviousValues) GetReferenceMeta() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ReferenceMeta
}

// GetReferenceMetaOk returns a tuple with the ReferenceMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssessmentResponsesPutPreviousValues) GetReferenceMetaOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ReferenceMeta) {
		return nil, false
	}
	return &o.ReferenceMeta, true
}

// HasReferenceMeta returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasReferenceMeta() bool {
	if o != nil && !IsNil(o.ReferenceMeta) {
		return true
	}

	return false
}

// SetReferenceMeta gets a reference to the given interface{} and assigns it to the ReferenceMeta field.
func (o *AssessmentResponsesPutPreviousValues) SetReferenceMeta(v interface{}) {
	o.ReferenceMeta = v
}

// GetAssessmentId returns the AssessmentId field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetAssessmentId() int32 {
	if o == nil || IsNil(o.AssessmentId) {
		var ret int32
		return ret
	}
	return *o.AssessmentId
}

// GetAssessmentIdOk returns a tuple with the AssessmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetAssessmentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AssessmentId) {
		return nil, false
	}
	return o.AssessmentId, true
}

// HasAssessmentId returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasAssessmentId() bool {
	if o != nil && !IsNil(o.AssessmentId) {
		return true
	}

	return false
}

// SetAssessmentId gets a reference to the given int32 and assigns it to the AssessmentId field.
func (o *AssessmentResponsesPutPreviousValues) SetAssessmentId(v int32) {
	o.AssessmentId = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *AssessmentResponsesPutPreviousValues) SetSource(v string) {
	o.Source = &v
}

// GetAssessmentTemplateId returns the AssessmentTemplateId field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetAssessmentTemplateId() int32 {
	if o == nil || IsNil(o.AssessmentTemplateId) {
		var ret int32
		return ret
	}
	return *o.AssessmentTemplateId
}

// GetAssessmentTemplateIdOk returns a tuple with the AssessmentTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetAssessmentTemplateIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AssessmentTemplateId) {
		return nil, false
	}
	return o.AssessmentTemplateId, true
}

// HasAssessmentTemplateId returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasAssessmentTemplateId() bool {
	if o != nil && !IsNil(o.AssessmentTemplateId) {
		return true
	}

	return false
}

// SetAssessmentTemplateId gets a reference to the given int32 and assigns it to the AssessmentTemplateId field.
func (o *AssessmentResponsesPutPreviousValues) SetAssessmentTemplateId(v int32) {
	o.AssessmentTemplateId = &v
}

// GetFinalizedByUserId returns the FinalizedByUserId field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetFinalizedByUserId() int32 {
	if o == nil || IsNil(o.FinalizedByUserId) {
		var ret int32
		return ret
	}
	return *o.FinalizedByUserId
}

// GetFinalizedByUserIdOk returns a tuple with the FinalizedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetFinalizedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FinalizedByUserId) {
		return nil, false
	}
	return o.FinalizedByUserId, true
}

// HasFinalizedByUserId returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasFinalizedByUserId() bool {
	if o != nil && !IsNil(o.FinalizedByUserId) {
		return true
	}

	return false
}

// SetFinalizedByUserId gets a reference to the given int32 and assigns it to the FinalizedByUserId field.
func (o *AssessmentResponsesPutPreviousValues) SetFinalizedByUserId(v int32) {
	o.FinalizedByUserId = &v
}

// GetFinalizedDate returns the FinalizedDate field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetFinalizedDate() string {
	if o == nil || IsNil(o.FinalizedDate) {
		var ret string
		return ret
	}
	return *o.FinalizedDate
}

// GetFinalizedDateOk returns a tuple with the FinalizedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetFinalizedDateOk() (*string, bool) {
	if o == nil || IsNil(o.FinalizedDate) {
		return nil, false
	}
	return o.FinalizedDate, true
}

// HasFinalizedDate returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasFinalizedDate() bool {
	if o != nil && !IsNil(o.FinalizedDate) {
		return true
	}

	return false
}

// SetFinalizedDate gets a reference to the given string and assigns it to the FinalizedDate field.
func (o *AssessmentResponsesPutPreviousValues) SetFinalizedDate(v string) {
	o.FinalizedDate = &v
}

// GetAnsweredByUserId returns the AnsweredByUserId field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetAnsweredByUserId() int32 {
	if o == nil || IsNil(o.AnsweredByUserId) {
		var ret int32
		return ret
	}
	return *o.AnsweredByUserId
}

// GetAnsweredByUserIdOk returns a tuple with the AnsweredByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetAnsweredByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AnsweredByUserId) {
		return nil, false
	}
	return o.AnsweredByUserId, true
}

// HasAnsweredByUserId returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasAnsweredByUserId() bool {
	if o != nil && !IsNil(o.AnsweredByUserId) {
		return true
	}

	return false
}

// SetAnsweredByUserId gets a reference to the given int32 and assigns it to the AnsweredByUserId field.
func (o *AssessmentResponsesPutPreviousValues) SetAnsweredByUserId(v int32) {
	o.AnsweredByUserId = &v
}

// GetAnsweredDate returns the AnsweredDate field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetAnsweredDate() string {
	if o == nil || IsNil(o.AnsweredDate) {
		var ret string
		return ret
	}
	return *o.AnsweredDate
}

// GetAnsweredDateOk returns a tuple with the AnsweredDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetAnsweredDateOk() (*string, bool) {
	if o == nil || IsNil(o.AnsweredDate) {
		return nil, false
	}
	return o.AnsweredDate, true
}

// HasAnsweredDate returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasAnsweredDate() bool {
	if o != nil && !IsNil(o.AnsweredDate) {
		return true
	}

	return false
}

// SetAnsweredDate gets a reference to the given string and assigns it to the AnsweredDate field.
func (o *AssessmentResponsesPutPreviousValues) SetAnsweredDate(v string) {
	o.AnsweredDate = &v
}

// GetIsAnswered returns the IsAnswered field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetIsAnswered() bool {
	if o == nil || IsNil(o.IsAnswered) {
		var ret bool
		return ret
	}
	return *o.IsAnswered
}

// GetIsAnsweredOk returns a tuple with the IsAnswered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetIsAnsweredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAnswered) {
		return nil, false
	}
	return o.IsAnswered, true
}

// HasIsAnswered returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasIsAnswered() bool {
	if o != nil && !IsNil(o.IsAnswered) {
		return true
	}

	return false
}

// SetIsAnswered gets a reference to the given bool and assigns it to the IsAnswered field.
func (o *AssessmentResponsesPutPreviousValues) SetIsAnswered(v bool) {
	o.IsAnswered = &v
}

// GetAssigneeUserId returns the AssigneeUserId field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetAssigneeUserId() int32 {
	if o == nil || IsNil(o.AssigneeUserId) {
		var ret int32
		return ret
	}
	return *o.AssigneeUserId
}

// GetAssigneeUserIdOk returns a tuple with the AssigneeUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetAssigneeUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AssigneeUserId) {
		return nil, false
	}
	return o.AssigneeUserId, true
}

// HasAssigneeUserId returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasAssigneeUserId() bool {
	if o != nil && !IsNil(o.AssigneeUserId) {
		return true
	}

	return false
}

// SetAssigneeUserId gets a reference to the given int32 and assigns it to the AssigneeUserId field.
func (o *AssessmentResponsesPutPreviousValues) SetAssigneeUserId(v int32) {
	o.AssigneeUserId = &v
}

// GetIsNotApplicable returns the IsNotApplicable field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetIsNotApplicable() bool {
	if o == nil || IsNil(o.IsNotApplicable) {
		var ret bool
		return ret
	}
	return *o.IsNotApplicable
}

// GetIsNotApplicableOk returns a tuple with the IsNotApplicable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetIsNotApplicableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNotApplicable) {
		return nil, false
	}
	return o.IsNotApplicable, true
}

// HasIsNotApplicable returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasIsNotApplicable() bool {
	if o != nil && !IsNil(o.IsNotApplicable) {
		return true
	}

	return false
}

// SetIsNotApplicable gets a reference to the given bool and assigns it to the IsNotApplicable field.
func (o *AssessmentResponsesPutPreviousValues) SetIsNotApplicable(v bool) {
	o.IsNotApplicable = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *AssessmentResponsesPutPreviousValues) SetNotes(v string) {
	o.Notes = &v
}

// GetUserAssessmentId returns the UserAssessmentId field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetUserAssessmentId() int32 {
	if o == nil || IsNil(o.UserAssessmentId) {
		var ret int32
		return ret
	}
	return *o.UserAssessmentId
}

// GetUserAssessmentIdOk returns a tuple with the UserAssessmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetUserAssessmentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserAssessmentId) {
		return nil, false
	}
	return o.UserAssessmentId, true
}

// HasUserAssessmentId returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasUserAssessmentId() bool {
	if o != nil && !IsNil(o.UserAssessmentId) {
		return true
	}

	return false
}

// SetUserAssessmentId gets a reference to the given int32 and assigns it to the UserAssessmentId field.
func (o *AssessmentResponsesPutPreviousValues) SetUserAssessmentId(v int32) {
	o.UserAssessmentId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AssessmentResponsesPutPreviousValues) SetName(v string) {
	o.Name = &v
}

// GetCreatedByUserId returns the CreatedByUserId field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetCreatedByUserId() int32 {
	if o == nil || IsNil(o.CreatedByUserId) {
		var ret int32
		return ret
	}
	return *o.CreatedByUserId
}

// GetCreatedByUserIdOk returns a tuple with the CreatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetCreatedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedByUserId) {
		return nil, false
	}
	return o.CreatedByUserId, true
}

// HasCreatedByUserId returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasCreatedByUserId() bool {
	if o != nil && !IsNil(o.CreatedByUserId) {
		return true
	}

	return false
}

// SetCreatedByUserId gets a reference to the given int32 and assigns it to the CreatedByUserId field.
func (o *AssessmentResponsesPutPreviousValues) SetCreatedByUserId(v int32) {
	o.CreatedByUserId = &v
}

// GetRiskResponseId returns the RiskResponseId field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetRiskResponseId() int32 {
	if o == nil || IsNil(o.RiskResponseId) {
		var ret int32
		return ret
	}
	return *o.RiskResponseId
}

// GetRiskResponseIdOk returns a tuple with the RiskResponseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetRiskResponseIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RiskResponseId) {
		return nil, false
	}
	return o.RiskResponseId, true
}

// HasRiskResponseId returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasRiskResponseId() bool {
	if o != nil && !IsNil(o.RiskResponseId) {
		return true
	}

	return false
}

// SetRiskResponseId gets a reference to the given int32 and assigns it to the RiskResponseId field.
func (o *AssessmentResponsesPutPreviousValues) SetRiskResponseId(v int32) {
	o.RiskResponseId = &v
}

// GetRiskresponseactionId returns the RiskresponseactionId field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetRiskresponseactionId() int32 {
	if o == nil || IsNil(o.RiskresponseactionId) {
		var ret int32
		return ret
	}
	return *o.RiskresponseactionId
}

// GetRiskresponseactionIdOk returns a tuple with the RiskresponseactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetRiskresponseactionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RiskresponseactionId) {
		return nil, false
	}
	return o.RiskresponseactionId, true
}

// HasRiskresponseactionId returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasRiskresponseactionId() bool {
	if o != nil && !IsNil(o.RiskresponseactionId) {
		return true
	}

	return false
}

// SetRiskresponseactionId gets a reference to the given int32 and assigns it to the RiskresponseactionId field.
func (o *AssessmentResponsesPutPreviousValues) SetRiskresponseactionId(v int32) {
	o.RiskresponseactionId = &v
}

// GetRiskresponseactionType returns the RiskresponseactionType field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetRiskresponseactionType() string {
	if o == nil || IsNil(o.RiskresponseactionType) {
		var ret string
		return ret
	}
	return *o.RiskresponseactionType
}

// GetRiskresponseactionTypeOk returns a tuple with the RiskresponseactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetRiskresponseactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RiskresponseactionType) {
		return nil, false
	}
	return o.RiskresponseactionType, true
}

// HasRiskresponseactionType returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasRiskresponseactionType() bool {
	if o != nil && !IsNil(o.RiskresponseactionType) {
		return true
	}

	return false
}

// SetRiskresponseactionType gets a reference to the given string and assigns it to the RiskresponseactionType field.
func (o *AssessmentResponsesPutPreviousValues) SetRiskresponseactionType(v string) {
	o.RiskresponseactionType = &v
}

// GetParentAssessmentResponseId returns the ParentAssessmentResponseId field value if set, zero value otherwise.
func (o *AssessmentResponsesPutPreviousValues) GetParentAssessmentResponseId() int32 {
	if o == nil || IsNil(o.ParentAssessmentResponseId) {
		var ret int32
		return ret
	}
	return *o.ParentAssessmentResponseId
}

// GetParentAssessmentResponseIdOk returns a tuple with the ParentAssessmentResponseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssessmentResponsesPutPreviousValues) GetParentAssessmentResponseIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ParentAssessmentResponseId) {
		return nil, false
	}
	return o.ParentAssessmentResponseId, true
}

// HasParentAssessmentResponseId returns a boolean if a field has been set.
func (o *AssessmentResponsesPutPreviousValues) HasParentAssessmentResponseId() bool {
	if o != nil && !IsNil(o.ParentAssessmentResponseId) {
		return true
	}

	return false
}

// SetParentAssessmentResponseId gets a reference to the given int32 and assigns it to the ParentAssessmentResponseId field.
func (o *AssessmentResponsesPutPreviousValues) SetParentAssessmentResponseId(v int32) {
	o.ParentAssessmentResponseId = &v
}

func (o AssessmentResponsesPutPreviousValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssessmentResponsesPutPreviousValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.ResponseJson != nil {
		toSerialize["response_json"] = o.ResponseJson
	}
	if !IsNil(o.AssessableType) {
		toSerialize["assessable_type"] = o.AssessableType
	}
	if !IsNil(o.AssessableId) {
		toSerialize["assessable_id"] = o.AssessableId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.SubmittedByUserId) {
		toSerialize["submitted_by_user_id"] = o.SubmittedByUserId
	}
	if !IsNil(o.SubmittedDate) {
		toSerialize["submitted_date"] = o.SubmittedDate
	}
	if o.ReferenceMeta != nil {
		toSerialize["reference_meta"] = o.ReferenceMeta
	}
	if !IsNil(o.AssessmentId) {
		toSerialize["assessment_id"] = o.AssessmentId
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.AssessmentTemplateId) {
		toSerialize["assessment_template_id"] = o.AssessmentTemplateId
	}
	if !IsNil(o.FinalizedByUserId) {
		toSerialize["finalized_by_user_id"] = o.FinalizedByUserId
	}
	if !IsNil(o.FinalizedDate) {
		toSerialize["finalized_date"] = o.FinalizedDate
	}
	if !IsNil(o.AnsweredByUserId) {
		toSerialize["answered_by_user_id"] = o.AnsweredByUserId
	}
	if !IsNil(o.AnsweredDate) {
		toSerialize["answered_date"] = o.AnsweredDate
	}
	if !IsNil(o.IsAnswered) {
		toSerialize["is_answered"] = o.IsAnswered
	}
	if !IsNil(o.AssigneeUserId) {
		toSerialize["assignee_user_id"] = o.AssigneeUserId
	}
	if !IsNil(o.IsNotApplicable) {
		toSerialize["is_not_applicable"] = o.IsNotApplicable
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.UserAssessmentId) {
		toSerialize["user_assessment_id"] = o.UserAssessmentId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.CreatedByUserId) {
		toSerialize["created_by_user_id"] = o.CreatedByUserId
	}
	if !IsNil(o.RiskResponseId) {
		toSerialize["risk_response_id"] = o.RiskResponseId
	}
	if !IsNil(o.RiskresponseactionId) {
		toSerialize["riskresponseaction_id"] = o.RiskresponseactionId
	}
	if !IsNil(o.RiskresponseactionType) {
		toSerialize["riskresponseaction_type"] = o.RiskresponseactionType
	}
	if !IsNil(o.ParentAssessmentResponseId) {
		toSerialize["parent_assessment_response_id"] = o.ParentAssessmentResponseId
	}
	return toSerialize, nil
}

type NullableAssessmentResponsesPutPreviousValues struct {
	value *AssessmentResponsesPutPreviousValues
	isSet bool
}

func (v NullableAssessmentResponsesPutPreviousValues) Get() *AssessmentResponsesPutPreviousValues {
	return v.value
}

func (v *NullableAssessmentResponsesPutPreviousValues) Set(val *AssessmentResponsesPutPreviousValues) {
	v.value = val
	v.isSet = true
}

func (v NullableAssessmentResponsesPutPreviousValues) IsSet() bool {
	return v.isSet
}

func (v *NullableAssessmentResponsesPutPreviousValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssessmentResponsesPutPreviousValues(val *AssessmentResponsesPutPreviousValues) *NullableAssessmentResponsesPutPreviousValues {
	return &NullableAssessmentResponsesPutPreviousValues{value: val, isSet: true}
}

func (v NullableAssessmentResponsesPutPreviousValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssessmentResponsesPutPreviousValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


