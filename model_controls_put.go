/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the ControlsPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsPut{}

// ControlsPut struct for ControlsPut
type ControlsPut struct {
	Control *ControlsPutControl `json:"control,omitempty"`
	PreviousValues *ControlsPutPreviousValues `json:"previous_values,omitempty"`
}

// NewControlsPut instantiates a new ControlsPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsPut() *ControlsPut {
	this := ControlsPut{}
	return &this
}

// NewControlsPutWithDefaults instantiates a new ControlsPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsPutWithDefaults() *ControlsPut {
	this := ControlsPut{}
	return &this
}

// GetControl returns the Control field value if set, zero value otherwise.
func (o *ControlsPut) GetControl() ControlsPutControl {
	if o == nil || IsNil(o.Control) {
		var ret ControlsPutControl
		return ret
	}
	return *o.Control
}

// GetControlOk returns a tuple with the Control field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsPut) GetControlOk() (*ControlsPutControl, bool) {
	if o == nil || IsNil(o.Control) {
		return nil, false
	}
	return o.Control, true
}

// HasControl returns a boolean if a field has been set.
func (o *ControlsPut) HasControl() bool {
	if o != nil && !IsNil(o.Control) {
		return true
	}

	return false
}

// SetControl gets a reference to the given ControlsPutControl and assigns it to the Control field.
func (o *ControlsPut) SetControl(v ControlsPutControl) {
	o.Control = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *ControlsPut) GetPreviousValues() ControlsPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret ControlsPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsPut) GetPreviousValuesOk() (*ControlsPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *ControlsPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given ControlsPutPreviousValues and assigns it to the PreviousValues field.
func (o *ControlsPut) SetPreviousValues(v ControlsPutPreviousValues) {
	o.PreviousValues = &v
}

func (o ControlsPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Control) {
		toSerialize["control"] = o.Control
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableControlsPut struct {
	value *ControlsPut
	isSet bool
}

func (v NullableControlsPut) Get() *ControlsPut {
	return v.value
}

func (v *NullableControlsPut) Set(val *ControlsPut) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsPut) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsPut(val *ControlsPut) *NullableControlsPut {
	return &NullableControlsPut{value: val, isSet: true}
}

func (v NullableControlsPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


