/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// LibraryControlNaturesAPIService LibraryControlNaturesAPI service
type LibraryControlNaturesAPIService service

type ApiLibraryControlNaturesGetRequest struct {
	ctx context.Context
	ApiService *LibraryControlNaturesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiLibraryControlNaturesGetRequest) Include(include []string) ApiLibraryControlNaturesGetRequest {
	r.include = &include
	return r
}

func (r ApiLibraryControlNaturesGetRequest) Execute() (*LibraryControlNaturesGet200Response, *http.Response, error) {
	return r.ApiService.LibraryControlNaturesGetExecute(r)
}

/*
LibraryControlNaturesGet Method for LibraryControlNaturesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLibraryControlNaturesGetRequest
*/
func (a *LibraryControlNaturesAPIService) LibraryControlNaturesGet(ctx context.Context) ApiLibraryControlNaturesGetRequest {
	return ApiLibraryControlNaturesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LibraryControlNaturesGet200Response
func (a *LibraryControlNaturesAPIService) LibraryControlNaturesGetExecute(r ApiLibraryControlNaturesGetRequest) (*LibraryControlNaturesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlNaturesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlNaturesAPIService.LibraryControlNaturesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_natures"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLibraryControlNaturesLibraryControlNatureIdDeleteRequest struct {
	ctx context.Context
	ApiService *LibraryControlNaturesAPIService
	libraryControlNatureId int64
}

func (r ApiLibraryControlNaturesLibraryControlNatureIdDeleteRequest) Execute() (*LibraryControlNatures, *http.Response, error) {
	return r.ApiService.LibraryControlNaturesLibraryControlNatureIdDeleteExecute(r)
}

/*
LibraryControlNaturesLibraryControlNatureIdDelete Method for LibraryControlNaturesLibraryControlNatureIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param libraryControlNatureId Model id
 @return ApiLibraryControlNaturesLibraryControlNatureIdDeleteRequest
*/
func (a *LibraryControlNaturesAPIService) LibraryControlNaturesLibraryControlNatureIdDelete(ctx context.Context, libraryControlNatureId int64) ApiLibraryControlNaturesLibraryControlNatureIdDeleteRequest {
	return ApiLibraryControlNaturesLibraryControlNatureIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		libraryControlNatureId: libraryControlNatureId,
	}
}

// Execute executes the request
//  @return LibraryControlNatures
func (a *LibraryControlNaturesAPIService) LibraryControlNaturesLibraryControlNatureIdDeleteExecute(r ApiLibraryControlNaturesLibraryControlNatureIdDeleteRequest) (*LibraryControlNatures, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlNatures
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlNaturesAPIService.LibraryControlNaturesLibraryControlNatureIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_natures/{library_control_nature_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"library_control_nature_id"+"}", url.PathEscape(parameterValueToString(r.libraryControlNatureId, "libraryControlNatureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLibraryControlNaturesLibraryControlNatureIdGetRequest struct {
	ctx context.Context
	ApiService *LibraryControlNaturesAPIService
	libraryControlNatureId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiLibraryControlNaturesLibraryControlNatureIdGetRequest) Include(include []string) ApiLibraryControlNaturesLibraryControlNatureIdGetRequest {
	r.include = &include
	return r
}

func (r ApiLibraryControlNaturesLibraryControlNatureIdGetRequest) Execute() (*LibraryControlNatures, *http.Response, error) {
	return r.ApiService.LibraryControlNaturesLibraryControlNatureIdGetExecute(r)
}

/*
LibraryControlNaturesLibraryControlNatureIdGet Method for LibraryControlNaturesLibraryControlNatureIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param libraryControlNatureId Model id
 @return ApiLibraryControlNaturesLibraryControlNatureIdGetRequest
*/
func (a *LibraryControlNaturesAPIService) LibraryControlNaturesLibraryControlNatureIdGet(ctx context.Context, libraryControlNatureId int64) ApiLibraryControlNaturesLibraryControlNatureIdGetRequest {
	return ApiLibraryControlNaturesLibraryControlNatureIdGetRequest{
		ApiService: a,
		ctx: ctx,
		libraryControlNatureId: libraryControlNatureId,
	}
}

// Execute executes the request
//  @return LibraryControlNatures
func (a *LibraryControlNaturesAPIService) LibraryControlNaturesLibraryControlNatureIdGetExecute(r ApiLibraryControlNaturesLibraryControlNatureIdGetRequest) (*LibraryControlNatures, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlNatures
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlNaturesAPIService.LibraryControlNaturesLibraryControlNatureIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_natures/{library_control_nature_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"library_control_nature_id"+"}", url.PathEscape(parameterValueToString(r.libraryControlNatureId, "libraryControlNatureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLibraryControlNaturesLibraryControlNatureIdPutRequest struct {
	ctx context.Context
	ApiService *LibraryControlNaturesAPIService
	libraryControlNatureId int64
	libraryControlNaturesPut *LibraryControlNaturesPut
}

func (r ApiLibraryControlNaturesLibraryControlNatureIdPutRequest) LibraryControlNaturesPut(libraryControlNaturesPut LibraryControlNaturesPut) ApiLibraryControlNaturesLibraryControlNatureIdPutRequest {
	r.libraryControlNaturesPut = &libraryControlNaturesPut
	return r
}

func (r ApiLibraryControlNaturesLibraryControlNatureIdPutRequest) Execute() (*LibraryControlNatures, *http.Response, error) {
	return r.ApiService.LibraryControlNaturesLibraryControlNatureIdPutExecute(r)
}

/*
LibraryControlNaturesLibraryControlNatureIdPut Method for LibraryControlNaturesLibraryControlNatureIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param libraryControlNatureId Model id
 @return ApiLibraryControlNaturesLibraryControlNatureIdPutRequest
*/
func (a *LibraryControlNaturesAPIService) LibraryControlNaturesLibraryControlNatureIdPut(ctx context.Context, libraryControlNatureId int64) ApiLibraryControlNaturesLibraryControlNatureIdPutRequest {
	return ApiLibraryControlNaturesLibraryControlNatureIdPutRequest{
		ApiService: a,
		ctx: ctx,
		libraryControlNatureId: libraryControlNatureId,
	}
}

// Execute executes the request
//  @return LibraryControlNatures
func (a *LibraryControlNaturesAPIService) LibraryControlNaturesLibraryControlNatureIdPutExecute(r ApiLibraryControlNaturesLibraryControlNatureIdPutRequest) (*LibraryControlNatures, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlNatures
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlNaturesAPIService.LibraryControlNaturesLibraryControlNatureIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_natures/{library_control_nature_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"library_control_nature_id"+"}", url.PathEscape(parameterValueToString(r.libraryControlNatureId, "libraryControlNatureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.libraryControlNaturesPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLibraryControlNaturesPostRequest struct {
	ctx context.Context
	ApiService *LibraryControlNaturesAPIService
	libraryControlNaturesPostRequest *LibraryControlNaturesPostRequest
}

func (r ApiLibraryControlNaturesPostRequest) LibraryControlNaturesPostRequest(libraryControlNaturesPostRequest LibraryControlNaturesPostRequest) ApiLibraryControlNaturesPostRequest {
	r.libraryControlNaturesPostRequest = &libraryControlNaturesPostRequest
	return r
}

func (r ApiLibraryControlNaturesPostRequest) Execute() (*LibraryControlNaturesGet200Response, *http.Response, error) {
	return r.ApiService.LibraryControlNaturesPostExecute(r)
}

/*
LibraryControlNaturesPost Method for LibraryControlNaturesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLibraryControlNaturesPostRequest
*/
func (a *LibraryControlNaturesAPIService) LibraryControlNaturesPost(ctx context.Context) ApiLibraryControlNaturesPostRequest {
	return ApiLibraryControlNaturesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LibraryControlNaturesGet200Response
func (a *LibraryControlNaturesAPIService) LibraryControlNaturesPostExecute(r ApiLibraryControlNaturesPostRequest) (*LibraryControlNaturesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlNaturesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlNaturesAPIService.LibraryControlNaturesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_natures"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.libraryControlNaturesPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
