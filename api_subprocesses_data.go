/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SubprocessesDataAPIService SubprocessesDataAPI service
type SubprocessesDataAPIService service

type ApiSubprocessesDataGetRequest struct {
	ctx context.Context
	ApiService *SubprocessesDataAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiSubprocessesDataGetRequest) Include(include []string) ApiSubprocessesDataGetRequest {
	r.include = &include
	return r
}

func (r ApiSubprocessesDataGetRequest) Execute() (*SubprocessesDataGet200Response, *http.Response, error) {
	return r.ApiService.SubprocessesDataGetExecute(r)
}

/*
SubprocessesDataGet Method for SubprocessesDataGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSubprocessesDataGetRequest
*/
func (a *SubprocessesDataAPIService) SubprocessesDataGet(ctx context.Context) ApiSubprocessesDataGetRequest {
	return ApiSubprocessesDataGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubprocessesDataGet200Response
func (a *SubprocessesDataAPIService) SubprocessesDataGetExecute(r ApiSubprocessesDataGetRequest) (*SubprocessesDataGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubprocessesDataGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubprocessesDataAPIService.SubprocessesDataGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subprocesses_data"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubprocessesDataPostRequest struct {
	ctx context.Context
	ApiService *SubprocessesDataAPIService
	subprocessesDataPostRequest *SubprocessesDataPostRequest
}

func (r ApiSubprocessesDataPostRequest) SubprocessesDataPostRequest(subprocessesDataPostRequest SubprocessesDataPostRequest) ApiSubprocessesDataPostRequest {
	r.subprocessesDataPostRequest = &subprocessesDataPostRequest
	return r
}

func (r ApiSubprocessesDataPostRequest) Execute() (*SubprocessesDataGet200Response, *http.Response, error) {
	return r.ApiService.SubprocessesDataPostExecute(r)
}

/*
SubprocessesDataPost Method for SubprocessesDataPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSubprocessesDataPostRequest
*/
func (a *SubprocessesDataAPIService) SubprocessesDataPost(ctx context.Context) ApiSubprocessesDataPostRequest {
	return ApiSubprocessesDataPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubprocessesDataGet200Response
func (a *SubprocessesDataAPIService) SubprocessesDataPostExecute(r ApiSubprocessesDataPostRequest) (*SubprocessesDataGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubprocessesDataGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubprocessesDataAPIService.SubprocessesDataPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subprocesses_data"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subprocessesDataPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubprocessesDataSubprocessesDatumIdDeleteRequest struct {
	ctx context.Context
	ApiService *SubprocessesDataAPIService
	subprocessesDatumId int64
}

func (r ApiSubprocessesDataSubprocessesDatumIdDeleteRequest) Execute() (*SubprocessesData, *http.Response, error) {
	return r.ApiService.SubprocessesDataSubprocessesDatumIdDeleteExecute(r)
}

/*
SubprocessesDataSubprocessesDatumIdDelete Method for SubprocessesDataSubprocessesDatumIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subprocessesDatumId Model id
 @return ApiSubprocessesDataSubprocessesDatumIdDeleteRequest
*/
func (a *SubprocessesDataAPIService) SubprocessesDataSubprocessesDatumIdDelete(ctx context.Context, subprocessesDatumId int64) ApiSubprocessesDataSubprocessesDatumIdDeleteRequest {
	return ApiSubprocessesDataSubprocessesDatumIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		subprocessesDatumId: subprocessesDatumId,
	}
}

// Execute executes the request
//  @return SubprocessesData
func (a *SubprocessesDataAPIService) SubprocessesDataSubprocessesDatumIdDeleteExecute(r ApiSubprocessesDataSubprocessesDatumIdDeleteRequest) (*SubprocessesData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubprocessesData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubprocessesDataAPIService.SubprocessesDataSubprocessesDatumIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subprocesses_data/{subprocesses_datum_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subprocesses_datum_id"+"}", url.PathEscape(parameterValueToString(r.subprocessesDatumId, "subprocessesDatumId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubprocessesDataSubprocessesDatumIdGetRequest struct {
	ctx context.Context
	ApiService *SubprocessesDataAPIService
	subprocessesDatumId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiSubprocessesDataSubprocessesDatumIdGetRequest) Include(include []string) ApiSubprocessesDataSubprocessesDatumIdGetRequest {
	r.include = &include
	return r
}

func (r ApiSubprocessesDataSubprocessesDatumIdGetRequest) Execute() (*SubprocessesData, *http.Response, error) {
	return r.ApiService.SubprocessesDataSubprocessesDatumIdGetExecute(r)
}

/*
SubprocessesDataSubprocessesDatumIdGet Method for SubprocessesDataSubprocessesDatumIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subprocessesDatumId Model id
 @return ApiSubprocessesDataSubprocessesDatumIdGetRequest
*/
func (a *SubprocessesDataAPIService) SubprocessesDataSubprocessesDatumIdGet(ctx context.Context, subprocessesDatumId int64) ApiSubprocessesDataSubprocessesDatumIdGetRequest {
	return ApiSubprocessesDataSubprocessesDatumIdGetRequest{
		ApiService: a,
		ctx: ctx,
		subprocessesDatumId: subprocessesDatumId,
	}
}

// Execute executes the request
//  @return SubprocessesData
func (a *SubprocessesDataAPIService) SubprocessesDataSubprocessesDatumIdGetExecute(r ApiSubprocessesDataSubprocessesDatumIdGetRequest) (*SubprocessesData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubprocessesData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubprocessesDataAPIService.SubprocessesDataSubprocessesDatumIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subprocesses_data/{subprocesses_datum_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subprocesses_datum_id"+"}", url.PathEscape(parameterValueToString(r.subprocessesDatumId, "subprocessesDatumId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubprocessesDataSubprocessesDatumIdPutRequest struct {
	ctx context.Context
	ApiService *SubprocessesDataAPIService
	subprocessesDatumId int64
	subprocessesDataPut *SubprocessesDataPut
}

func (r ApiSubprocessesDataSubprocessesDatumIdPutRequest) SubprocessesDataPut(subprocessesDataPut SubprocessesDataPut) ApiSubprocessesDataSubprocessesDatumIdPutRequest {
	r.subprocessesDataPut = &subprocessesDataPut
	return r
}

func (r ApiSubprocessesDataSubprocessesDatumIdPutRequest) Execute() (*SubprocessesData, *http.Response, error) {
	return r.ApiService.SubprocessesDataSubprocessesDatumIdPutExecute(r)
}

/*
SubprocessesDataSubprocessesDatumIdPut Method for SubprocessesDataSubprocessesDatumIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subprocessesDatumId Model id
 @return ApiSubprocessesDataSubprocessesDatumIdPutRequest
*/
func (a *SubprocessesDataAPIService) SubprocessesDataSubprocessesDatumIdPut(ctx context.Context, subprocessesDatumId int64) ApiSubprocessesDataSubprocessesDatumIdPutRequest {
	return ApiSubprocessesDataSubprocessesDatumIdPutRequest{
		ApiService: a,
		ctx: ctx,
		subprocessesDatumId: subprocessesDatumId,
	}
}

// Execute executes the request
//  @return SubprocessesData
func (a *SubprocessesDataAPIService) SubprocessesDataSubprocessesDatumIdPutExecute(r ApiSubprocessesDataSubprocessesDatumIdPutRequest) (*SubprocessesData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubprocessesData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubprocessesDataAPIService.SubprocessesDataSubprocessesDatumIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subprocesses_data/{subprocesses_datum_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subprocesses_datum_id"+"}", url.PathEscape(parameterValueToString(r.subprocessesDatumId, "subprocessesDatumId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subprocessesDataPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
