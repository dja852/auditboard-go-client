/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OpsAuditLocationsAPIService OpsAuditLocationsAPI service
type OpsAuditLocationsAPIService service

type ApiOpsAuditLocationsGetRequest struct {
	ctx context.Context
	ApiService *OpsAuditLocationsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiOpsAuditLocationsGetRequest) Include(include []string) ApiOpsAuditLocationsGetRequest {
	r.include = &include
	return r
}

func (r ApiOpsAuditLocationsGetRequest) Execute() (*OpsAuditLocationsGet200Response, *http.Response, error) {
	return r.ApiService.OpsAuditLocationsGetExecute(r)
}

/*
OpsAuditLocationsGet Method for OpsAuditLocationsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOpsAuditLocationsGetRequest
*/
func (a *OpsAuditLocationsAPIService) OpsAuditLocationsGet(ctx context.Context) ApiOpsAuditLocationsGetRequest {
	return ApiOpsAuditLocationsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpsAuditLocationsGet200Response
func (a *OpsAuditLocationsAPIService) OpsAuditLocationsGetExecute(r ApiOpsAuditLocationsGetRequest) (*OpsAuditLocationsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditLocationsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditLocationsAPIService.OpsAuditLocationsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_locations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditLocationsOpsAuditLocationIdDeleteRequest struct {
	ctx context.Context
	ApiService *OpsAuditLocationsAPIService
	opsAuditLocationId int64
}

func (r ApiOpsAuditLocationsOpsAuditLocationIdDeleteRequest) Execute() (*OpsAuditLocations, *http.Response, error) {
	return r.ApiService.OpsAuditLocationsOpsAuditLocationIdDeleteExecute(r)
}

/*
OpsAuditLocationsOpsAuditLocationIdDelete Method for OpsAuditLocationsOpsAuditLocationIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param opsAuditLocationId Model id
 @return ApiOpsAuditLocationsOpsAuditLocationIdDeleteRequest
*/
func (a *OpsAuditLocationsAPIService) OpsAuditLocationsOpsAuditLocationIdDelete(ctx context.Context, opsAuditLocationId int64) ApiOpsAuditLocationsOpsAuditLocationIdDeleteRequest {
	return ApiOpsAuditLocationsOpsAuditLocationIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		opsAuditLocationId: opsAuditLocationId,
	}
}

// Execute executes the request
//  @return OpsAuditLocations
func (a *OpsAuditLocationsAPIService) OpsAuditLocationsOpsAuditLocationIdDeleteExecute(r ApiOpsAuditLocationsOpsAuditLocationIdDeleteRequest) (*OpsAuditLocations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditLocations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditLocationsAPIService.OpsAuditLocationsOpsAuditLocationIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_locations/{ops_audit_location_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ops_audit_location_id"+"}", url.PathEscape(parameterValueToString(r.opsAuditLocationId, "opsAuditLocationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditLocationsOpsAuditLocationIdGetRequest struct {
	ctx context.Context
	ApiService *OpsAuditLocationsAPIService
	opsAuditLocationId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiOpsAuditLocationsOpsAuditLocationIdGetRequest) Include(include []string) ApiOpsAuditLocationsOpsAuditLocationIdGetRequest {
	r.include = &include
	return r
}

func (r ApiOpsAuditLocationsOpsAuditLocationIdGetRequest) Execute() (*OpsAuditLocations, *http.Response, error) {
	return r.ApiService.OpsAuditLocationsOpsAuditLocationIdGetExecute(r)
}

/*
OpsAuditLocationsOpsAuditLocationIdGet Method for OpsAuditLocationsOpsAuditLocationIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param opsAuditLocationId Model id
 @return ApiOpsAuditLocationsOpsAuditLocationIdGetRequest
*/
func (a *OpsAuditLocationsAPIService) OpsAuditLocationsOpsAuditLocationIdGet(ctx context.Context, opsAuditLocationId int64) ApiOpsAuditLocationsOpsAuditLocationIdGetRequest {
	return ApiOpsAuditLocationsOpsAuditLocationIdGetRequest{
		ApiService: a,
		ctx: ctx,
		opsAuditLocationId: opsAuditLocationId,
	}
}

// Execute executes the request
//  @return OpsAuditLocations
func (a *OpsAuditLocationsAPIService) OpsAuditLocationsOpsAuditLocationIdGetExecute(r ApiOpsAuditLocationsOpsAuditLocationIdGetRequest) (*OpsAuditLocations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditLocations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditLocationsAPIService.OpsAuditLocationsOpsAuditLocationIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_locations/{ops_audit_location_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ops_audit_location_id"+"}", url.PathEscape(parameterValueToString(r.opsAuditLocationId, "opsAuditLocationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditLocationsOpsAuditLocationIdPutRequest struct {
	ctx context.Context
	ApiService *OpsAuditLocationsAPIService
	opsAuditLocationId int64
	opsAuditLocationsPut *OpsAuditLocationsPut
}

func (r ApiOpsAuditLocationsOpsAuditLocationIdPutRequest) OpsAuditLocationsPut(opsAuditLocationsPut OpsAuditLocationsPut) ApiOpsAuditLocationsOpsAuditLocationIdPutRequest {
	r.opsAuditLocationsPut = &opsAuditLocationsPut
	return r
}

func (r ApiOpsAuditLocationsOpsAuditLocationIdPutRequest) Execute() (*OpsAuditLocations, *http.Response, error) {
	return r.ApiService.OpsAuditLocationsOpsAuditLocationIdPutExecute(r)
}

/*
OpsAuditLocationsOpsAuditLocationIdPut Method for OpsAuditLocationsOpsAuditLocationIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param opsAuditLocationId Model id
 @return ApiOpsAuditLocationsOpsAuditLocationIdPutRequest
*/
func (a *OpsAuditLocationsAPIService) OpsAuditLocationsOpsAuditLocationIdPut(ctx context.Context, opsAuditLocationId int64) ApiOpsAuditLocationsOpsAuditLocationIdPutRequest {
	return ApiOpsAuditLocationsOpsAuditLocationIdPutRequest{
		ApiService: a,
		ctx: ctx,
		opsAuditLocationId: opsAuditLocationId,
	}
}

// Execute executes the request
//  @return OpsAuditLocations
func (a *OpsAuditLocationsAPIService) OpsAuditLocationsOpsAuditLocationIdPutExecute(r ApiOpsAuditLocationsOpsAuditLocationIdPutRequest) (*OpsAuditLocations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditLocations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditLocationsAPIService.OpsAuditLocationsOpsAuditLocationIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_locations/{ops_audit_location_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ops_audit_location_id"+"}", url.PathEscape(parameterValueToString(r.opsAuditLocationId, "opsAuditLocationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.opsAuditLocationsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditLocationsPostRequest struct {
	ctx context.Context
	ApiService *OpsAuditLocationsAPIService
	opsAuditLocationsPostRequest *OpsAuditLocationsPostRequest
}

func (r ApiOpsAuditLocationsPostRequest) OpsAuditLocationsPostRequest(opsAuditLocationsPostRequest OpsAuditLocationsPostRequest) ApiOpsAuditLocationsPostRequest {
	r.opsAuditLocationsPostRequest = &opsAuditLocationsPostRequest
	return r
}

func (r ApiOpsAuditLocationsPostRequest) Execute() (*OpsAuditLocationsGet200Response, *http.Response, error) {
	return r.ApiService.OpsAuditLocationsPostExecute(r)
}

/*
OpsAuditLocationsPost Method for OpsAuditLocationsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOpsAuditLocationsPostRequest
*/
func (a *OpsAuditLocationsAPIService) OpsAuditLocationsPost(ctx context.Context) ApiOpsAuditLocationsPostRequest {
	return ApiOpsAuditLocationsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpsAuditLocationsGet200Response
func (a *OpsAuditLocationsAPIService) OpsAuditLocationsPostExecute(r ApiOpsAuditLocationsPostRequest) (*OpsAuditLocationsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditLocationsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditLocationsAPIService.OpsAuditLocationsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_locations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.opsAuditLocationsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
