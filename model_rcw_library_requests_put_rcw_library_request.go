/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the RcwLibraryRequestsPutRcwLibraryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RcwLibraryRequestsPutRcwLibraryRequest{}

// RcwLibraryRequestsPutRcwLibraryRequest struct for RcwLibraryRequestsPutRcwLibraryRequest
type RcwLibraryRequestsPutRcwLibraryRequest struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	Uid string `json:"uid"`
	// Note: This is a Foreign Key to `rcw_request_categories.id`.<fk table='rcw_request_categories' column='id'/>
	RcwRequestCategoryId *int32 `json:"rcw_request_category_id,omitempty"`
	Title *string `json:"title,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	AssigneeUserId *int32 `json:"assignee_user_id,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	CreatedByUserId *int32 `json:"created_by_user_id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	ReferenceMeta interface{} `json:"reference_meta"`
	FieldData interface{} `json:"field_data,omitempty"`
	// Note: This is a Foreign Key to `recurring_schedules.id`.<fk table='recurring_schedules' column='id'/>
	RecurringScheduleId *int32 `json:"recurring_schedule_id,omitempty"`
	DueDaysAfterLaunch *int32 `json:"due_days_after_launch,omitempty"`
	PeriodDependent *bool `json:"period_dependent,omitempty"`
	LaunchDate *string `json:"launch_date,omitempty"`
	ExternalIntegrationUrl *string `json:"external_integration_url,omitempty"`
	JiraSelectedProject *string `json:"jira_selected_project,omitempty"`
	JiraSelectedIssueType *string `json:"jira_selected_issue_type,omitempty"`
	AutomaticallyCreateJiraForRecurrences *bool `json:"automatically_create_jira_for_recurrences,omitempty"`
	Description *string `json:"description,omitempty"`
}

type _RcwLibraryRequestsPutRcwLibraryRequest RcwLibraryRequestsPutRcwLibraryRequest

// NewRcwLibraryRequestsPutRcwLibraryRequest instantiates a new RcwLibraryRequestsPutRcwLibraryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRcwLibraryRequestsPutRcwLibraryRequest(uid string, referenceMeta interface{}) *RcwLibraryRequestsPutRcwLibraryRequest {
	this := RcwLibraryRequestsPutRcwLibraryRequest{}
	this.Uid = uid
	this.ReferenceMeta = referenceMeta
	return &this
}

// NewRcwLibraryRequestsPutRcwLibraryRequestWithDefaults instantiates a new RcwLibraryRequestsPutRcwLibraryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRcwLibraryRequestsPutRcwLibraryRequestWithDefaults() *RcwLibraryRequestsPutRcwLibraryRequest {
	this := RcwLibraryRequestsPutRcwLibraryRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetId(v int32) {
	o.Id = &v
}

// GetUid returns the Uid field value
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetUid(v string) {
	o.Uid = v
}

// GetRcwRequestCategoryId returns the RcwRequestCategoryId field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetRcwRequestCategoryId() int32 {
	if o == nil || IsNil(o.RcwRequestCategoryId) {
		var ret int32
		return ret
	}
	return *o.RcwRequestCategoryId
}

// GetRcwRequestCategoryIdOk returns a tuple with the RcwRequestCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetRcwRequestCategoryIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RcwRequestCategoryId) {
		return nil, false
	}
	return o.RcwRequestCategoryId, true
}

// HasRcwRequestCategoryId returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasRcwRequestCategoryId() bool {
	if o != nil && !IsNil(o.RcwRequestCategoryId) {
		return true
	}

	return false
}

// SetRcwRequestCategoryId gets a reference to the given int32 and assigns it to the RcwRequestCategoryId field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetRcwRequestCategoryId(v int32) {
	o.RcwRequestCategoryId = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetTitle(v string) {
	o.Title = &v
}

// GetAssigneeUserId returns the AssigneeUserId field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetAssigneeUserId() int32 {
	if o == nil || IsNil(o.AssigneeUserId) {
		var ret int32
		return ret
	}
	return *o.AssigneeUserId
}

// GetAssigneeUserIdOk returns a tuple with the AssigneeUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetAssigneeUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AssigneeUserId) {
		return nil, false
	}
	return o.AssigneeUserId, true
}

// HasAssigneeUserId returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasAssigneeUserId() bool {
	if o != nil && !IsNil(o.AssigneeUserId) {
		return true
	}

	return false
}

// SetAssigneeUserId gets a reference to the given int32 and assigns it to the AssigneeUserId field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetAssigneeUserId(v int32) {
	o.AssigneeUserId = &v
}

// GetCreatedByUserId returns the CreatedByUserId field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetCreatedByUserId() int32 {
	if o == nil || IsNil(o.CreatedByUserId) {
		var ret int32
		return ret
	}
	return *o.CreatedByUserId
}

// GetCreatedByUserIdOk returns a tuple with the CreatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetCreatedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedByUserId) {
		return nil, false
	}
	return o.CreatedByUserId, true
}

// HasCreatedByUserId returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasCreatedByUserId() bool {
	if o != nil && !IsNil(o.CreatedByUserId) {
		return true
	}

	return false
}

// SetCreatedByUserId gets a reference to the given int32 and assigns it to the CreatedByUserId field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetCreatedByUserId(v int32) {
	o.CreatedByUserId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetReferenceMeta returns the ReferenceMeta field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetReferenceMeta() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ReferenceMeta
}

// GetReferenceMetaOk returns a tuple with the ReferenceMeta field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetReferenceMetaOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ReferenceMeta) {
		return nil, false
	}
	return &o.ReferenceMeta, true
}

// SetReferenceMeta sets field value
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetReferenceMeta(v interface{}) {
	o.ReferenceMeta = v
}

// GetFieldData returns the FieldData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetFieldData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FieldData
}

// GetFieldDataOk returns a tuple with the FieldData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetFieldDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FieldData) {
		return nil, false
	}
	return &o.FieldData, true
}

// HasFieldData returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasFieldData() bool {
	if o != nil && !IsNil(o.FieldData) {
		return true
	}

	return false
}

// SetFieldData gets a reference to the given interface{} and assigns it to the FieldData field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetFieldData(v interface{}) {
	o.FieldData = v
}

// GetRecurringScheduleId returns the RecurringScheduleId field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetRecurringScheduleId() int32 {
	if o == nil || IsNil(o.RecurringScheduleId) {
		var ret int32
		return ret
	}
	return *o.RecurringScheduleId
}

// GetRecurringScheduleIdOk returns a tuple with the RecurringScheduleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetRecurringScheduleIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RecurringScheduleId) {
		return nil, false
	}
	return o.RecurringScheduleId, true
}

// HasRecurringScheduleId returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasRecurringScheduleId() bool {
	if o != nil && !IsNil(o.RecurringScheduleId) {
		return true
	}

	return false
}

// SetRecurringScheduleId gets a reference to the given int32 and assigns it to the RecurringScheduleId field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetRecurringScheduleId(v int32) {
	o.RecurringScheduleId = &v
}

// GetDueDaysAfterLaunch returns the DueDaysAfterLaunch field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetDueDaysAfterLaunch() int32 {
	if o == nil || IsNil(o.DueDaysAfterLaunch) {
		var ret int32
		return ret
	}
	return *o.DueDaysAfterLaunch
}

// GetDueDaysAfterLaunchOk returns a tuple with the DueDaysAfterLaunch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetDueDaysAfterLaunchOk() (*int32, bool) {
	if o == nil || IsNil(o.DueDaysAfterLaunch) {
		return nil, false
	}
	return o.DueDaysAfterLaunch, true
}

// HasDueDaysAfterLaunch returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasDueDaysAfterLaunch() bool {
	if o != nil && !IsNil(o.DueDaysAfterLaunch) {
		return true
	}

	return false
}

// SetDueDaysAfterLaunch gets a reference to the given int32 and assigns it to the DueDaysAfterLaunch field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetDueDaysAfterLaunch(v int32) {
	o.DueDaysAfterLaunch = &v
}

// GetPeriodDependent returns the PeriodDependent field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetPeriodDependent() bool {
	if o == nil || IsNil(o.PeriodDependent) {
		var ret bool
		return ret
	}
	return *o.PeriodDependent
}

// GetPeriodDependentOk returns a tuple with the PeriodDependent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetPeriodDependentOk() (*bool, bool) {
	if o == nil || IsNil(o.PeriodDependent) {
		return nil, false
	}
	return o.PeriodDependent, true
}

// HasPeriodDependent returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasPeriodDependent() bool {
	if o != nil && !IsNil(o.PeriodDependent) {
		return true
	}

	return false
}

// SetPeriodDependent gets a reference to the given bool and assigns it to the PeriodDependent field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetPeriodDependent(v bool) {
	o.PeriodDependent = &v
}

// GetLaunchDate returns the LaunchDate field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetLaunchDate() string {
	if o == nil || IsNil(o.LaunchDate) {
		var ret string
		return ret
	}
	return *o.LaunchDate
}

// GetLaunchDateOk returns a tuple with the LaunchDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetLaunchDateOk() (*string, bool) {
	if o == nil || IsNil(o.LaunchDate) {
		return nil, false
	}
	return o.LaunchDate, true
}

// HasLaunchDate returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasLaunchDate() bool {
	if o != nil && !IsNil(o.LaunchDate) {
		return true
	}

	return false
}

// SetLaunchDate gets a reference to the given string and assigns it to the LaunchDate field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetLaunchDate(v string) {
	o.LaunchDate = &v
}

// GetExternalIntegrationUrl returns the ExternalIntegrationUrl field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetExternalIntegrationUrl() string {
	if o == nil || IsNil(o.ExternalIntegrationUrl) {
		var ret string
		return ret
	}
	return *o.ExternalIntegrationUrl
}

// GetExternalIntegrationUrlOk returns a tuple with the ExternalIntegrationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetExternalIntegrationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalIntegrationUrl) {
		return nil, false
	}
	return o.ExternalIntegrationUrl, true
}

// HasExternalIntegrationUrl returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasExternalIntegrationUrl() bool {
	if o != nil && !IsNil(o.ExternalIntegrationUrl) {
		return true
	}

	return false
}

// SetExternalIntegrationUrl gets a reference to the given string and assigns it to the ExternalIntegrationUrl field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetExternalIntegrationUrl(v string) {
	o.ExternalIntegrationUrl = &v
}

// GetJiraSelectedProject returns the JiraSelectedProject field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetJiraSelectedProject() string {
	if o == nil || IsNil(o.JiraSelectedProject) {
		var ret string
		return ret
	}
	return *o.JiraSelectedProject
}

// GetJiraSelectedProjectOk returns a tuple with the JiraSelectedProject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetJiraSelectedProjectOk() (*string, bool) {
	if o == nil || IsNil(o.JiraSelectedProject) {
		return nil, false
	}
	return o.JiraSelectedProject, true
}

// HasJiraSelectedProject returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasJiraSelectedProject() bool {
	if o != nil && !IsNil(o.JiraSelectedProject) {
		return true
	}

	return false
}

// SetJiraSelectedProject gets a reference to the given string and assigns it to the JiraSelectedProject field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetJiraSelectedProject(v string) {
	o.JiraSelectedProject = &v
}

// GetJiraSelectedIssueType returns the JiraSelectedIssueType field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetJiraSelectedIssueType() string {
	if o == nil || IsNil(o.JiraSelectedIssueType) {
		var ret string
		return ret
	}
	return *o.JiraSelectedIssueType
}

// GetJiraSelectedIssueTypeOk returns a tuple with the JiraSelectedIssueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetJiraSelectedIssueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.JiraSelectedIssueType) {
		return nil, false
	}
	return o.JiraSelectedIssueType, true
}

// HasJiraSelectedIssueType returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasJiraSelectedIssueType() bool {
	if o != nil && !IsNil(o.JiraSelectedIssueType) {
		return true
	}

	return false
}

// SetJiraSelectedIssueType gets a reference to the given string and assigns it to the JiraSelectedIssueType field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetJiraSelectedIssueType(v string) {
	o.JiraSelectedIssueType = &v
}

// GetAutomaticallyCreateJiraForRecurrences returns the AutomaticallyCreateJiraForRecurrences field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetAutomaticallyCreateJiraForRecurrences() bool {
	if o == nil || IsNil(o.AutomaticallyCreateJiraForRecurrences) {
		var ret bool
		return ret
	}
	return *o.AutomaticallyCreateJiraForRecurrences
}

// GetAutomaticallyCreateJiraForRecurrencesOk returns a tuple with the AutomaticallyCreateJiraForRecurrences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetAutomaticallyCreateJiraForRecurrencesOk() (*bool, bool) {
	if o == nil || IsNil(o.AutomaticallyCreateJiraForRecurrences) {
		return nil, false
	}
	return o.AutomaticallyCreateJiraForRecurrences, true
}

// HasAutomaticallyCreateJiraForRecurrences returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasAutomaticallyCreateJiraForRecurrences() bool {
	if o != nil && !IsNil(o.AutomaticallyCreateJiraForRecurrences) {
		return true
	}

	return false
}

// SetAutomaticallyCreateJiraForRecurrences gets a reference to the given bool and assigns it to the AutomaticallyCreateJiraForRecurrences field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetAutomaticallyCreateJiraForRecurrences(v bool) {
	o.AutomaticallyCreateJiraForRecurrences = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RcwLibraryRequestsPutRcwLibraryRequest) SetDescription(v string) {
	o.Description = &v
}

func (o RcwLibraryRequestsPutRcwLibraryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RcwLibraryRequestsPutRcwLibraryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["uid"] = o.Uid
	if !IsNil(o.RcwRequestCategoryId) {
		toSerialize["rcw_request_category_id"] = o.RcwRequestCategoryId
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.AssigneeUserId) {
		toSerialize["assignee_user_id"] = o.AssigneeUserId
	}
	if !IsNil(o.CreatedByUserId) {
		toSerialize["created_by_user_id"] = o.CreatedByUserId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if o.ReferenceMeta != nil {
		toSerialize["reference_meta"] = o.ReferenceMeta
	}
	if o.FieldData != nil {
		toSerialize["field_data"] = o.FieldData
	}
	if !IsNil(o.RecurringScheduleId) {
		toSerialize["recurring_schedule_id"] = o.RecurringScheduleId
	}
	if !IsNil(o.DueDaysAfterLaunch) {
		toSerialize["due_days_after_launch"] = o.DueDaysAfterLaunch
	}
	if !IsNil(o.PeriodDependent) {
		toSerialize["period_dependent"] = o.PeriodDependent
	}
	if !IsNil(o.LaunchDate) {
		toSerialize["launch_date"] = o.LaunchDate
	}
	if !IsNil(o.ExternalIntegrationUrl) {
		toSerialize["external_integration_url"] = o.ExternalIntegrationUrl
	}
	if !IsNil(o.JiraSelectedProject) {
		toSerialize["jira_selected_project"] = o.JiraSelectedProject
	}
	if !IsNil(o.JiraSelectedIssueType) {
		toSerialize["jira_selected_issue_type"] = o.JiraSelectedIssueType
	}
	if !IsNil(o.AutomaticallyCreateJiraForRecurrences) {
		toSerialize["automatically_create_jira_for_recurrences"] = o.AutomaticallyCreateJiraForRecurrences
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableRcwLibraryRequestsPutRcwLibraryRequest struct {
	value *RcwLibraryRequestsPutRcwLibraryRequest
	isSet bool
}

func (v NullableRcwLibraryRequestsPutRcwLibraryRequest) Get() *RcwLibraryRequestsPutRcwLibraryRequest {
	return v.value
}

func (v *NullableRcwLibraryRequestsPutRcwLibraryRequest) Set(val *RcwLibraryRequestsPutRcwLibraryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRcwLibraryRequestsPutRcwLibraryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRcwLibraryRequestsPutRcwLibraryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRcwLibraryRequestsPutRcwLibraryRequest(val *RcwLibraryRequestsPutRcwLibraryRequest) *NullableRcwLibraryRequestsPutRcwLibraryRequest {
	return &NullableRcwLibraryRequestsPutRcwLibraryRequest{value: val, isSet: true}
}

func (v NullableRcwLibraryRequestsPutRcwLibraryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRcwLibraryRequestsPutRcwLibraryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


