/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the StatusOptionsPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusOptionsPut{}

// StatusOptionsPut struct for StatusOptionsPut
type StatusOptionsPut struct {
	StatusOption *StatusOptionsPutStatusOption `json:"status_option,omitempty"`
	PreviousValues *StatusOptionsPutPreviousValues `json:"previous_values,omitempty"`
}

// NewStatusOptionsPut instantiates a new StatusOptionsPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusOptionsPut() *StatusOptionsPut {
	this := StatusOptionsPut{}
	return &this
}

// NewStatusOptionsPutWithDefaults instantiates a new StatusOptionsPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusOptionsPutWithDefaults() *StatusOptionsPut {
	this := StatusOptionsPut{}
	return &this
}

// GetStatusOption returns the StatusOption field value if set, zero value otherwise.
func (o *StatusOptionsPut) GetStatusOption() StatusOptionsPutStatusOption {
	if o == nil || IsNil(o.StatusOption) {
		var ret StatusOptionsPutStatusOption
		return ret
	}
	return *o.StatusOption
}

// GetStatusOptionOk returns a tuple with the StatusOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusOptionsPut) GetStatusOptionOk() (*StatusOptionsPutStatusOption, bool) {
	if o == nil || IsNil(o.StatusOption) {
		return nil, false
	}
	return o.StatusOption, true
}

// HasStatusOption returns a boolean if a field has been set.
func (o *StatusOptionsPut) HasStatusOption() bool {
	if o != nil && !IsNil(o.StatusOption) {
		return true
	}

	return false
}

// SetStatusOption gets a reference to the given StatusOptionsPutStatusOption and assigns it to the StatusOption field.
func (o *StatusOptionsPut) SetStatusOption(v StatusOptionsPutStatusOption) {
	o.StatusOption = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *StatusOptionsPut) GetPreviousValues() StatusOptionsPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret StatusOptionsPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusOptionsPut) GetPreviousValuesOk() (*StatusOptionsPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *StatusOptionsPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given StatusOptionsPutPreviousValues and assigns it to the PreviousValues field.
func (o *StatusOptionsPut) SetPreviousValues(v StatusOptionsPutPreviousValues) {
	o.PreviousValues = &v
}

func (o StatusOptionsPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusOptionsPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StatusOption) {
		toSerialize["status_option"] = o.StatusOption
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableStatusOptionsPut struct {
	value *StatusOptionsPut
	isSet bool
}

func (v NullableStatusOptionsPut) Get() *StatusOptionsPut {
	return v.value
}

func (v *NullableStatusOptionsPut) Set(val *StatusOptionsPut) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusOptionsPut) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusOptionsPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusOptionsPut(val *StatusOptionsPut) *NullableStatusOptionsPut {
	return &NullableStatusOptionsPut{value: val, isSet: true}
}

func (v NullableStatusOptionsPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusOptionsPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


