/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the FileVersionsPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileVersionsPut{}

// FileVersionsPut struct for FileVersionsPut
type FileVersionsPut struct {
	FileVersion *FileVersionsPutFileVersion `json:"file_version,omitempty"`
	PreviousValues *FileVersionsPutPreviousValues `json:"previous_values,omitempty"`
}

// NewFileVersionsPut instantiates a new FileVersionsPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileVersionsPut() *FileVersionsPut {
	this := FileVersionsPut{}
	return &this
}

// NewFileVersionsPutWithDefaults instantiates a new FileVersionsPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileVersionsPutWithDefaults() *FileVersionsPut {
	this := FileVersionsPut{}
	return &this
}

// GetFileVersion returns the FileVersion field value if set, zero value otherwise.
func (o *FileVersionsPut) GetFileVersion() FileVersionsPutFileVersion {
	if o == nil || IsNil(o.FileVersion) {
		var ret FileVersionsPutFileVersion
		return ret
	}
	return *o.FileVersion
}

// GetFileVersionOk returns a tuple with the FileVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPut) GetFileVersionOk() (*FileVersionsPutFileVersion, bool) {
	if o == nil || IsNil(o.FileVersion) {
		return nil, false
	}
	return o.FileVersion, true
}

// HasFileVersion returns a boolean if a field has been set.
func (o *FileVersionsPut) HasFileVersion() bool {
	if o != nil && !IsNil(o.FileVersion) {
		return true
	}

	return false
}

// SetFileVersion gets a reference to the given FileVersionsPutFileVersion and assigns it to the FileVersion field.
func (o *FileVersionsPut) SetFileVersion(v FileVersionsPutFileVersion) {
	o.FileVersion = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *FileVersionsPut) GetPreviousValues() FileVersionsPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret FileVersionsPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPut) GetPreviousValuesOk() (*FileVersionsPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *FileVersionsPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given FileVersionsPutPreviousValues and assigns it to the PreviousValues field.
func (o *FileVersionsPut) SetPreviousValues(v FileVersionsPutPreviousValues) {
	o.PreviousValues = &v
}

func (o FileVersionsPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileVersionsPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileVersion) {
		toSerialize["file_version"] = o.FileVersion
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableFileVersionsPut struct {
	value *FileVersionsPut
	isSet bool
}

func (v NullableFileVersionsPut) Get() *FileVersionsPut {
	return v.value
}

func (v *NullableFileVersionsPut) Set(val *FileVersionsPut) {
	v.value = val
	v.isSet = true
}

func (v NullableFileVersionsPut) IsSet() bool {
	return v.isSet
}

func (v *NullableFileVersionsPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileVersionsPut(val *FileVersionsPut) *NullableFileVersionsPut {
	return &NullableFileVersionsPut{value: val, isSet: true}
}

func (v NullableFileVersionsPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileVersionsPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


