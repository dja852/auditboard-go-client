/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// LibraryControlTypesAPIService LibraryControlTypesAPI service
type LibraryControlTypesAPIService service

type ApiLibraryControlTypesGetRequest struct {
	ctx context.Context
	ApiService *LibraryControlTypesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiLibraryControlTypesGetRequest) Include(include []string) ApiLibraryControlTypesGetRequest {
	r.include = &include
	return r
}

func (r ApiLibraryControlTypesGetRequest) Execute() (*LibraryControlTypesGet200Response, *http.Response, error) {
	return r.ApiService.LibraryControlTypesGetExecute(r)
}

/*
LibraryControlTypesGet Method for LibraryControlTypesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLibraryControlTypesGetRequest
*/
func (a *LibraryControlTypesAPIService) LibraryControlTypesGet(ctx context.Context) ApiLibraryControlTypesGetRequest {
	return ApiLibraryControlTypesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LibraryControlTypesGet200Response
func (a *LibraryControlTypesAPIService) LibraryControlTypesGetExecute(r ApiLibraryControlTypesGetRequest) (*LibraryControlTypesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlTypesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlTypesAPIService.LibraryControlTypesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLibraryControlTypesLibraryControlTypeIdDeleteRequest struct {
	ctx context.Context
	ApiService *LibraryControlTypesAPIService
	libraryControlTypeId int64
}

func (r ApiLibraryControlTypesLibraryControlTypeIdDeleteRequest) Execute() (*LibraryControlTypes, *http.Response, error) {
	return r.ApiService.LibraryControlTypesLibraryControlTypeIdDeleteExecute(r)
}

/*
LibraryControlTypesLibraryControlTypeIdDelete Method for LibraryControlTypesLibraryControlTypeIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param libraryControlTypeId Model id
 @return ApiLibraryControlTypesLibraryControlTypeIdDeleteRequest
*/
func (a *LibraryControlTypesAPIService) LibraryControlTypesLibraryControlTypeIdDelete(ctx context.Context, libraryControlTypeId int64) ApiLibraryControlTypesLibraryControlTypeIdDeleteRequest {
	return ApiLibraryControlTypesLibraryControlTypeIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		libraryControlTypeId: libraryControlTypeId,
	}
}

// Execute executes the request
//  @return LibraryControlTypes
func (a *LibraryControlTypesAPIService) LibraryControlTypesLibraryControlTypeIdDeleteExecute(r ApiLibraryControlTypesLibraryControlTypeIdDeleteRequest) (*LibraryControlTypes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlTypes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlTypesAPIService.LibraryControlTypesLibraryControlTypeIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_types/{library_control_type_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"library_control_type_id"+"}", url.PathEscape(parameterValueToString(r.libraryControlTypeId, "libraryControlTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLibraryControlTypesLibraryControlTypeIdGetRequest struct {
	ctx context.Context
	ApiService *LibraryControlTypesAPIService
	libraryControlTypeId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiLibraryControlTypesLibraryControlTypeIdGetRequest) Include(include []string) ApiLibraryControlTypesLibraryControlTypeIdGetRequest {
	r.include = &include
	return r
}

func (r ApiLibraryControlTypesLibraryControlTypeIdGetRequest) Execute() (*LibraryControlTypes, *http.Response, error) {
	return r.ApiService.LibraryControlTypesLibraryControlTypeIdGetExecute(r)
}

/*
LibraryControlTypesLibraryControlTypeIdGet Method for LibraryControlTypesLibraryControlTypeIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param libraryControlTypeId Model id
 @return ApiLibraryControlTypesLibraryControlTypeIdGetRequest
*/
func (a *LibraryControlTypesAPIService) LibraryControlTypesLibraryControlTypeIdGet(ctx context.Context, libraryControlTypeId int64) ApiLibraryControlTypesLibraryControlTypeIdGetRequest {
	return ApiLibraryControlTypesLibraryControlTypeIdGetRequest{
		ApiService: a,
		ctx: ctx,
		libraryControlTypeId: libraryControlTypeId,
	}
}

// Execute executes the request
//  @return LibraryControlTypes
func (a *LibraryControlTypesAPIService) LibraryControlTypesLibraryControlTypeIdGetExecute(r ApiLibraryControlTypesLibraryControlTypeIdGetRequest) (*LibraryControlTypes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlTypes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlTypesAPIService.LibraryControlTypesLibraryControlTypeIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_types/{library_control_type_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"library_control_type_id"+"}", url.PathEscape(parameterValueToString(r.libraryControlTypeId, "libraryControlTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLibraryControlTypesLibraryControlTypeIdPutRequest struct {
	ctx context.Context
	ApiService *LibraryControlTypesAPIService
	libraryControlTypeId int64
	libraryControlTypesPut *LibraryControlTypesPut
}

func (r ApiLibraryControlTypesLibraryControlTypeIdPutRequest) LibraryControlTypesPut(libraryControlTypesPut LibraryControlTypesPut) ApiLibraryControlTypesLibraryControlTypeIdPutRequest {
	r.libraryControlTypesPut = &libraryControlTypesPut
	return r
}

func (r ApiLibraryControlTypesLibraryControlTypeIdPutRequest) Execute() (*LibraryControlTypes, *http.Response, error) {
	return r.ApiService.LibraryControlTypesLibraryControlTypeIdPutExecute(r)
}

/*
LibraryControlTypesLibraryControlTypeIdPut Method for LibraryControlTypesLibraryControlTypeIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param libraryControlTypeId Model id
 @return ApiLibraryControlTypesLibraryControlTypeIdPutRequest
*/
func (a *LibraryControlTypesAPIService) LibraryControlTypesLibraryControlTypeIdPut(ctx context.Context, libraryControlTypeId int64) ApiLibraryControlTypesLibraryControlTypeIdPutRequest {
	return ApiLibraryControlTypesLibraryControlTypeIdPutRequest{
		ApiService: a,
		ctx: ctx,
		libraryControlTypeId: libraryControlTypeId,
	}
}

// Execute executes the request
//  @return LibraryControlTypes
func (a *LibraryControlTypesAPIService) LibraryControlTypesLibraryControlTypeIdPutExecute(r ApiLibraryControlTypesLibraryControlTypeIdPutRequest) (*LibraryControlTypes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlTypes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlTypesAPIService.LibraryControlTypesLibraryControlTypeIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_types/{library_control_type_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"library_control_type_id"+"}", url.PathEscape(parameterValueToString(r.libraryControlTypeId, "libraryControlTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.libraryControlTypesPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLibraryControlTypesPostRequest struct {
	ctx context.Context
	ApiService *LibraryControlTypesAPIService
	libraryControlTypesPostRequest *LibraryControlTypesPostRequest
}

func (r ApiLibraryControlTypesPostRequest) LibraryControlTypesPostRequest(libraryControlTypesPostRequest LibraryControlTypesPostRequest) ApiLibraryControlTypesPostRequest {
	r.libraryControlTypesPostRequest = &libraryControlTypesPostRequest
	return r
}

func (r ApiLibraryControlTypesPostRequest) Execute() (*LibraryControlTypesGet200Response, *http.Response, error) {
	return r.ApiService.LibraryControlTypesPostExecute(r)
}

/*
LibraryControlTypesPost Method for LibraryControlTypesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLibraryControlTypesPostRequest
*/
func (a *LibraryControlTypesAPIService) LibraryControlTypesPost(ctx context.Context) ApiLibraryControlTypesPostRequest {
	return ApiLibraryControlTypesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LibraryControlTypesGet200Response
func (a *LibraryControlTypesAPIService) LibraryControlTypesPostExecute(r ApiLibraryControlTypesPostRequest) (*LibraryControlTypesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlTypesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlTypesAPIService.LibraryControlTypesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.libraryControlTypesPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
