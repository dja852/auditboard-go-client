/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the FrameworksPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameworksPostRequest{}

// FrameworksPostRequest struct for FrameworksPostRequest
type FrameworksPostRequest struct {
	Framework *Frameworks `json:"framework,omitempty"`
}

// NewFrameworksPostRequest instantiates a new FrameworksPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameworksPostRequest() *FrameworksPostRequest {
	this := FrameworksPostRequest{}
	return &this
}

// NewFrameworksPostRequestWithDefaults instantiates a new FrameworksPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameworksPostRequestWithDefaults() *FrameworksPostRequest {
	this := FrameworksPostRequest{}
	return &this
}

// GetFramework returns the Framework field value if set, zero value otherwise.
func (o *FrameworksPostRequest) GetFramework() Frameworks {
	if o == nil || IsNil(o.Framework) {
		var ret Frameworks
		return ret
	}
	return *o.Framework
}

// GetFrameworkOk returns a tuple with the Framework field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPostRequest) GetFrameworkOk() (*Frameworks, bool) {
	if o == nil || IsNil(o.Framework) {
		return nil, false
	}
	return o.Framework, true
}

// HasFramework returns a boolean if a field has been set.
func (o *FrameworksPostRequest) HasFramework() bool {
	if o != nil && !IsNil(o.Framework) {
		return true
	}

	return false
}

// SetFramework gets a reference to the given Frameworks and assigns it to the Framework field.
func (o *FrameworksPostRequest) SetFramework(v Frameworks) {
	o.Framework = &v
}

func (o FrameworksPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameworksPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Framework) {
		toSerialize["framework"] = o.Framework
	}
	return toSerialize, nil
}

type NullableFrameworksPostRequest struct {
	value *FrameworksPostRequest
	isSet bool
}

func (v NullableFrameworksPostRequest) Get() *FrameworksPostRequest {
	return v.value
}

func (v *NullableFrameworksPostRequest) Set(val *FrameworksPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameworksPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameworksPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameworksPostRequest(val *FrameworksPostRequest) *NullableFrameworksPostRequest {
	return &NullableFrameworksPostRequest{value: val, isSet: true}
}

func (v NullableFrameworksPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameworksPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


