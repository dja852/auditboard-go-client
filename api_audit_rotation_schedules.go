/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AuditRotationSchedulesAPIService AuditRotationSchedulesAPI service
type AuditRotationSchedulesAPIService service

type ApiAuditRotationSchedulesAuditRotationScheduleIdDeleteRequest struct {
	ctx context.Context
	ApiService *AuditRotationSchedulesAPIService
	auditRotationScheduleId int64
}

func (r ApiAuditRotationSchedulesAuditRotationScheduleIdDeleteRequest) Execute() (*AuditRotationSchedules, *http.Response, error) {
	return r.ApiService.AuditRotationSchedulesAuditRotationScheduleIdDeleteExecute(r)
}

/*
AuditRotationSchedulesAuditRotationScheduleIdDelete Method for AuditRotationSchedulesAuditRotationScheduleIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditRotationScheduleId Model id
 @return ApiAuditRotationSchedulesAuditRotationScheduleIdDeleteRequest
*/
func (a *AuditRotationSchedulesAPIService) AuditRotationSchedulesAuditRotationScheduleIdDelete(ctx context.Context, auditRotationScheduleId int64) ApiAuditRotationSchedulesAuditRotationScheduleIdDeleteRequest {
	return ApiAuditRotationSchedulesAuditRotationScheduleIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		auditRotationScheduleId: auditRotationScheduleId,
	}
}

// Execute executes the request
//  @return AuditRotationSchedules
func (a *AuditRotationSchedulesAPIService) AuditRotationSchedulesAuditRotationScheduleIdDeleteExecute(r ApiAuditRotationSchedulesAuditRotationScheduleIdDeleteRequest) (*AuditRotationSchedules, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditRotationSchedules
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditRotationSchedulesAPIService.AuditRotationSchedulesAuditRotationScheduleIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_rotation_schedules/{audit_rotation_schedule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_rotation_schedule_id"+"}", url.PathEscape(parameterValueToString(r.auditRotationScheduleId, "auditRotationScheduleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditRotationSchedulesAuditRotationScheduleIdGetRequest struct {
	ctx context.Context
	ApiService *AuditRotationSchedulesAPIService
	auditRotationScheduleId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditRotationSchedulesAuditRotationScheduleIdGetRequest) Include(include []string) ApiAuditRotationSchedulesAuditRotationScheduleIdGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditRotationSchedulesAuditRotationScheduleIdGetRequest) Execute() (*AuditRotationSchedules, *http.Response, error) {
	return r.ApiService.AuditRotationSchedulesAuditRotationScheduleIdGetExecute(r)
}

/*
AuditRotationSchedulesAuditRotationScheduleIdGet Method for AuditRotationSchedulesAuditRotationScheduleIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditRotationScheduleId Model id
 @return ApiAuditRotationSchedulesAuditRotationScheduleIdGetRequest
*/
func (a *AuditRotationSchedulesAPIService) AuditRotationSchedulesAuditRotationScheduleIdGet(ctx context.Context, auditRotationScheduleId int64) ApiAuditRotationSchedulesAuditRotationScheduleIdGetRequest {
	return ApiAuditRotationSchedulesAuditRotationScheduleIdGetRequest{
		ApiService: a,
		ctx: ctx,
		auditRotationScheduleId: auditRotationScheduleId,
	}
}

// Execute executes the request
//  @return AuditRotationSchedules
func (a *AuditRotationSchedulesAPIService) AuditRotationSchedulesAuditRotationScheduleIdGetExecute(r ApiAuditRotationSchedulesAuditRotationScheduleIdGetRequest) (*AuditRotationSchedules, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditRotationSchedules
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditRotationSchedulesAPIService.AuditRotationSchedulesAuditRotationScheduleIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_rotation_schedules/{audit_rotation_schedule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_rotation_schedule_id"+"}", url.PathEscape(parameterValueToString(r.auditRotationScheduleId, "auditRotationScheduleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditRotationSchedulesAuditRotationScheduleIdPutRequest struct {
	ctx context.Context
	ApiService *AuditRotationSchedulesAPIService
	auditRotationScheduleId int64
	auditRotationSchedulesPut *AuditRotationSchedulesPut
}

func (r ApiAuditRotationSchedulesAuditRotationScheduleIdPutRequest) AuditRotationSchedulesPut(auditRotationSchedulesPut AuditRotationSchedulesPut) ApiAuditRotationSchedulesAuditRotationScheduleIdPutRequest {
	r.auditRotationSchedulesPut = &auditRotationSchedulesPut
	return r
}

func (r ApiAuditRotationSchedulesAuditRotationScheduleIdPutRequest) Execute() (*AuditRotationSchedules, *http.Response, error) {
	return r.ApiService.AuditRotationSchedulesAuditRotationScheduleIdPutExecute(r)
}

/*
AuditRotationSchedulesAuditRotationScheduleIdPut Method for AuditRotationSchedulesAuditRotationScheduleIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditRotationScheduleId Model id
 @return ApiAuditRotationSchedulesAuditRotationScheduleIdPutRequest
*/
func (a *AuditRotationSchedulesAPIService) AuditRotationSchedulesAuditRotationScheduleIdPut(ctx context.Context, auditRotationScheduleId int64) ApiAuditRotationSchedulesAuditRotationScheduleIdPutRequest {
	return ApiAuditRotationSchedulesAuditRotationScheduleIdPutRequest{
		ApiService: a,
		ctx: ctx,
		auditRotationScheduleId: auditRotationScheduleId,
	}
}

// Execute executes the request
//  @return AuditRotationSchedules
func (a *AuditRotationSchedulesAPIService) AuditRotationSchedulesAuditRotationScheduleIdPutExecute(r ApiAuditRotationSchedulesAuditRotationScheduleIdPutRequest) (*AuditRotationSchedules, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditRotationSchedules
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditRotationSchedulesAPIService.AuditRotationSchedulesAuditRotationScheduleIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_rotation_schedules/{audit_rotation_schedule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_rotation_schedule_id"+"}", url.PathEscape(parameterValueToString(r.auditRotationScheduleId, "auditRotationScheduleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditRotationSchedulesPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditRotationSchedulesGetRequest struct {
	ctx context.Context
	ApiService *AuditRotationSchedulesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditRotationSchedulesGetRequest) Include(include []string) ApiAuditRotationSchedulesGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditRotationSchedulesGetRequest) Execute() (*AuditRotationSchedulesGet200Response, *http.Response, error) {
	return r.ApiService.AuditRotationSchedulesGetExecute(r)
}

/*
AuditRotationSchedulesGet Method for AuditRotationSchedulesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditRotationSchedulesGetRequest
*/
func (a *AuditRotationSchedulesAPIService) AuditRotationSchedulesGet(ctx context.Context) ApiAuditRotationSchedulesGetRequest {
	return ApiAuditRotationSchedulesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditRotationSchedulesGet200Response
func (a *AuditRotationSchedulesAPIService) AuditRotationSchedulesGetExecute(r ApiAuditRotationSchedulesGetRequest) (*AuditRotationSchedulesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditRotationSchedulesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditRotationSchedulesAPIService.AuditRotationSchedulesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_rotation_schedules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditRotationSchedulesPostRequest struct {
	ctx context.Context
	ApiService *AuditRotationSchedulesAPIService
	auditRotationSchedulesPostRequest *AuditRotationSchedulesPostRequest
}

func (r ApiAuditRotationSchedulesPostRequest) AuditRotationSchedulesPostRequest(auditRotationSchedulesPostRequest AuditRotationSchedulesPostRequest) ApiAuditRotationSchedulesPostRequest {
	r.auditRotationSchedulesPostRequest = &auditRotationSchedulesPostRequest
	return r
}

func (r ApiAuditRotationSchedulesPostRequest) Execute() (*AuditRotationSchedulesGet200Response, *http.Response, error) {
	return r.ApiService.AuditRotationSchedulesPostExecute(r)
}

/*
AuditRotationSchedulesPost Method for AuditRotationSchedulesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditRotationSchedulesPostRequest
*/
func (a *AuditRotationSchedulesAPIService) AuditRotationSchedulesPost(ctx context.Context) ApiAuditRotationSchedulesPostRequest {
	return ApiAuditRotationSchedulesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditRotationSchedulesGet200Response
func (a *AuditRotationSchedulesAPIService) AuditRotationSchedulesPostExecute(r ApiAuditRotationSchedulesPostRequest) (*AuditRotationSchedulesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditRotationSchedulesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditRotationSchedulesAPIService.AuditRotationSchedulesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_rotation_schedules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditRotationSchedulesPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
