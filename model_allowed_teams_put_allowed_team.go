/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AllowedTeamsPutAllowedTeam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllowedTeamsPutAllowedTeam{}

// AllowedTeamsPutAllowedTeam struct for AllowedTeamsPutAllowedTeam
type AllowedTeamsPutAllowedTeam struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	TeamableId *int32 `json:"teamable_id,omitempty"`
	TeamableType *string `json:"teamable_type,omitempty"`
	Permission *string `json:"permission,omitempty"`
	// Note: This is a Foreign Key to `teams.id`.<fk table='teams' column='id'/>
	TeamId int32 `json:"team_id"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type _AllowedTeamsPutAllowedTeam AllowedTeamsPutAllowedTeam

// NewAllowedTeamsPutAllowedTeam instantiates a new AllowedTeamsPutAllowedTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowedTeamsPutAllowedTeam(teamId int32) *AllowedTeamsPutAllowedTeam {
	this := AllowedTeamsPutAllowedTeam{}
	this.TeamId = teamId
	return &this
}

// NewAllowedTeamsPutAllowedTeamWithDefaults instantiates a new AllowedTeamsPutAllowedTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowedTeamsPutAllowedTeamWithDefaults() *AllowedTeamsPutAllowedTeam {
	this := AllowedTeamsPutAllowedTeam{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AllowedTeamsPutAllowedTeam) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPutAllowedTeam) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AllowedTeamsPutAllowedTeam) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AllowedTeamsPutAllowedTeam) SetId(v int32) {
	o.Id = &v
}

// GetTeamableId returns the TeamableId field value if set, zero value otherwise.
func (o *AllowedTeamsPutAllowedTeam) GetTeamableId() int32 {
	if o == nil || IsNil(o.TeamableId) {
		var ret int32
		return ret
	}
	return *o.TeamableId
}

// GetTeamableIdOk returns a tuple with the TeamableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPutAllowedTeam) GetTeamableIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TeamableId) {
		return nil, false
	}
	return o.TeamableId, true
}

// HasTeamableId returns a boolean if a field has been set.
func (o *AllowedTeamsPutAllowedTeam) HasTeamableId() bool {
	if o != nil && !IsNil(o.TeamableId) {
		return true
	}

	return false
}

// SetTeamableId gets a reference to the given int32 and assigns it to the TeamableId field.
func (o *AllowedTeamsPutAllowedTeam) SetTeamableId(v int32) {
	o.TeamableId = &v
}

// GetTeamableType returns the TeamableType field value if set, zero value otherwise.
func (o *AllowedTeamsPutAllowedTeam) GetTeamableType() string {
	if o == nil || IsNil(o.TeamableType) {
		var ret string
		return ret
	}
	return *o.TeamableType
}

// GetTeamableTypeOk returns a tuple with the TeamableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPutAllowedTeam) GetTeamableTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TeamableType) {
		return nil, false
	}
	return o.TeamableType, true
}

// HasTeamableType returns a boolean if a field has been set.
func (o *AllowedTeamsPutAllowedTeam) HasTeamableType() bool {
	if o != nil && !IsNil(o.TeamableType) {
		return true
	}

	return false
}

// SetTeamableType gets a reference to the given string and assigns it to the TeamableType field.
func (o *AllowedTeamsPutAllowedTeam) SetTeamableType(v string) {
	o.TeamableType = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *AllowedTeamsPutAllowedTeam) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPutAllowedTeam) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *AllowedTeamsPutAllowedTeam) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *AllowedTeamsPutAllowedTeam) SetPermission(v string) {
	o.Permission = &v
}

// GetTeamId returns the TeamId field value
func (o *AllowedTeamsPutAllowedTeam) GetTeamId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPutAllowedTeam) GetTeamIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *AllowedTeamsPutAllowedTeam) SetTeamId(v int32) {
	o.TeamId = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AllowedTeamsPutAllowedTeam) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPutAllowedTeam) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AllowedTeamsPutAllowedTeam) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *AllowedTeamsPutAllowedTeam) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AllowedTeamsPutAllowedTeam) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPutAllowedTeam) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AllowedTeamsPutAllowedTeam) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *AllowedTeamsPutAllowedTeam) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o AllowedTeamsPutAllowedTeam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllowedTeamsPutAllowedTeam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TeamableId) {
		toSerialize["teamable_id"] = o.TeamableId
	}
	if !IsNil(o.TeamableType) {
		toSerialize["teamable_type"] = o.TeamableType
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	toSerialize["team_id"] = o.TeamId
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *AllowedTeamsPutAllowedTeam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"team_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAllowedTeamsPutAllowedTeam := _AllowedTeamsPutAllowedTeam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAllowedTeamsPutAllowedTeam)

	if err != nil {
		return err
	}

	*o = AllowedTeamsPutAllowedTeam(varAllowedTeamsPutAllowedTeam)

	return err
}

type NullableAllowedTeamsPutAllowedTeam struct {
	value *AllowedTeamsPutAllowedTeam
	isSet bool
}

func (v NullableAllowedTeamsPutAllowedTeam) Get() *AllowedTeamsPutAllowedTeam {
	return v.value
}

func (v *NullableAllowedTeamsPutAllowedTeam) Set(val *AllowedTeamsPutAllowedTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowedTeamsPutAllowedTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowedTeamsPutAllowedTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowedTeamsPutAllowedTeam(val *AllowedTeamsPutAllowedTeam) *NullableAllowedTeamsPutAllowedTeam {
	return &NullableAllowedTeamsPutAllowedTeam{value: val, isSet: true}
}

func (v NullableAllowedTeamsPutAllowedTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowedTeamsPutAllowedTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


