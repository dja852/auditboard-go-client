/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the ReportsPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportsPut{}

// ReportsPut struct for ReportsPut
type ReportsPut struct {
	Report *ReportsPutReport `json:"report,omitempty"`
	PreviousValues *ReportsPutPreviousValues `json:"previous_values,omitempty"`
}

// NewReportsPut instantiates a new ReportsPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportsPut() *ReportsPut {
	this := ReportsPut{}
	return &this
}

// NewReportsPutWithDefaults instantiates a new ReportsPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportsPutWithDefaults() *ReportsPut {
	this := ReportsPut{}
	return &this
}

// GetReport returns the Report field value if set, zero value otherwise.
func (o *ReportsPut) GetReport() ReportsPutReport {
	if o == nil || IsNil(o.Report) {
		var ret ReportsPutReport
		return ret
	}
	return *o.Report
}

// GetReportOk returns a tuple with the Report field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportsPut) GetReportOk() (*ReportsPutReport, bool) {
	if o == nil || IsNil(o.Report) {
		return nil, false
	}
	return o.Report, true
}

// HasReport returns a boolean if a field has been set.
func (o *ReportsPut) HasReport() bool {
	if o != nil && !IsNil(o.Report) {
		return true
	}

	return false
}

// SetReport gets a reference to the given ReportsPutReport and assigns it to the Report field.
func (o *ReportsPut) SetReport(v ReportsPutReport) {
	o.Report = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *ReportsPut) GetPreviousValues() ReportsPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret ReportsPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportsPut) GetPreviousValuesOk() (*ReportsPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *ReportsPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given ReportsPutPreviousValues and assigns it to the PreviousValues field.
func (o *ReportsPut) SetPreviousValues(v ReportsPutPreviousValues) {
	o.PreviousValues = &v
}

func (o ReportsPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportsPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Report) {
		toSerialize["report"] = o.Report
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableReportsPut struct {
	value *ReportsPut
	isSet bool
}

func (v NullableReportsPut) Get() *ReportsPut {
	return v.value
}

func (v *NullableReportsPut) Set(val *ReportsPut) {
	v.value = val
	v.isSet = true
}

func (v NullableReportsPut) IsSet() bool {
	return v.isSet
}

func (v *NullableReportsPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportsPut(val *ReportsPut) *NullableReportsPut {
	return &NullableReportsPut{value: val, isSet: true}
}

func (v NullableReportsPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportsPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


