/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the Jobs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Jobs{}

// Jobs struct for Jobs
type Jobs struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	StartedAt *string `json:"started_at,omitempty"`
	CompletedAt *string `json:"completed_at,omitempty"`
	Status *string `json:"status,omitempty"`
	Output interface{} `json:"output,omitempty"`
	TaskArguments interface{} `json:"task_arguments,omitempty"`
	StackTrace *string `json:"stack_trace,omitempty"`
	TaskName *string `json:"task_name,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	TriggeredByUserId *int32 `json:"triggered_by_user_id,omitempty"`
	KueId *string `json:"kue_id,omitempty"`
	CancelledAt *string `json:"cancelled_at,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	CancelledByUserId *int32 `json:"cancelled_by_user_id,omitempty"`
}

// NewJobs instantiates a new Jobs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobs() *Jobs {
	this := Jobs{}
	return &this
}

// NewJobsWithDefaults instantiates a new Jobs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobsWithDefaults() *Jobs {
	this := Jobs{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Jobs) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Jobs) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Jobs) SetId(v int32) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Jobs) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Jobs) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Jobs) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Jobs) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Jobs) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *Jobs) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *Jobs) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *Jobs) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *Jobs) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *Jobs) GetStartedAt() string {
	if o == nil || IsNil(o.StartedAt) {
		var ret string
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetStartedAtOk() (*string, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *Jobs) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given string and assigns it to the StartedAt field.
func (o *Jobs) SetStartedAt(v string) {
	o.StartedAt = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *Jobs) GetCompletedAt() string {
	if o == nil || IsNil(o.CompletedAt) {
		var ret string
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetCompletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *Jobs) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given string and assigns it to the CompletedAt field.
func (o *Jobs) SetCompletedAt(v string) {
	o.CompletedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Jobs) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Jobs) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Jobs) SetStatus(v string) {
	o.Status = &v
}

// GetOutput returns the Output field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Jobs) GetOutput() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Jobs) GetOutputOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return &o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *Jobs) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given interface{} and assigns it to the Output field.
func (o *Jobs) SetOutput(v interface{}) {
	o.Output = v
}

// GetTaskArguments returns the TaskArguments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Jobs) GetTaskArguments() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.TaskArguments
}

// GetTaskArgumentsOk returns a tuple with the TaskArguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Jobs) GetTaskArgumentsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.TaskArguments) {
		return nil, false
	}
	return &o.TaskArguments, true
}

// HasTaskArguments returns a boolean if a field has been set.
func (o *Jobs) HasTaskArguments() bool {
	if o != nil && !IsNil(o.TaskArguments) {
		return true
	}

	return false
}

// SetTaskArguments gets a reference to the given interface{} and assigns it to the TaskArguments field.
func (o *Jobs) SetTaskArguments(v interface{}) {
	o.TaskArguments = v
}

// GetStackTrace returns the StackTrace field value if set, zero value otherwise.
func (o *Jobs) GetStackTrace() string {
	if o == nil || IsNil(o.StackTrace) {
		var ret string
		return ret
	}
	return *o.StackTrace
}

// GetStackTraceOk returns a tuple with the StackTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetStackTraceOk() (*string, bool) {
	if o == nil || IsNil(o.StackTrace) {
		return nil, false
	}
	return o.StackTrace, true
}

// HasStackTrace returns a boolean if a field has been set.
func (o *Jobs) HasStackTrace() bool {
	if o != nil && !IsNil(o.StackTrace) {
		return true
	}

	return false
}

// SetStackTrace gets a reference to the given string and assigns it to the StackTrace field.
func (o *Jobs) SetStackTrace(v string) {
	o.StackTrace = &v
}

// GetTaskName returns the TaskName field value if set, zero value otherwise.
func (o *Jobs) GetTaskName() string {
	if o == nil || IsNil(o.TaskName) {
		var ret string
		return ret
	}
	return *o.TaskName
}

// GetTaskNameOk returns a tuple with the TaskName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetTaskNameOk() (*string, bool) {
	if o == nil || IsNil(o.TaskName) {
		return nil, false
	}
	return o.TaskName, true
}

// HasTaskName returns a boolean if a field has been set.
func (o *Jobs) HasTaskName() bool {
	if o != nil && !IsNil(o.TaskName) {
		return true
	}

	return false
}

// SetTaskName gets a reference to the given string and assigns it to the TaskName field.
func (o *Jobs) SetTaskName(v string) {
	o.TaskName = &v
}

// GetTriggeredByUserId returns the TriggeredByUserId field value if set, zero value otherwise.
func (o *Jobs) GetTriggeredByUserId() int32 {
	if o == nil || IsNil(o.TriggeredByUserId) {
		var ret int32
		return ret
	}
	return *o.TriggeredByUserId
}

// GetTriggeredByUserIdOk returns a tuple with the TriggeredByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetTriggeredByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TriggeredByUserId) {
		return nil, false
	}
	return o.TriggeredByUserId, true
}

// HasTriggeredByUserId returns a boolean if a field has been set.
func (o *Jobs) HasTriggeredByUserId() bool {
	if o != nil && !IsNil(o.TriggeredByUserId) {
		return true
	}

	return false
}

// SetTriggeredByUserId gets a reference to the given int32 and assigns it to the TriggeredByUserId field.
func (o *Jobs) SetTriggeredByUserId(v int32) {
	o.TriggeredByUserId = &v
}

// GetKueId returns the KueId field value if set, zero value otherwise.
func (o *Jobs) GetKueId() string {
	if o == nil || IsNil(o.KueId) {
		var ret string
		return ret
	}
	return *o.KueId
}

// GetKueIdOk returns a tuple with the KueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetKueIdOk() (*string, bool) {
	if o == nil || IsNil(o.KueId) {
		return nil, false
	}
	return o.KueId, true
}

// HasKueId returns a boolean if a field has been set.
func (o *Jobs) HasKueId() bool {
	if o != nil && !IsNil(o.KueId) {
		return true
	}

	return false
}

// SetKueId gets a reference to the given string and assigns it to the KueId field.
func (o *Jobs) SetKueId(v string) {
	o.KueId = &v
}

// GetCancelledAt returns the CancelledAt field value if set, zero value otherwise.
func (o *Jobs) GetCancelledAt() string {
	if o == nil || IsNil(o.CancelledAt) {
		var ret string
		return ret
	}
	return *o.CancelledAt
}

// GetCancelledAtOk returns a tuple with the CancelledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetCancelledAtOk() (*string, bool) {
	if o == nil || IsNil(o.CancelledAt) {
		return nil, false
	}
	return o.CancelledAt, true
}

// HasCancelledAt returns a boolean if a field has been set.
func (o *Jobs) HasCancelledAt() bool {
	if o != nil && !IsNil(o.CancelledAt) {
		return true
	}

	return false
}

// SetCancelledAt gets a reference to the given string and assigns it to the CancelledAt field.
func (o *Jobs) SetCancelledAt(v string) {
	o.CancelledAt = &v
}

// GetCancelledByUserId returns the CancelledByUserId field value if set, zero value otherwise.
func (o *Jobs) GetCancelledByUserId() int32 {
	if o == nil || IsNil(o.CancelledByUserId) {
		var ret int32
		return ret
	}
	return *o.CancelledByUserId
}

// GetCancelledByUserIdOk returns a tuple with the CancelledByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetCancelledByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CancelledByUserId) {
		return nil, false
	}
	return o.CancelledByUserId, true
}

// HasCancelledByUserId returns a boolean if a field has been set.
func (o *Jobs) HasCancelledByUserId() bool {
	if o != nil && !IsNil(o.CancelledByUserId) {
		return true
	}

	return false
}

// SetCancelledByUserId gets a reference to the given int32 and assigns it to the CancelledByUserId field.
func (o *Jobs) SetCancelledByUserId(v int32) {
	o.CancelledByUserId = &v
}

func (o Jobs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Jobs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	if !IsNil(o.CompletedAt) {
		toSerialize["completed_at"] = o.CompletedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Output != nil {
		toSerialize["output"] = o.Output
	}
	if o.TaskArguments != nil {
		toSerialize["task_arguments"] = o.TaskArguments
	}
	if !IsNil(o.StackTrace) {
		toSerialize["stack_trace"] = o.StackTrace
	}
	if !IsNil(o.TaskName) {
		toSerialize["task_name"] = o.TaskName
	}
	if !IsNil(o.TriggeredByUserId) {
		toSerialize["triggered_by_user_id"] = o.TriggeredByUserId
	}
	if !IsNil(o.KueId) {
		toSerialize["kue_id"] = o.KueId
	}
	if !IsNil(o.CancelledAt) {
		toSerialize["cancelled_at"] = o.CancelledAt
	}
	if !IsNil(o.CancelledByUserId) {
		toSerialize["cancelled_by_user_id"] = o.CancelledByUserId
	}
	return toSerialize, nil
}

type NullableJobs struct {
	value *Jobs
	isSet bool
}

func (v NullableJobs) Get() *Jobs {
	return v.value
}

func (v *NullableJobs) Set(val *Jobs) {
	v.value = val
	v.isSet = true
}

func (v NullableJobs) IsSet() bool {
	return v.isSet
}

func (v *NullableJobs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobs(val *Jobs) *NullableJobs {
	return &NullableJobs{value: val, isSet: true}
}

func (v NullableJobs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


