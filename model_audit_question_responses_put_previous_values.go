/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the AuditQuestionResponsesPutPreviousValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditQuestionResponsesPutPreviousValues{}

// AuditQuestionResponsesPutPreviousValues struct for AuditQuestionResponsesPutPreviousValues
type AuditQuestionResponsesPutPreviousValues struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	Type *string `json:"type,omitempty"`
	// Note: This is a Foreign Key to `audit_surveys.id`.<fk table='audit_surveys' column='id'/>
	AuditSurveyId *int32 `json:"audit_survey_id,omitempty"`
	// Note: This is a Foreign Key to `audit_questions.id`.<fk table='audit_questions' column='id'/>
	AuditQuestionId *int32 `json:"audit_question_id,omitempty"`
	Notes *string `json:"notes,omitempty"`
	ResponseData interface{} `json:"response_data,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	AnsweredByUserId *int32 `json:"answered_by_user_id,omitempty"`
	AnsweredDate *string `json:"answered_date,omitempty"`
	IsAnswered *bool `json:"is_answered,omitempty"`
	IsNotApplicable *bool `json:"is_not_applicable,omitempty"`
	IsFailedResponse *bool `json:"is_failed_response,omitempty"`
	QuestionUuid *string `json:"question_uuid,omitempty"`
	OverrideData interface{} `json:"override_data,omitempty"`
	OverrideReason *string `json:"override_reason,omitempty"`
	OverriddenAt *string `json:"overridden_at,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	OverriddenByUserId *int32 `json:"overridden_by_user_id,omitempty"`
	IsNotApplicableOverride *bool `json:"is_not_applicable_override,omitempty"`
}

// NewAuditQuestionResponsesPutPreviousValues instantiates a new AuditQuestionResponsesPutPreviousValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditQuestionResponsesPutPreviousValues() *AuditQuestionResponsesPutPreviousValues {
	this := AuditQuestionResponsesPutPreviousValues{}
	var isAnswered bool = false
	this.IsAnswered = &isAnswered
	var isNotApplicable bool = false
	this.IsNotApplicable = &isNotApplicable
	var isFailedResponse bool = false
	this.IsFailedResponse = &isFailedResponse
	var isNotApplicableOverride bool = false
	this.IsNotApplicableOverride = &isNotApplicableOverride
	return &this
}

// NewAuditQuestionResponsesPutPreviousValuesWithDefaults instantiates a new AuditQuestionResponsesPutPreviousValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditQuestionResponsesPutPreviousValuesWithDefaults() *AuditQuestionResponsesPutPreviousValues {
	this := AuditQuestionResponsesPutPreviousValues{}
	var isAnswered bool = false
	this.IsAnswered = &isAnswered
	var isNotApplicable bool = false
	this.IsNotApplicable = &isNotApplicable
	var isFailedResponse bool = false
	this.IsFailedResponse = &isFailedResponse
	var isNotApplicableOverride bool = false
	this.IsNotApplicableOverride = &isNotApplicableOverride
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AuditQuestionResponsesPutPreviousValues) SetId(v int32) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *AuditQuestionResponsesPutPreviousValues) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *AuditQuestionResponsesPutPreviousValues) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *AuditQuestionResponsesPutPreviousValues) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AuditQuestionResponsesPutPreviousValues) SetType(v string) {
	o.Type = &v
}

// GetAuditSurveyId returns the AuditSurveyId field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetAuditSurveyId() int32 {
	if o == nil || IsNil(o.AuditSurveyId) {
		var ret int32
		return ret
	}
	return *o.AuditSurveyId
}

// GetAuditSurveyIdOk returns a tuple with the AuditSurveyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetAuditSurveyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AuditSurveyId) {
		return nil, false
	}
	return o.AuditSurveyId, true
}

// HasAuditSurveyId returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasAuditSurveyId() bool {
	if o != nil && !IsNil(o.AuditSurveyId) {
		return true
	}

	return false
}

// SetAuditSurveyId gets a reference to the given int32 and assigns it to the AuditSurveyId field.
func (o *AuditQuestionResponsesPutPreviousValues) SetAuditSurveyId(v int32) {
	o.AuditSurveyId = &v
}

// GetAuditQuestionId returns the AuditQuestionId field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetAuditQuestionId() int32 {
	if o == nil || IsNil(o.AuditQuestionId) {
		var ret int32
		return ret
	}
	return *o.AuditQuestionId
}

// GetAuditQuestionIdOk returns a tuple with the AuditQuestionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetAuditQuestionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AuditQuestionId) {
		return nil, false
	}
	return o.AuditQuestionId, true
}

// HasAuditQuestionId returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasAuditQuestionId() bool {
	if o != nil && !IsNil(o.AuditQuestionId) {
		return true
	}

	return false
}

// SetAuditQuestionId gets a reference to the given int32 and assigns it to the AuditQuestionId field.
func (o *AuditQuestionResponsesPutPreviousValues) SetAuditQuestionId(v int32) {
	o.AuditQuestionId = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *AuditQuestionResponsesPutPreviousValues) SetNotes(v string) {
	o.Notes = &v
}

// GetResponseData returns the ResponseData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditQuestionResponsesPutPreviousValues) GetResponseData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ResponseData
}

// GetResponseDataOk returns a tuple with the ResponseData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditQuestionResponsesPutPreviousValues) GetResponseDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ResponseData) {
		return nil, false
	}
	return &o.ResponseData, true
}

// HasResponseData returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasResponseData() bool {
	if o != nil && !IsNil(o.ResponseData) {
		return true
	}

	return false
}

// SetResponseData gets a reference to the given interface{} and assigns it to the ResponseData field.
func (o *AuditQuestionResponsesPutPreviousValues) SetResponseData(v interface{}) {
	o.ResponseData = v
}

// GetAnsweredByUserId returns the AnsweredByUserId field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetAnsweredByUserId() int32 {
	if o == nil || IsNil(o.AnsweredByUserId) {
		var ret int32
		return ret
	}
	return *o.AnsweredByUserId
}

// GetAnsweredByUserIdOk returns a tuple with the AnsweredByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetAnsweredByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AnsweredByUserId) {
		return nil, false
	}
	return o.AnsweredByUserId, true
}

// HasAnsweredByUserId returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasAnsweredByUserId() bool {
	if o != nil && !IsNil(o.AnsweredByUserId) {
		return true
	}

	return false
}

// SetAnsweredByUserId gets a reference to the given int32 and assigns it to the AnsweredByUserId field.
func (o *AuditQuestionResponsesPutPreviousValues) SetAnsweredByUserId(v int32) {
	o.AnsweredByUserId = &v
}

// GetAnsweredDate returns the AnsweredDate field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetAnsweredDate() string {
	if o == nil || IsNil(o.AnsweredDate) {
		var ret string
		return ret
	}
	return *o.AnsweredDate
}

// GetAnsweredDateOk returns a tuple with the AnsweredDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetAnsweredDateOk() (*string, bool) {
	if o == nil || IsNil(o.AnsweredDate) {
		return nil, false
	}
	return o.AnsweredDate, true
}

// HasAnsweredDate returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasAnsweredDate() bool {
	if o != nil && !IsNil(o.AnsweredDate) {
		return true
	}

	return false
}

// SetAnsweredDate gets a reference to the given string and assigns it to the AnsweredDate field.
func (o *AuditQuestionResponsesPutPreviousValues) SetAnsweredDate(v string) {
	o.AnsweredDate = &v
}

// GetIsAnswered returns the IsAnswered field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetIsAnswered() bool {
	if o == nil || IsNil(o.IsAnswered) {
		var ret bool
		return ret
	}
	return *o.IsAnswered
}

// GetIsAnsweredOk returns a tuple with the IsAnswered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetIsAnsweredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAnswered) {
		return nil, false
	}
	return o.IsAnswered, true
}

// HasIsAnswered returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasIsAnswered() bool {
	if o != nil && !IsNil(o.IsAnswered) {
		return true
	}

	return false
}

// SetIsAnswered gets a reference to the given bool and assigns it to the IsAnswered field.
func (o *AuditQuestionResponsesPutPreviousValues) SetIsAnswered(v bool) {
	o.IsAnswered = &v
}

// GetIsNotApplicable returns the IsNotApplicable field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetIsNotApplicable() bool {
	if o == nil || IsNil(o.IsNotApplicable) {
		var ret bool
		return ret
	}
	return *o.IsNotApplicable
}

// GetIsNotApplicableOk returns a tuple with the IsNotApplicable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetIsNotApplicableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNotApplicable) {
		return nil, false
	}
	return o.IsNotApplicable, true
}

// HasIsNotApplicable returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasIsNotApplicable() bool {
	if o != nil && !IsNil(o.IsNotApplicable) {
		return true
	}

	return false
}

// SetIsNotApplicable gets a reference to the given bool and assigns it to the IsNotApplicable field.
func (o *AuditQuestionResponsesPutPreviousValues) SetIsNotApplicable(v bool) {
	o.IsNotApplicable = &v
}

// GetIsFailedResponse returns the IsFailedResponse field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetIsFailedResponse() bool {
	if o == nil || IsNil(o.IsFailedResponse) {
		var ret bool
		return ret
	}
	return *o.IsFailedResponse
}

// GetIsFailedResponseOk returns a tuple with the IsFailedResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetIsFailedResponseOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFailedResponse) {
		return nil, false
	}
	return o.IsFailedResponse, true
}

// HasIsFailedResponse returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasIsFailedResponse() bool {
	if o != nil && !IsNil(o.IsFailedResponse) {
		return true
	}

	return false
}

// SetIsFailedResponse gets a reference to the given bool and assigns it to the IsFailedResponse field.
func (o *AuditQuestionResponsesPutPreviousValues) SetIsFailedResponse(v bool) {
	o.IsFailedResponse = &v
}

// GetQuestionUuid returns the QuestionUuid field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetQuestionUuid() string {
	if o == nil || IsNil(o.QuestionUuid) {
		var ret string
		return ret
	}
	return *o.QuestionUuid
}

// GetQuestionUuidOk returns a tuple with the QuestionUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetQuestionUuidOk() (*string, bool) {
	if o == nil || IsNil(o.QuestionUuid) {
		return nil, false
	}
	return o.QuestionUuid, true
}

// HasQuestionUuid returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasQuestionUuid() bool {
	if o != nil && !IsNil(o.QuestionUuid) {
		return true
	}

	return false
}

// SetQuestionUuid gets a reference to the given string and assigns it to the QuestionUuid field.
func (o *AuditQuestionResponsesPutPreviousValues) SetQuestionUuid(v string) {
	o.QuestionUuid = &v
}

// GetOverrideData returns the OverrideData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditQuestionResponsesPutPreviousValues) GetOverrideData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.OverrideData
}

// GetOverrideDataOk returns a tuple with the OverrideData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditQuestionResponsesPutPreviousValues) GetOverrideDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.OverrideData) {
		return nil, false
	}
	return &o.OverrideData, true
}

// HasOverrideData returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasOverrideData() bool {
	if o != nil && !IsNil(o.OverrideData) {
		return true
	}

	return false
}

// SetOverrideData gets a reference to the given interface{} and assigns it to the OverrideData field.
func (o *AuditQuestionResponsesPutPreviousValues) SetOverrideData(v interface{}) {
	o.OverrideData = v
}

// GetOverrideReason returns the OverrideReason field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetOverrideReason() string {
	if o == nil || IsNil(o.OverrideReason) {
		var ret string
		return ret
	}
	return *o.OverrideReason
}

// GetOverrideReasonOk returns a tuple with the OverrideReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetOverrideReasonOk() (*string, bool) {
	if o == nil || IsNil(o.OverrideReason) {
		return nil, false
	}
	return o.OverrideReason, true
}

// HasOverrideReason returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasOverrideReason() bool {
	if o != nil && !IsNil(o.OverrideReason) {
		return true
	}

	return false
}

// SetOverrideReason gets a reference to the given string and assigns it to the OverrideReason field.
func (o *AuditQuestionResponsesPutPreviousValues) SetOverrideReason(v string) {
	o.OverrideReason = &v
}

// GetOverriddenAt returns the OverriddenAt field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetOverriddenAt() string {
	if o == nil || IsNil(o.OverriddenAt) {
		var ret string
		return ret
	}
	return *o.OverriddenAt
}

// GetOverriddenAtOk returns a tuple with the OverriddenAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetOverriddenAtOk() (*string, bool) {
	if o == nil || IsNil(o.OverriddenAt) {
		return nil, false
	}
	return o.OverriddenAt, true
}

// HasOverriddenAt returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasOverriddenAt() bool {
	if o != nil && !IsNil(o.OverriddenAt) {
		return true
	}

	return false
}

// SetOverriddenAt gets a reference to the given string and assigns it to the OverriddenAt field.
func (o *AuditQuestionResponsesPutPreviousValues) SetOverriddenAt(v string) {
	o.OverriddenAt = &v
}

// GetOverriddenByUserId returns the OverriddenByUserId field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetOverriddenByUserId() int32 {
	if o == nil || IsNil(o.OverriddenByUserId) {
		var ret int32
		return ret
	}
	return *o.OverriddenByUserId
}

// GetOverriddenByUserIdOk returns a tuple with the OverriddenByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetOverriddenByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OverriddenByUserId) {
		return nil, false
	}
	return o.OverriddenByUserId, true
}

// HasOverriddenByUserId returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasOverriddenByUserId() bool {
	if o != nil && !IsNil(o.OverriddenByUserId) {
		return true
	}

	return false
}

// SetOverriddenByUserId gets a reference to the given int32 and assigns it to the OverriddenByUserId field.
func (o *AuditQuestionResponsesPutPreviousValues) SetOverriddenByUserId(v int32) {
	o.OverriddenByUserId = &v
}

// GetIsNotApplicableOverride returns the IsNotApplicableOverride field value if set, zero value otherwise.
func (o *AuditQuestionResponsesPutPreviousValues) GetIsNotApplicableOverride() bool {
	if o == nil || IsNil(o.IsNotApplicableOverride) {
		var ret bool
		return ret
	}
	return *o.IsNotApplicableOverride
}

// GetIsNotApplicableOverrideOk returns a tuple with the IsNotApplicableOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionResponsesPutPreviousValues) GetIsNotApplicableOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNotApplicableOverride) {
		return nil, false
	}
	return o.IsNotApplicableOverride, true
}

// HasIsNotApplicableOverride returns a boolean if a field has been set.
func (o *AuditQuestionResponsesPutPreviousValues) HasIsNotApplicableOverride() bool {
	if o != nil && !IsNil(o.IsNotApplicableOverride) {
		return true
	}

	return false
}

// SetIsNotApplicableOverride gets a reference to the given bool and assigns it to the IsNotApplicableOverride field.
func (o *AuditQuestionResponsesPutPreviousValues) SetIsNotApplicableOverride(v bool) {
	o.IsNotApplicableOverride = &v
}

func (o AuditQuestionResponsesPutPreviousValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditQuestionResponsesPutPreviousValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.AuditSurveyId) {
		toSerialize["audit_survey_id"] = o.AuditSurveyId
	}
	if !IsNil(o.AuditQuestionId) {
		toSerialize["audit_question_id"] = o.AuditQuestionId
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if o.ResponseData != nil {
		toSerialize["response_data"] = o.ResponseData
	}
	if !IsNil(o.AnsweredByUserId) {
		toSerialize["answered_by_user_id"] = o.AnsweredByUserId
	}
	if !IsNil(o.AnsweredDate) {
		toSerialize["answered_date"] = o.AnsweredDate
	}
	if !IsNil(o.IsAnswered) {
		toSerialize["is_answered"] = o.IsAnswered
	}
	if !IsNil(o.IsNotApplicable) {
		toSerialize["is_not_applicable"] = o.IsNotApplicable
	}
	if !IsNil(o.IsFailedResponse) {
		toSerialize["is_failed_response"] = o.IsFailedResponse
	}
	if !IsNil(o.QuestionUuid) {
		toSerialize["question_uuid"] = o.QuestionUuid
	}
	if o.OverrideData != nil {
		toSerialize["override_data"] = o.OverrideData
	}
	if !IsNil(o.OverrideReason) {
		toSerialize["override_reason"] = o.OverrideReason
	}
	if !IsNil(o.OverriddenAt) {
		toSerialize["overridden_at"] = o.OverriddenAt
	}
	if !IsNil(o.OverriddenByUserId) {
		toSerialize["overridden_by_user_id"] = o.OverriddenByUserId
	}
	if !IsNil(o.IsNotApplicableOverride) {
		toSerialize["is_not_applicable_override"] = o.IsNotApplicableOverride
	}
	return toSerialize, nil
}

type NullableAuditQuestionResponsesPutPreviousValues struct {
	value *AuditQuestionResponsesPutPreviousValues
	isSet bool
}

func (v NullableAuditQuestionResponsesPutPreviousValues) Get() *AuditQuestionResponsesPutPreviousValues {
	return v.value
}

func (v *NullableAuditQuestionResponsesPutPreviousValues) Set(val *AuditQuestionResponsesPutPreviousValues) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditQuestionResponsesPutPreviousValues) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditQuestionResponsesPutPreviousValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditQuestionResponsesPutPreviousValues(val *AuditQuestionResponsesPutPreviousValues) *NullableAuditQuestionResponsesPutPreviousValues {
	return &NullableAuditQuestionResponsesPutPreviousValues{value: val, isSet: true}
}

func (v NullableAuditQuestionResponsesPutPreviousValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditQuestionResponsesPutPreviousValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


