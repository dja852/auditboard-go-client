/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KeyPerformanceIndicatorValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyPerformanceIndicatorValue{}

// KeyPerformanceIndicatorValue struct for KeyPerformanceIndicatorValue
type KeyPerformanceIndicatorValue struct {
	HistoricalDate *string `json:"historical_date,omitempty"`
	Id int64 `json:"id"`
	KeyPerformanceIndicatorId *int64 `json:"key_performance_indicator_id,omitempty"`
	Value *string `json:"value,omitempty"`
	Target *string `json:"target,omitempty"`
	Comments *string `json:"comments,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
}

type _KeyPerformanceIndicatorValue KeyPerformanceIndicatorValue

// NewKeyPerformanceIndicatorValue instantiates a new KeyPerformanceIndicatorValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyPerformanceIndicatorValue(id int64) *KeyPerformanceIndicatorValue {
	this := KeyPerformanceIndicatorValue{}
	this.Id = id
	return &this
}

// NewKeyPerformanceIndicatorValueWithDefaults instantiates a new KeyPerformanceIndicatorValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyPerformanceIndicatorValueWithDefaults() *KeyPerformanceIndicatorValue {
	this := KeyPerformanceIndicatorValue{}
	return &this
}

// GetHistoricalDate returns the HistoricalDate field value if set, zero value otherwise.
func (o *KeyPerformanceIndicatorValue) GetHistoricalDate() string {
	if o == nil || IsNil(o.HistoricalDate) {
		var ret string
		return ret
	}
	return *o.HistoricalDate
}

// GetHistoricalDateOk returns a tuple with the HistoricalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPerformanceIndicatorValue) GetHistoricalDateOk() (*string, bool) {
	if o == nil || IsNil(o.HistoricalDate) {
		return nil, false
	}
	return o.HistoricalDate, true
}

// HasHistoricalDate returns a boolean if a field has been set.
func (o *KeyPerformanceIndicatorValue) HasHistoricalDate() bool {
	if o != nil && !IsNil(o.HistoricalDate) {
		return true
	}

	return false
}

// SetHistoricalDate gets a reference to the given string and assigns it to the HistoricalDate field.
func (o *KeyPerformanceIndicatorValue) SetHistoricalDate(v string) {
	o.HistoricalDate = &v
}

// GetId returns the Id field value
func (o *KeyPerformanceIndicatorValue) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *KeyPerformanceIndicatorValue) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *KeyPerformanceIndicatorValue) SetId(v int64) {
	o.Id = v
}

// GetKeyPerformanceIndicatorId returns the KeyPerformanceIndicatorId field value if set, zero value otherwise.
func (o *KeyPerformanceIndicatorValue) GetKeyPerformanceIndicatorId() int64 {
	if o == nil || IsNil(o.KeyPerformanceIndicatorId) {
		var ret int64
		return ret
	}
	return *o.KeyPerformanceIndicatorId
}

// GetKeyPerformanceIndicatorIdOk returns a tuple with the KeyPerformanceIndicatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPerformanceIndicatorValue) GetKeyPerformanceIndicatorIdOk() (*int64, bool) {
	if o == nil || IsNil(o.KeyPerformanceIndicatorId) {
		return nil, false
	}
	return o.KeyPerformanceIndicatorId, true
}

// HasKeyPerformanceIndicatorId returns a boolean if a field has been set.
func (o *KeyPerformanceIndicatorValue) HasKeyPerformanceIndicatorId() bool {
	if o != nil && !IsNil(o.KeyPerformanceIndicatorId) {
		return true
	}

	return false
}

// SetKeyPerformanceIndicatorId gets a reference to the given int64 and assigns it to the KeyPerformanceIndicatorId field.
func (o *KeyPerformanceIndicatorValue) SetKeyPerformanceIndicatorId(v int64) {
	o.KeyPerformanceIndicatorId = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *KeyPerformanceIndicatorValue) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPerformanceIndicatorValue) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *KeyPerformanceIndicatorValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *KeyPerformanceIndicatorValue) SetValue(v string) {
	o.Value = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *KeyPerformanceIndicatorValue) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPerformanceIndicatorValue) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *KeyPerformanceIndicatorValue) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *KeyPerformanceIndicatorValue) SetTarget(v string) {
	o.Target = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *KeyPerformanceIndicatorValue) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPerformanceIndicatorValue) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *KeyPerformanceIndicatorValue) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *KeyPerformanceIndicatorValue) SetComments(v string) {
	o.Comments = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *KeyPerformanceIndicatorValue) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPerformanceIndicatorValue) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *KeyPerformanceIndicatorValue) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *KeyPerformanceIndicatorValue) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *KeyPerformanceIndicatorValue) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPerformanceIndicatorValue) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *KeyPerformanceIndicatorValue) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *KeyPerformanceIndicatorValue) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *KeyPerformanceIndicatorValue) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPerformanceIndicatorValue) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *KeyPerformanceIndicatorValue) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *KeyPerformanceIndicatorValue) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

func (o KeyPerformanceIndicatorValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyPerformanceIndicatorValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HistoricalDate) {
		toSerialize["historical_date"] = o.HistoricalDate
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.KeyPerformanceIndicatorId) {
		toSerialize["key_performance_indicator_id"] = o.KeyPerformanceIndicatorId
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	return toSerialize, nil
}

func (o *KeyPerformanceIndicatorValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeyPerformanceIndicatorValue := _KeyPerformanceIndicatorValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeyPerformanceIndicatorValue)

	if err != nil {
		return err
	}

	*o = KeyPerformanceIndicatorValue(varKeyPerformanceIndicatorValue)

	return err
}

type NullableKeyPerformanceIndicatorValue struct {
	value *KeyPerformanceIndicatorValue
	isSet bool
}

func (v NullableKeyPerformanceIndicatorValue) Get() *KeyPerformanceIndicatorValue {
	return v.value
}

func (v *NullableKeyPerformanceIndicatorValue) Set(val *KeyPerformanceIndicatorValue) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyPerformanceIndicatorValue) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyPerformanceIndicatorValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyPerformanceIndicatorValue(val *KeyPerformanceIndicatorValue) *NullableKeyPerformanceIndicatorValue {
	return &NullableKeyPerformanceIndicatorValue{value: val, isSet: true}
}

func (v NullableKeyPerformanceIndicatorValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyPerformanceIndicatorValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


