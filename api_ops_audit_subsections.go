/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OpsAuditSubsectionsAPIService OpsAuditSubsectionsAPI service
type OpsAuditSubsectionsAPIService service

type ApiOpsAuditSubsectionsGetRequest struct {
	ctx context.Context
	ApiService *OpsAuditSubsectionsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiOpsAuditSubsectionsGetRequest) Include(include []string) ApiOpsAuditSubsectionsGetRequest {
	r.include = &include
	return r
}

func (r ApiOpsAuditSubsectionsGetRequest) Execute() (*OpsAuditSubsectionsGet200Response, *http.Response, error) {
	return r.ApiService.OpsAuditSubsectionsGetExecute(r)
}

/*
OpsAuditSubsectionsGet Method for OpsAuditSubsectionsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOpsAuditSubsectionsGetRequest
*/
func (a *OpsAuditSubsectionsAPIService) OpsAuditSubsectionsGet(ctx context.Context) ApiOpsAuditSubsectionsGetRequest {
	return ApiOpsAuditSubsectionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpsAuditSubsectionsGet200Response
func (a *OpsAuditSubsectionsAPIService) OpsAuditSubsectionsGetExecute(r ApiOpsAuditSubsectionsGetRequest) (*OpsAuditSubsectionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditSubsectionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditSubsectionsAPIService.OpsAuditSubsectionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_subsections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditSubsectionsOpsAuditSubsectionIdDeleteRequest struct {
	ctx context.Context
	ApiService *OpsAuditSubsectionsAPIService
	opsAuditSubsectionId int64
}

func (r ApiOpsAuditSubsectionsOpsAuditSubsectionIdDeleteRequest) Execute() (*OpsAuditSubsections, *http.Response, error) {
	return r.ApiService.OpsAuditSubsectionsOpsAuditSubsectionIdDeleteExecute(r)
}

/*
OpsAuditSubsectionsOpsAuditSubsectionIdDelete Method for OpsAuditSubsectionsOpsAuditSubsectionIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param opsAuditSubsectionId Model id
 @return ApiOpsAuditSubsectionsOpsAuditSubsectionIdDeleteRequest
*/
func (a *OpsAuditSubsectionsAPIService) OpsAuditSubsectionsOpsAuditSubsectionIdDelete(ctx context.Context, opsAuditSubsectionId int64) ApiOpsAuditSubsectionsOpsAuditSubsectionIdDeleteRequest {
	return ApiOpsAuditSubsectionsOpsAuditSubsectionIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		opsAuditSubsectionId: opsAuditSubsectionId,
	}
}

// Execute executes the request
//  @return OpsAuditSubsections
func (a *OpsAuditSubsectionsAPIService) OpsAuditSubsectionsOpsAuditSubsectionIdDeleteExecute(r ApiOpsAuditSubsectionsOpsAuditSubsectionIdDeleteRequest) (*OpsAuditSubsections, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditSubsections
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditSubsectionsAPIService.OpsAuditSubsectionsOpsAuditSubsectionIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_subsections/{ops_audit_subsection_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ops_audit_subsection_id"+"}", url.PathEscape(parameterValueToString(r.opsAuditSubsectionId, "opsAuditSubsectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditSubsectionsOpsAuditSubsectionIdGetRequest struct {
	ctx context.Context
	ApiService *OpsAuditSubsectionsAPIService
	opsAuditSubsectionId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiOpsAuditSubsectionsOpsAuditSubsectionIdGetRequest) Include(include []string) ApiOpsAuditSubsectionsOpsAuditSubsectionIdGetRequest {
	r.include = &include
	return r
}

func (r ApiOpsAuditSubsectionsOpsAuditSubsectionIdGetRequest) Execute() (*OpsAuditSubsections, *http.Response, error) {
	return r.ApiService.OpsAuditSubsectionsOpsAuditSubsectionIdGetExecute(r)
}

/*
OpsAuditSubsectionsOpsAuditSubsectionIdGet Method for OpsAuditSubsectionsOpsAuditSubsectionIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param opsAuditSubsectionId Model id
 @return ApiOpsAuditSubsectionsOpsAuditSubsectionIdGetRequest
*/
func (a *OpsAuditSubsectionsAPIService) OpsAuditSubsectionsOpsAuditSubsectionIdGet(ctx context.Context, opsAuditSubsectionId int64) ApiOpsAuditSubsectionsOpsAuditSubsectionIdGetRequest {
	return ApiOpsAuditSubsectionsOpsAuditSubsectionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		opsAuditSubsectionId: opsAuditSubsectionId,
	}
}

// Execute executes the request
//  @return OpsAuditSubsections
func (a *OpsAuditSubsectionsAPIService) OpsAuditSubsectionsOpsAuditSubsectionIdGetExecute(r ApiOpsAuditSubsectionsOpsAuditSubsectionIdGetRequest) (*OpsAuditSubsections, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditSubsections
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditSubsectionsAPIService.OpsAuditSubsectionsOpsAuditSubsectionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_subsections/{ops_audit_subsection_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ops_audit_subsection_id"+"}", url.PathEscape(parameterValueToString(r.opsAuditSubsectionId, "opsAuditSubsectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditSubsectionsOpsAuditSubsectionIdPutRequest struct {
	ctx context.Context
	ApiService *OpsAuditSubsectionsAPIService
	opsAuditSubsectionId int64
	opsAuditSubsectionsPut *OpsAuditSubsectionsPut
}

func (r ApiOpsAuditSubsectionsOpsAuditSubsectionIdPutRequest) OpsAuditSubsectionsPut(opsAuditSubsectionsPut OpsAuditSubsectionsPut) ApiOpsAuditSubsectionsOpsAuditSubsectionIdPutRequest {
	r.opsAuditSubsectionsPut = &opsAuditSubsectionsPut
	return r
}

func (r ApiOpsAuditSubsectionsOpsAuditSubsectionIdPutRequest) Execute() (*OpsAuditSubsections, *http.Response, error) {
	return r.ApiService.OpsAuditSubsectionsOpsAuditSubsectionIdPutExecute(r)
}

/*
OpsAuditSubsectionsOpsAuditSubsectionIdPut Method for OpsAuditSubsectionsOpsAuditSubsectionIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param opsAuditSubsectionId Model id
 @return ApiOpsAuditSubsectionsOpsAuditSubsectionIdPutRequest
*/
func (a *OpsAuditSubsectionsAPIService) OpsAuditSubsectionsOpsAuditSubsectionIdPut(ctx context.Context, opsAuditSubsectionId int64) ApiOpsAuditSubsectionsOpsAuditSubsectionIdPutRequest {
	return ApiOpsAuditSubsectionsOpsAuditSubsectionIdPutRequest{
		ApiService: a,
		ctx: ctx,
		opsAuditSubsectionId: opsAuditSubsectionId,
	}
}

// Execute executes the request
//  @return OpsAuditSubsections
func (a *OpsAuditSubsectionsAPIService) OpsAuditSubsectionsOpsAuditSubsectionIdPutExecute(r ApiOpsAuditSubsectionsOpsAuditSubsectionIdPutRequest) (*OpsAuditSubsections, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditSubsections
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditSubsectionsAPIService.OpsAuditSubsectionsOpsAuditSubsectionIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_subsections/{ops_audit_subsection_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ops_audit_subsection_id"+"}", url.PathEscape(parameterValueToString(r.opsAuditSubsectionId, "opsAuditSubsectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.opsAuditSubsectionsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditSubsectionsPostRequest struct {
	ctx context.Context
	ApiService *OpsAuditSubsectionsAPIService
	opsAuditSubsectionsPostRequest *OpsAuditSubsectionsPostRequest
}

func (r ApiOpsAuditSubsectionsPostRequest) OpsAuditSubsectionsPostRequest(opsAuditSubsectionsPostRequest OpsAuditSubsectionsPostRequest) ApiOpsAuditSubsectionsPostRequest {
	r.opsAuditSubsectionsPostRequest = &opsAuditSubsectionsPostRequest
	return r
}

func (r ApiOpsAuditSubsectionsPostRequest) Execute() (*OpsAuditSubsectionsGet200Response, *http.Response, error) {
	return r.ApiService.OpsAuditSubsectionsPostExecute(r)
}

/*
OpsAuditSubsectionsPost Method for OpsAuditSubsectionsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOpsAuditSubsectionsPostRequest
*/
func (a *OpsAuditSubsectionsAPIService) OpsAuditSubsectionsPost(ctx context.Context) ApiOpsAuditSubsectionsPostRequest {
	return ApiOpsAuditSubsectionsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpsAuditSubsectionsGet200Response
func (a *OpsAuditSubsectionsAPIService) OpsAuditSubsectionsPostExecute(r ApiOpsAuditSubsectionsPostRequest) (*OpsAuditSubsectionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditSubsectionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditSubsectionsAPIService.OpsAuditSubsectionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_subsections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.opsAuditSubsectionsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
