/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the AllowedTeamsPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllowedTeamsPut{}

// AllowedTeamsPut struct for AllowedTeamsPut
type AllowedTeamsPut struct {
	AllowedTeam *AllowedTeamsPutAllowedTeam `json:"allowed_team,omitempty"`
	PreviousValues *AllowedTeamsPutPreviousValues `json:"previous_values,omitempty"`
}

// NewAllowedTeamsPut instantiates a new AllowedTeamsPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowedTeamsPut() *AllowedTeamsPut {
	this := AllowedTeamsPut{}
	return &this
}

// NewAllowedTeamsPutWithDefaults instantiates a new AllowedTeamsPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowedTeamsPutWithDefaults() *AllowedTeamsPut {
	this := AllowedTeamsPut{}
	return &this
}

// GetAllowedTeam returns the AllowedTeam field value if set, zero value otherwise.
func (o *AllowedTeamsPut) GetAllowedTeam() AllowedTeamsPutAllowedTeam {
	if o == nil || IsNil(o.AllowedTeam) {
		var ret AllowedTeamsPutAllowedTeam
		return ret
	}
	return *o.AllowedTeam
}

// GetAllowedTeamOk returns a tuple with the AllowedTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPut) GetAllowedTeamOk() (*AllowedTeamsPutAllowedTeam, bool) {
	if o == nil || IsNil(o.AllowedTeam) {
		return nil, false
	}
	return o.AllowedTeam, true
}

// HasAllowedTeam returns a boolean if a field has been set.
func (o *AllowedTeamsPut) HasAllowedTeam() bool {
	if o != nil && !IsNil(o.AllowedTeam) {
		return true
	}

	return false
}

// SetAllowedTeam gets a reference to the given AllowedTeamsPutAllowedTeam and assigns it to the AllowedTeam field.
func (o *AllowedTeamsPut) SetAllowedTeam(v AllowedTeamsPutAllowedTeam) {
	o.AllowedTeam = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *AllowedTeamsPut) GetPreviousValues() AllowedTeamsPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret AllowedTeamsPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPut) GetPreviousValuesOk() (*AllowedTeamsPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *AllowedTeamsPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given AllowedTeamsPutPreviousValues and assigns it to the PreviousValues field.
func (o *AllowedTeamsPut) SetPreviousValues(v AllowedTeamsPutPreviousValues) {
	o.PreviousValues = &v
}

func (o AllowedTeamsPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllowedTeamsPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedTeam) {
		toSerialize["allowed_team"] = o.AllowedTeam
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableAllowedTeamsPut struct {
	value *AllowedTeamsPut
	isSet bool
}

func (v NullableAllowedTeamsPut) Get() *AllowedTeamsPut {
	return v.value
}

func (v *NullableAllowedTeamsPut) Set(val *AllowedTeamsPut) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowedTeamsPut) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowedTeamsPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowedTeamsPut(val *AllowedTeamsPut) *NullableAllowedTeamsPut {
	return &NullableAllowedTeamsPut{value: val, isSet: true}
}

func (v NullableAllowedTeamsPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowedTeamsPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


