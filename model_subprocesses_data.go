/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubprocessesData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubprocessesData{}

// SubprocessesData struct for SubprocessesData
type SubprocessesData struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	File *string `json:"file,omitempty"`
	// Note: This is a Foreign Key to `subprocesses.id`.<fk table='subprocesses' column='id'/>
	SubprocessId int32 `json:"subprocess_id"`
	// Note: This is a Foreign Key to `processes_data.id`.<fk table='processes_data' column='id'/>
	ProcessesDatumId int32 `json:"processes_datum_id"`
	Scopes interface{} `json:"scopes,omitempty"`
}

type _SubprocessesData SubprocessesData

// NewSubprocessesData instantiates a new SubprocessesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubprocessesData(subprocessId int32, processesDatumId int32) *SubprocessesData {
	this := SubprocessesData{}
	this.SubprocessId = subprocessId
	this.ProcessesDatumId = processesDatumId
	return &this
}

// NewSubprocessesDataWithDefaults instantiates a new SubprocessesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubprocessesDataWithDefaults() *SubprocessesData {
	this := SubprocessesData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubprocessesData) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesData) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubprocessesData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SubprocessesData) SetId(v int32) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SubprocessesData) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesData) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SubprocessesData) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *SubprocessesData) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SubprocessesData) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesData) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SubprocessesData) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *SubprocessesData) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *SubprocessesData) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesData) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *SubprocessesData) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *SubprocessesData) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *SubprocessesData) GetFile() string {
	if o == nil || IsNil(o.File) {
		var ret string
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesData) GetFileOk() (*string, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *SubprocessesData) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given string and assigns it to the File field.
func (o *SubprocessesData) SetFile(v string) {
	o.File = &v
}

// GetSubprocessId returns the SubprocessId field value
func (o *SubprocessesData) GetSubprocessId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SubprocessId
}

// GetSubprocessIdOk returns a tuple with the SubprocessId field value
// and a boolean to check if the value has been set.
func (o *SubprocessesData) GetSubprocessIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubprocessId, true
}

// SetSubprocessId sets field value
func (o *SubprocessesData) SetSubprocessId(v int32) {
	o.SubprocessId = v
}

// GetProcessesDatumId returns the ProcessesDatumId field value
func (o *SubprocessesData) GetProcessesDatumId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProcessesDatumId
}

// GetProcessesDatumIdOk returns a tuple with the ProcessesDatumId field value
// and a boolean to check if the value has been set.
func (o *SubprocessesData) GetProcessesDatumIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessesDatumId, true
}

// SetProcessesDatumId sets field value
func (o *SubprocessesData) SetProcessesDatumId(v int32) {
	o.ProcessesDatumId = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubprocessesData) GetScopes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubprocessesData) GetScopesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return &o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *SubprocessesData) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given interface{} and assigns it to the Scopes field.
func (o *SubprocessesData) SetScopes(v interface{}) {
	o.Scopes = v
}

func (o SubprocessesData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubprocessesData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	toSerialize["subprocess_id"] = o.SubprocessId
	toSerialize["processes_datum_id"] = o.ProcessesDatumId
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

type NullableSubprocessesData struct {
	value *SubprocessesData
	isSet bool
}

func (v NullableSubprocessesData) Get() *SubprocessesData {
	return v.value
}

func (v *NullableSubprocessesData) Set(val *SubprocessesData) {
	v.value = val
	v.isSet = true
}

func (v NullableSubprocessesData) IsSet() bool {
	return v.isSet
}

func (v *NullableSubprocessesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubprocessesData(val *SubprocessesData) *NullableSubprocessesData {
	return &NullableSubprocessesData{value: val, isSet: true}
}

func (v NullableSubprocessesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubprocessesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


