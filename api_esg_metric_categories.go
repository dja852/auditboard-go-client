/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EsgMetricCategoriesAPIService EsgMetricCategoriesAPI service
type EsgMetricCategoriesAPIService service

type ApiEsgMetricCategoriesEsgMetricCategoryIdDeleteRequest struct {
	ctx context.Context
	ApiService *EsgMetricCategoriesAPIService
	esgMetricCategoryId int64
}

func (r ApiEsgMetricCategoriesEsgMetricCategoryIdDeleteRequest) Execute() (*EsgMetricCategories, *http.Response, error) {
	return r.ApiService.EsgMetricCategoriesEsgMetricCategoryIdDeleteExecute(r)
}

/*
EsgMetricCategoriesEsgMetricCategoryIdDelete Method for EsgMetricCategoriesEsgMetricCategoryIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricCategoryId Model id
 @return ApiEsgMetricCategoriesEsgMetricCategoryIdDeleteRequest
*/
func (a *EsgMetricCategoriesAPIService) EsgMetricCategoriesEsgMetricCategoryIdDelete(ctx context.Context, esgMetricCategoryId int64) ApiEsgMetricCategoriesEsgMetricCategoryIdDeleteRequest {
	return ApiEsgMetricCategoriesEsgMetricCategoryIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricCategoryId: esgMetricCategoryId,
	}
}

// Execute executes the request
//  @return EsgMetricCategories
func (a *EsgMetricCategoriesAPIService) EsgMetricCategoriesEsgMetricCategoryIdDeleteExecute(r ApiEsgMetricCategoriesEsgMetricCategoryIdDeleteRequest) (*EsgMetricCategories, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricCategories
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricCategoriesAPIService.EsgMetricCategoriesEsgMetricCategoryIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_categories/{esg_metric_category_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_category_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricCategoryId, "esgMetricCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricCategoriesEsgMetricCategoryIdGetRequest struct {
	ctx context.Context
	ApiService *EsgMetricCategoriesAPIService
	esgMetricCategoryId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiEsgMetricCategoriesEsgMetricCategoryIdGetRequest) Include(include []string) ApiEsgMetricCategoriesEsgMetricCategoryIdGetRequest {
	r.include = &include
	return r
}

func (r ApiEsgMetricCategoriesEsgMetricCategoryIdGetRequest) Execute() (*EsgMetricCategories, *http.Response, error) {
	return r.ApiService.EsgMetricCategoriesEsgMetricCategoryIdGetExecute(r)
}

/*
EsgMetricCategoriesEsgMetricCategoryIdGet Method for EsgMetricCategoriesEsgMetricCategoryIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricCategoryId Model id
 @return ApiEsgMetricCategoriesEsgMetricCategoryIdGetRequest
*/
func (a *EsgMetricCategoriesAPIService) EsgMetricCategoriesEsgMetricCategoryIdGet(ctx context.Context, esgMetricCategoryId int64) ApiEsgMetricCategoriesEsgMetricCategoryIdGetRequest {
	return ApiEsgMetricCategoriesEsgMetricCategoryIdGetRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricCategoryId: esgMetricCategoryId,
	}
}

// Execute executes the request
//  @return EsgMetricCategories
func (a *EsgMetricCategoriesAPIService) EsgMetricCategoriesEsgMetricCategoryIdGetExecute(r ApiEsgMetricCategoriesEsgMetricCategoryIdGetRequest) (*EsgMetricCategories, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricCategories
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricCategoriesAPIService.EsgMetricCategoriesEsgMetricCategoryIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_categories/{esg_metric_category_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_category_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricCategoryId, "esgMetricCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricCategoriesEsgMetricCategoryIdPutRequest struct {
	ctx context.Context
	ApiService *EsgMetricCategoriesAPIService
	esgMetricCategoryId int64
	esgMetricCategoriesPut *EsgMetricCategoriesPut
}

func (r ApiEsgMetricCategoriesEsgMetricCategoryIdPutRequest) EsgMetricCategoriesPut(esgMetricCategoriesPut EsgMetricCategoriesPut) ApiEsgMetricCategoriesEsgMetricCategoryIdPutRequest {
	r.esgMetricCategoriesPut = &esgMetricCategoriesPut
	return r
}

func (r ApiEsgMetricCategoriesEsgMetricCategoryIdPutRequest) Execute() (*EsgMetricCategories, *http.Response, error) {
	return r.ApiService.EsgMetricCategoriesEsgMetricCategoryIdPutExecute(r)
}

/*
EsgMetricCategoriesEsgMetricCategoryIdPut Method for EsgMetricCategoriesEsgMetricCategoryIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricCategoryId Model id
 @return ApiEsgMetricCategoriesEsgMetricCategoryIdPutRequest
*/
func (a *EsgMetricCategoriesAPIService) EsgMetricCategoriesEsgMetricCategoryIdPut(ctx context.Context, esgMetricCategoryId int64) ApiEsgMetricCategoriesEsgMetricCategoryIdPutRequest {
	return ApiEsgMetricCategoriesEsgMetricCategoryIdPutRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricCategoryId: esgMetricCategoryId,
	}
}

// Execute executes the request
//  @return EsgMetricCategories
func (a *EsgMetricCategoriesAPIService) EsgMetricCategoriesEsgMetricCategoryIdPutExecute(r ApiEsgMetricCategoriesEsgMetricCategoryIdPutRequest) (*EsgMetricCategories, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricCategories
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricCategoriesAPIService.EsgMetricCategoriesEsgMetricCategoryIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_categories/{esg_metric_category_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_category_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricCategoryId, "esgMetricCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esgMetricCategoriesPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricCategoriesGetRequest struct {
	ctx context.Context
	ApiService *EsgMetricCategoriesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiEsgMetricCategoriesGetRequest) Include(include []string) ApiEsgMetricCategoriesGetRequest {
	r.include = &include
	return r
}

func (r ApiEsgMetricCategoriesGetRequest) Execute() (*EsgMetricCategoriesGet200Response, *http.Response, error) {
	return r.ApiService.EsgMetricCategoriesGetExecute(r)
}

/*
EsgMetricCategoriesGet Method for EsgMetricCategoriesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEsgMetricCategoriesGetRequest
*/
func (a *EsgMetricCategoriesAPIService) EsgMetricCategoriesGet(ctx context.Context) ApiEsgMetricCategoriesGetRequest {
	return ApiEsgMetricCategoriesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EsgMetricCategoriesGet200Response
func (a *EsgMetricCategoriesAPIService) EsgMetricCategoriesGetExecute(r ApiEsgMetricCategoriesGetRequest) (*EsgMetricCategoriesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricCategoriesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricCategoriesAPIService.EsgMetricCategoriesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_categories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricCategoriesPostRequest struct {
	ctx context.Context
	ApiService *EsgMetricCategoriesAPIService
	esgMetricCategoriesPostRequest *EsgMetricCategoriesPostRequest
}

func (r ApiEsgMetricCategoriesPostRequest) EsgMetricCategoriesPostRequest(esgMetricCategoriesPostRequest EsgMetricCategoriesPostRequest) ApiEsgMetricCategoriesPostRequest {
	r.esgMetricCategoriesPostRequest = &esgMetricCategoriesPostRequest
	return r
}

func (r ApiEsgMetricCategoriesPostRequest) Execute() (*EsgMetricCategoriesGet200Response, *http.Response, error) {
	return r.ApiService.EsgMetricCategoriesPostExecute(r)
}

/*
EsgMetricCategoriesPost Method for EsgMetricCategoriesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEsgMetricCategoriesPostRequest
*/
func (a *EsgMetricCategoriesAPIService) EsgMetricCategoriesPost(ctx context.Context) ApiEsgMetricCategoriesPostRequest {
	return ApiEsgMetricCategoriesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EsgMetricCategoriesGet200Response
func (a *EsgMetricCategoriesAPIService) EsgMetricCategoriesPostExecute(r ApiEsgMetricCategoriesPostRequest) (*EsgMetricCategoriesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricCategoriesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricCategoriesAPIService.EsgMetricCategoriesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_categories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esgMetricCategoriesPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
