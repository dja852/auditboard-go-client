/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the FileVersionsPutPreviousValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileVersionsPutPreviousValues{}

// FileVersionsPutPreviousValues struct for FileVersionsPutPreviousValues
type FileVersionsPutPreviousValues struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	// Note: This is a Foreign Key to `files.id`.<fk table='files' column='id'/>
	FileId *int32 `json:"file_id,omitempty"`
	Name *string `json:"name,omitempty"`
	Size *string `json:"size,omitempty"`
	Type *string `json:"type,omitempty"`
	Key *string `json:"key,omitempty"`
	Url *string `json:"url,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	UploadUserId *int32 `json:"upload_user_id,omitempty"`
	StorageType *string `json:"storage_type,omitempty"`
	EmbedUrl *string `json:"embed_url,omitempty"`
	Version *int32 `json:"version,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	UserAgent *string `json:"user_agent,omitempty"`
	IsPublished *bool `json:"is_published,omitempty"`
	VersionName *string `json:"version_name,omitempty"`
}

// NewFileVersionsPutPreviousValues instantiates a new FileVersionsPutPreviousValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileVersionsPutPreviousValues() *FileVersionsPutPreviousValues {
	this := FileVersionsPutPreviousValues{}
	var storageType string = "NULL::character varying"
	this.StorageType = &storageType
	var userAgent string = "NULL::character varying"
	this.UserAgent = &userAgent
	return &this
}

// NewFileVersionsPutPreviousValuesWithDefaults instantiates a new FileVersionsPutPreviousValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileVersionsPutPreviousValuesWithDefaults() *FileVersionsPutPreviousValues {
	this := FileVersionsPutPreviousValues{}
	var storageType string = "NULL::character varying"
	this.StorageType = &storageType
	var userAgent string = "NULL::character varying"
	this.UserAgent = &userAgent
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *FileVersionsPutPreviousValues) SetId(v int32) {
	o.Id = &v
}

// GetFileId returns the FileId field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetFileId() int32 {
	if o == nil || IsNil(o.FileId) {
		var ret int32
		return ret
	}
	return *o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetFileIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FileId) {
		return nil, false
	}
	return o.FileId, true
}

// HasFileId returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasFileId() bool {
	if o != nil && !IsNil(o.FileId) {
		return true
	}

	return false
}

// SetFileId gets a reference to the given int32 and assigns it to the FileId field.
func (o *FileVersionsPutPreviousValues) SetFileId(v int32) {
	o.FileId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FileVersionsPutPreviousValues) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *FileVersionsPutPreviousValues) SetSize(v string) {
	o.Size = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FileVersionsPutPreviousValues) SetType(v string) {
	o.Type = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *FileVersionsPutPreviousValues) SetKey(v string) {
	o.Key = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *FileVersionsPutPreviousValues) SetUrl(v string) {
	o.Url = &v
}

// GetUploadUserId returns the UploadUserId field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetUploadUserId() int32 {
	if o == nil || IsNil(o.UploadUserId) {
		var ret int32
		return ret
	}
	return *o.UploadUserId
}

// GetUploadUserIdOk returns a tuple with the UploadUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetUploadUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UploadUserId) {
		return nil, false
	}
	return o.UploadUserId, true
}

// HasUploadUserId returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasUploadUserId() bool {
	if o != nil && !IsNil(o.UploadUserId) {
		return true
	}

	return false
}

// SetUploadUserId gets a reference to the given int32 and assigns it to the UploadUserId field.
func (o *FileVersionsPutPreviousValues) SetUploadUserId(v int32) {
	o.UploadUserId = &v
}

// GetStorageType returns the StorageType field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetStorageType() string {
	if o == nil || IsNil(o.StorageType) {
		var ret string
		return ret
	}
	return *o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetStorageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StorageType) {
		return nil, false
	}
	return o.StorageType, true
}

// HasStorageType returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasStorageType() bool {
	if o != nil && !IsNil(o.StorageType) {
		return true
	}

	return false
}

// SetStorageType gets a reference to the given string and assigns it to the StorageType field.
func (o *FileVersionsPutPreviousValues) SetStorageType(v string) {
	o.StorageType = &v
}

// GetEmbedUrl returns the EmbedUrl field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetEmbedUrl() string {
	if o == nil || IsNil(o.EmbedUrl) {
		var ret string
		return ret
	}
	return *o.EmbedUrl
}

// GetEmbedUrlOk returns a tuple with the EmbedUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetEmbedUrlOk() (*string, bool) {
	if o == nil || IsNil(o.EmbedUrl) {
		return nil, false
	}
	return o.EmbedUrl, true
}

// HasEmbedUrl returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasEmbedUrl() bool {
	if o != nil && !IsNil(o.EmbedUrl) {
		return true
	}

	return false
}

// SetEmbedUrl gets a reference to the given string and assigns it to the EmbedUrl field.
func (o *FileVersionsPutPreviousValues) SetEmbedUrl(v string) {
	o.EmbedUrl = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *FileVersionsPutPreviousValues) SetVersion(v int32) {
	o.Version = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *FileVersionsPutPreviousValues) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *FileVersionsPutPreviousValues) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *FileVersionsPutPreviousValues) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetUserAgent() string {
	if o == nil || IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetUserAgentOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasUserAgent() bool {
	if o != nil && !IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *FileVersionsPutPreviousValues) SetUserAgent(v string) {
	o.UserAgent = &v
}

// GetIsPublished returns the IsPublished field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetIsPublished() bool {
	if o == nil || IsNil(o.IsPublished) {
		var ret bool
		return ret
	}
	return *o.IsPublished
}

// GetIsPublishedOk returns a tuple with the IsPublished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetIsPublishedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublished) {
		return nil, false
	}
	return o.IsPublished, true
}

// HasIsPublished returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasIsPublished() bool {
	if o != nil && !IsNil(o.IsPublished) {
		return true
	}

	return false
}

// SetIsPublished gets a reference to the given bool and assigns it to the IsPublished field.
func (o *FileVersionsPutPreviousValues) SetIsPublished(v bool) {
	o.IsPublished = &v
}

// GetVersionName returns the VersionName field value if set, zero value otherwise.
func (o *FileVersionsPutPreviousValues) GetVersionName() string {
	if o == nil || IsNil(o.VersionName) {
		var ret string
		return ret
	}
	return *o.VersionName
}

// GetVersionNameOk returns a tuple with the VersionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersionsPutPreviousValues) GetVersionNameOk() (*string, bool) {
	if o == nil || IsNil(o.VersionName) {
		return nil, false
	}
	return o.VersionName, true
}

// HasVersionName returns a boolean if a field has been set.
func (o *FileVersionsPutPreviousValues) HasVersionName() bool {
	if o != nil && !IsNil(o.VersionName) {
		return true
	}

	return false
}

// SetVersionName gets a reference to the given string and assigns it to the VersionName field.
func (o *FileVersionsPutPreviousValues) SetVersionName(v string) {
	o.VersionName = &v
}

func (o FileVersionsPutPreviousValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileVersionsPutPreviousValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.FileId) {
		toSerialize["file_id"] = o.FileId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.UploadUserId) {
		toSerialize["upload_user_id"] = o.UploadUserId
	}
	if !IsNil(o.StorageType) {
		toSerialize["storage_type"] = o.StorageType
	}
	if !IsNil(o.EmbedUrl) {
		toSerialize["embed_url"] = o.EmbedUrl
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.UserAgent) {
		toSerialize["user_agent"] = o.UserAgent
	}
	if !IsNil(o.IsPublished) {
		toSerialize["is_published"] = o.IsPublished
	}
	if !IsNil(o.VersionName) {
		toSerialize["version_name"] = o.VersionName
	}
	return toSerialize, nil
}

type NullableFileVersionsPutPreviousValues struct {
	value *FileVersionsPutPreviousValues
	isSet bool
}

func (v NullableFileVersionsPutPreviousValues) Get() *FileVersionsPutPreviousValues {
	return v.value
}

func (v *NullableFileVersionsPutPreviousValues) Set(val *FileVersionsPutPreviousValues) {
	v.value = val
	v.isSet = true
}

func (v NullableFileVersionsPutPreviousValues) IsSet() bool {
	return v.isSet
}

func (v *NullableFileVersionsPutPreviousValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileVersionsPutPreviousValues(val *FileVersionsPutPreviousValues) *NullableFileVersionsPutPreviousValues {
	return &NullableFileVersionsPutPreviousValues{value: val, isSet: true}
}

func (v NullableFileVersionsPutPreviousValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileVersionsPutPreviousValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


