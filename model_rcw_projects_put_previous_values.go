/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the RcwProjectsPutPreviousValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RcwProjectsPutPreviousValues{}

// RcwProjectsPutPreviousValues struct for RcwProjectsPutPreviousValues
type RcwProjectsPutPreviousValues struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Status *string `json:"status,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	CreatedByUserId *int32 `json:"created_by_user_id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	LaunchDate *string `json:"launch_date,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	LaunchByUserId *int32 `json:"launch_by_user_id,omitempty"`
	CompletedDate *string `json:"completed_date,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	CompletedByUserId *int32 `json:"completed_by_user_id,omitempty"`
	DueDate *string `json:"due_date,omitempty"`
	PeriodStart *string `json:"period_start,omitempty"`
	PeriodEnd *string `json:"period_end,omitempty"`
	Totals interface{} `json:"totals,omitempty"`
	Type *string `json:"type,omitempty"`
	IsDraft *bool `json:"is_draft,omitempty"`
}

// NewRcwProjectsPutPreviousValues instantiates a new RcwProjectsPutPreviousValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRcwProjectsPutPreviousValues() *RcwProjectsPutPreviousValues {
	this := RcwProjectsPutPreviousValues{}
	var type_ string = "Generic"
	this.Type = &type_
	var isDraft bool = true
	this.IsDraft = &isDraft
	return &this
}

// NewRcwProjectsPutPreviousValuesWithDefaults instantiates a new RcwProjectsPutPreviousValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRcwProjectsPutPreviousValuesWithDefaults() *RcwProjectsPutPreviousValues {
	this := RcwProjectsPutPreviousValues{}
	var type_ string = "Generic"
	this.Type = &type_
	var isDraft bool = true
	this.IsDraft = &isDraft
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RcwProjectsPutPreviousValues) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RcwProjectsPutPreviousValues) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RcwProjectsPutPreviousValues) SetStatus(v string) {
	o.Status = &v
}

// GetCreatedByUserId returns the CreatedByUserId field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetCreatedByUserId() int32 {
	if o == nil || IsNil(o.CreatedByUserId) {
		var ret int32
		return ret
	}
	return *o.CreatedByUserId
}

// GetCreatedByUserIdOk returns a tuple with the CreatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetCreatedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedByUserId) {
		return nil, false
	}
	return o.CreatedByUserId, true
}

// HasCreatedByUserId returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasCreatedByUserId() bool {
	if o != nil && !IsNil(o.CreatedByUserId) {
		return true
	}

	return false
}

// SetCreatedByUserId gets a reference to the given int32 and assigns it to the CreatedByUserId field.
func (o *RcwProjectsPutPreviousValues) SetCreatedByUserId(v int32) {
	o.CreatedByUserId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *RcwProjectsPutPreviousValues) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *RcwProjectsPutPreviousValues) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *RcwProjectsPutPreviousValues) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetLaunchDate returns the LaunchDate field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetLaunchDate() string {
	if o == nil || IsNil(o.LaunchDate) {
		var ret string
		return ret
	}
	return *o.LaunchDate
}

// GetLaunchDateOk returns a tuple with the LaunchDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetLaunchDateOk() (*string, bool) {
	if o == nil || IsNil(o.LaunchDate) {
		return nil, false
	}
	return o.LaunchDate, true
}

// HasLaunchDate returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasLaunchDate() bool {
	if o != nil && !IsNil(o.LaunchDate) {
		return true
	}

	return false
}

// SetLaunchDate gets a reference to the given string and assigns it to the LaunchDate field.
func (o *RcwProjectsPutPreviousValues) SetLaunchDate(v string) {
	o.LaunchDate = &v
}

// GetLaunchByUserId returns the LaunchByUserId field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetLaunchByUserId() int32 {
	if o == nil || IsNil(o.LaunchByUserId) {
		var ret int32
		return ret
	}
	return *o.LaunchByUserId
}

// GetLaunchByUserIdOk returns a tuple with the LaunchByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetLaunchByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LaunchByUserId) {
		return nil, false
	}
	return o.LaunchByUserId, true
}

// HasLaunchByUserId returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasLaunchByUserId() bool {
	if o != nil && !IsNil(o.LaunchByUserId) {
		return true
	}

	return false
}

// SetLaunchByUserId gets a reference to the given int32 and assigns it to the LaunchByUserId field.
func (o *RcwProjectsPutPreviousValues) SetLaunchByUserId(v int32) {
	o.LaunchByUserId = &v
}

// GetCompletedDate returns the CompletedDate field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetCompletedDate() string {
	if o == nil || IsNil(o.CompletedDate) {
		var ret string
		return ret
	}
	return *o.CompletedDate
}

// GetCompletedDateOk returns a tuple with the CompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetCompletedDateOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedDate) {
		return nil, false
	}
	return o.CompletedDate, true
}

// HasCompletedDate returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasCompletedDate() bool {
	if o != nil && !IsNil(o.CompletedDate) {
		return true
	}

	return false
}

// SetCompletedDate gets a reference to the given string and assigns it to the CompletedDate field.
func (o *RcwProjectsPutPreviousValues) SetCompletedDate(v string) {
	o.CompletedDate = &v
}

// GetCompletedByUserId returns the CompletedByUserId field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetCompletedByUserId() int32 {
	if o == nil || IsNil(o.CompletedByUserId) {
		var ret int32
		return ret
	}
	return *o.CompletedByUserId
}

// GetCompletedByUserIdOk returns a tuple with the CompletedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetCompletedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CompletedByUserId) {
		return nil, false
	}
	return o.CompletedByUserId, true
}

// HasCompletedByUserId returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasCompletedByUserId() bool {
	if o != nil && !IsNil(o.CompletedByUserId) {
		return true
	}

	return false
}

// SetCompletedByUserId gets a reference to the given int32 and assigns it to the CompletedByUserId field.
func (o *RcwProjectsPutPreviousValues) SetCompletedByUserId(v int32) {
	o.CompletedByUserId = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *RcwProjectsPutPreviousValues) SetDueDate(v string) {
	o.DueDate = &v
}

// GetPeriodStart returns the PeriodStart field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetPeriodStart() string {
	if o == nil || IsNil(o.PeriodStart) {
		var ret string
		return ret
	}
	return *o.PeriodStart
}

// GetPeriodStartOk returns a tuple with the PeriodStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetPeriodStartOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodStart) {
		return nil, false
	}
	return o.PeriodStart, true
}

// HasPeriodStart returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasPeriodStart() bool {
	if o != nil && !IsNil(o.PeriodStart) {
		return true
	}

	return false
}

// SetPeriodStart gets a reference to the given string and assigns it to the PeriodStart field.
func (o *RcwProjectsPutPreviousValues) SetPeriodStart(v string) {
	o.PeriodStart = &v
}

// GetPeriodEnd returns the PeriodEnd field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetPeriodEnd() string {
	if o == nil || IsNil(o.PeriodEnd) {
		var ret string
		return ret
	}
	return *o.PeriodEnd
}

// GetPeriodEndOk returns a tuple with the PeriodEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetPeriodEndOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodEnd) {
		return nil, false
	}
	return o.PeriodEnd, true
}

// HasPeriodEnd returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasPeriodEnd() bool {
	if o != nil && !IsNil(o.PeriodEnd) {
		return true
	}

	return false
}

// SetPeriodEnd gets a reference to the given string and assigns it to the PeriodEnd field.
func (o *RcwProjectsPutPreviousValues) SetPeriodEnd(v string) {
	o.PeriodEnd = &v
}

// GetTotals returns the Totals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RcwProjectsPutPreviousValues) GetTotals() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Totals
}

// GetTotalsOk returns a tuple with the Totals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RcwProjectsPutPreviousValues) GetTotalsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Totals) {
		return nil, false
	}
	return &o.Totals, true
}

// HasTotals returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasTotals() bool {
	if o != nil && !IsNil(o.Totals) {
		return true
	}

	return false
}

// SetTotals gets a reference to the given interface{} and assigns it to the Totals field.
func (o *RcwProjectsPutPreviousValues) SetTotals(v interface{}) {
	o.Totals = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RcwProjectsPutPreviousValues) SetType(v string) {
	o.Type = &v
}

// GetIsDraft returns the IsDraft field value if set, zero value otherwise.
func (o *RcwProjectsPutPreviousValues) GetIsDraft() bool {
	if o == nil || IsNil(o.IsDraft) {
		var ret bool
		return ret
	}
	return *o.IsDraft
}

// GetIsDraftOk returns a tuple with the IsDraft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPutPreviousValues) GetIsDraftOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDraft) {
		return nil, false
	}
	return o.IsDraft, true
}

// HasIsDraft returns a boolean if a field has been set.
func (o *RcwProjectsPutPreviousValues) HasIsDraft() bool {
	if o != nil && !IsNil(o.IsDraft) {
		return true
	}

	return false
}

// SetIsDraft gets a reference to the given bool and assigns it to the IsDraft field.
func (o *RcwProjectsPutPreviousValues) SetIsDraft(v bool) {
	o.IsDraft = &v
}

func (o RcwProjectsPutPreviousValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RcwProjectsPutPreviousValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreatedByUserId) {
		toSerialize["created_by_user_id"] = o.CreatedByUserId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.LaunchDate) {
		toSerialize["launch_date"] = o.LaunchDate
	}
	if !IsNil(o.LaunchByUserId) {
		toSerialize["launch_by_user_id"] = o.LaunchByUserId
	}
	if !IsNil(o.CompletedDate) {
		toSerialize["completed_date"] = o.CompletedDate
	}
	if !IsNil(o.CompletedByUserId) {
		toSerialize["completed_by_user_id"] = o.CompletedByUserId
	}
	if !IsNil(o.DueDate) {
		toSerialize["due_date"] = o.DueDate
	}
	if !IsNil(o.PeriodStart) {
		toSerialize["period_start"] = o.PeriodStart
	}
	if !IsNil(o.PeriodEnd) {
		toSerialize["period_end"] = o.PeriodEnd
	}
	if o.Totals != nil {
		toSerialize["totals"] = o.Totals
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.IsDraft) {
		toSerialize["is_draft"] = o.IsDraft
	}
	return toSerialize, nil
}

type NullableRcwProjectsPutPreviousValues struct {
	value *RcwProjectsPutPreviousValues
	isSet bool
}

func (v NullableRcwProjectsPutPreviousValues) Get() *RcwProjectsPutPreviousValues {
	return v.value
}

func (v *NullableRcwProjectsPutPreviousValues) Set(val *RcwProjectsPutPreviousValues) {
	v.value = val
	v.isSet = true
}

func (v NullableRcwProjectsPutPreviousValues) IsSet() bool {
	return v.isSet
}

func (v *NullableRcwProjectsPutPreviousValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRcwProjectsPutPreviousValues(val *RcwProjectsPutPreviousValues) *NullableRcwProjectsPutPreviousValues {
	return &NullableRcwProjectsPutPreviousValues{value: val, isSet: true}
}

func (v NullableRcwProjectsPutPreviousValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRcwProjectsPutPreviousValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


