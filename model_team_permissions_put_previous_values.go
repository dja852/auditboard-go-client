/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the TeamPermissionsPutPreviousValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamPermissionsPutPreviousValues{}

// TeamPermissionsPutPreviousValues struct for TeamPermissionsPutPreviousValues
type TeamPermissionsPutPreviousValues struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	// Note: This is a Foreign Key to `teams.id`.<fk table='teams' column='id'/>
	TeamId *int32 `json:"team_id,omitempty"`
	// Note: This is a Foreign Key to `global_permissions.id`.<fk table='global_permissions' column='id'/>
	GlobalPermissionId *int32 `json:"global_permission_id,omitempty"`
	Section *string `json:"section,omitempty"`
	Key *string `json:"key,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewTeamPermissionsPutPreviousValues instantiates a new TeamPermissionsPutPreviousValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamPermissionsPutPreviousValues() *TeamPermissionsPutPreviousValues {
	this := TeamPermissionsPutPreviousValues{}
	return &this
}

// NewTeamPermissionsPutPreviousValuesWithDefaults instantiates a new TeamPermissionsPutPreviousValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamPermissionsPutPreviousValuesWithDefaults() *TeamPermissionsPutPreviousValues {
	this := TeamPermissionsPutPreviousValues{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TeamPermissionsPutPreviousValues) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPermissionsPutPreviousValues) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TeamPermissionsPutPreviousValues) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TeamPermissionsPutPreviousValues) SetId(v int32) {
	o.Id = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *TeamPermissionsPutPreviousValues) GetTeamId() int32 {
	if o == nil || IsNil(o.TeamId) {
		var ret int32
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPermissionsPutPreviousValues) GetTeamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *TeamPermissionsPutPreviousValues) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given int32 and assigns it to the TeamId field.
func (o *TeamPermissionsPutPreviousValues) SetTeamId(v int32) {
	o.TeamId = &v
}

// GetGlobalPermissionId returns the GlobalPermissionId field value if set, zero value otherwise.
func (o *TeamPermissionsPutPreviousValues) GetGlobalPermissionId() int32 {
	if o == nil || IsNil(o.GlobalPermissionId) {
		var ret int32
		return ret
	}
	return *o.GlobalPermissionId
}

// GetGlobalPermissionIdOk returns a tuple with the GlobalPermissionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPermissionsPutPreviousValues) GetGlobalPermissionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.GlobalPermissionId) {
		return nil, false
	}
	return o.GlobalPermissionId, true
}

// HasGlobalPermissionId returns a boolean if a field has been set.
func (o *TeamPermissionsPutPreviousValues) HasGlobalPermissionId() bool {
	if o != nil && !IsNil(o.GlobalPermissionId) {
		return true
	}

	return false
}

// SetGlobalPermissionId gets a reference to the given int32 and assigns it to the GlobalPermissionId field.
func (o *TeamPermissionsPutPreviousValues) SetGlobalPermissionId(v int32) {
	o.GlobalPermissionId = &v
}

// GetSection returns the Section field value if set, zero value otherwise.
func (o *TeamPermissionsPutPreviousValues) GetSection() string {
	if o == nil || IsNil(o.Section) {
		var ret string
		return ret
	}
	return *o.Section
}

// GetSectionOk returns a tuple with the Section field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPermissionsPutPreviousValues) GetSectionOk() (*string, bool) {
	if o == nil || IsNil(o.Section) {
		return nil, false
	}
	return o.Section, true
}

// HasSection returns a boolean if a field has been set.
func (o *TeamPermissionsPutPreviousValues) HasSection() bool {
	if o != nil && !IsNil(o.Section) {
		return true
	}

	return false
}

// SetSection gets a reference to the given string and assigns it to the Section field.
func (o *TeamPermissionsPutPreviousValues) SetSection(v string) {
	o.Section = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *TeamPermissionsPutPreviousValues) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPermissionsPutPreviousValues) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *TeamPermissionsPutPreviousValues) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *TeamPermissionsPutPreviousValues) SetKey(v string) {
	o.Key = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TeamPermissionsPutPreviousValues) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPermissionsPutPreviousValues) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TeamPermissionsPutPreviousValues) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *TeamPermissionsPutPreviousValues) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TeamPermissionsPutPreviousValues) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPermissionsPutPreviousValues) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TeamPermissionsPutPreviousValues) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *TeamPermissionsPutPreviousValues) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o TeamPermissionsPutPreviousValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamPermissionsPutPreviousValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TeamId) {
		toSerialize["team_id"] = o.TeamId
	}
	if !IsNil(o.GlobalPermissionId) {
		toSerialize["global_permission_id"] = o.GlobalPermissionId
	}
	if !IsNil(o.Section) {
		toSerialize["section"] = o.Section
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableTeamPermissionsPutPreviousValues struct {
	value *TeamPermissionsPutPreviousValues
	isSet bool
}

func (v NullableTeamPermissionsPutPreviousValues) Get() *TeamPermissionsPutPreviousValues {
	return v.value
}

func (v *NullableTeamPermissionsPutPreviousValues) Set(val *TeamPermissionsPutPreviousValues) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamPermissionsPutPreviousValues) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamPermissionsPutPreviousValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamPermissionsPutPreviousValues(val *TeamPermissionsPutPreviousValues) *NullableTeamPermissionsPutPreviousValues {
	return &NullableTeamPermissionsPutPreviousValues{value: val, isSet: true}
}

func (v NullableTeamPermissionsPutPreviousValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamPermissionsPutPreviousValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


