/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the RolesGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RolesGet200Response{}

// RolesGet200Response struct for RolesGet200Response
type RolesGet200Response struct {
	Roles []Roles `json:"roles,omitempty"`
}

// NewRolesGet200Response instantiates a new RolesGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolesGet200Response() *RolesGet200Response {
	this := RolesGet200Response{}
	return &this
}

// NewRolesGet200ResponseWithDefaults instantiates a new RolesGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolesGet200ResponseWithDefaults() *RolesGet200Response {
	this := RolesGet200Response{}
	return &this
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *RolesGet200Response) GetRoles() []Roles {
	if o == nil || IsNil(o.Roles) {
		var ret []Roles
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesGet200Response) GetRolesOk() ([]Roles, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *RolesGet200Response) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []Roles and assigns it to the Roles field.
func (o *RolesGet200Response) SetRoles(v []Roles) {
	o.Roles = v
}

func (o RolesGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RolesGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableRolesGet200Response struct {
	value *RolesGet200Response
	isSet bool
}

func (v NullableRolesGet200Response) Get() *RolesGet200Response {
	return v.value
}

func (v *NullableRolesGet200Response) Set(val *RolesGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRolesGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRolesGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolesGet200Response(val *RolesGet200Response) *NullableRolesGet200Response {
	return &NullableRolesGet200Response{value: val, isSet: true}
}

func (v NullableRolesGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolesGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


