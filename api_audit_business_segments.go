/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AuditBusinessSegmentsAPIService AuditBusinessSegmentsAPI service
type AuditBusinessSegmentsAPIService service

type ApiAuditBusinessSegmentsAuditBusinessSegmentIdDeleteRequest struct {
	ctx context.Context
	ApiService *AuditBusinessSegmentsAPIService
	auditBusinessSegmentId int64
}

func (r ApiAuditBusinessSegmentsAuditBusinessSegmentIdDeleteRequest) Execute() (*AuditBusinessSegments, *http.Response, error) {
	return r.ApiService.AuditBusinessSegmentsAuditBusinessSegmentIdDeleteExecute(r)
}

/*
AuditBusinessSegmentsAuditBusinessSegmentIdDelete Method for AuditBusinessSegmentsAuditBusinessSegmentIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditBusinessSegmentId Model id
 @return ApiAuditBusinessSegmentsAuditBusinessSegmentIdDeleteRequest
*/
func (a *AuditBusinessSegmentsAPIService) AuditBusinessSegmentsAuditBusinessSegmentIdDelete(ctx context.Context, auditBusinessSegmentId int64) ApiAuditBusinessSegmentsAuditBusinessSegmentIdDeleteRequest {
	return ApiAuditBusinessSegmentsAuditBusinessSegmentIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		auditBusinessSegmentId: auditBusinessSegmentId,
	}
}

// Execute executes the request
//  @return AuditBusinessSegments
func (a *AuditBusinessSegmentsAPIService) AuditBusinessSegmentsAuditBusinessSegmentIdDeleteExecute(r ApiAuditBusinessSegmentsAuditBusinessSegmentIdDeleteRequest) (*AuditBusinessSegments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditBusinessSegments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditBusinessSegmentsAPIService.AuditBusinessSegmentsAuditBusinessSegmentIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_business_segments/{audit_business_segment_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_business_segment_id"+"}", url.PathEscape(parameterValueToString(r.auditBusinessSegmentId, "auditBusinessSegmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditBusinessSegmentsAuditBusinessSegmentIdGetRequest struct {
	ctx context.Context
	ApiService *AuditBusinessSegmentsAPIService
	auditBusinessSegmentId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditBusinessSegmentsAuditBusinessSegmentIdGetRequest) Include(include []string) ApiAuditBusinessSegmentsAuditBusinessSegmentIdGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditBusinessSegmentsAuditBusinessSegmentIdGetRequest) Execute() (*AuditBusinessSegments, *http.Response, error) {
	return r.ApiService.AuditBusinessSegmentsAuditBusinessSegmentIdGetExecute(r)
}

/*
AuditBusinessSegmentsAuditBusinessSegmentIdGet Method for AuditBusinessSegmentsAuditBusinessSegmentIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditBusinessSegmentId Model id
 @return ApiAuditBusinessSegmentsAuditBusinessSegmentIdGetRequest
*/
func (a *AuditBusinessSegmentsAPIService) AuditBusinessSegmentsAuditBusinessSegmentIdGet(ctx context.Context, auditBusinessSegmentId int64) ApiAuditBusinessSegmentsAuditBusinessSegmentIdGetRequest {
	return ApiAuditBusinessSegmentsAuditBusinessSegmentIdGetRequest{
		ApiService: a,
		ctx: ctx,
		auditBusinessSegmentId: auditBusinessSegmentId,
	}
}

// Execute executes the request
//  @return AuditBusinessSegments
func (a *AuditBusinessSegmentsAPIService) AuditBusinessSegmentsAuditBusinessSegmentIdGetExecute(r ApiAuditBusinessSegmentsAuditBusinessSegmentIdGetRequest) (*AuditBusinessSegments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditBusinessSegments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditBusinessSegmentsAPIService.AuditBusinessSegmentsAuditBusinessSegmentIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_business_segments/{audit_business_segment_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_business_segment_id"+"}", url.PathEscape(parameterValueToString(r.auditBusinessSegmentId, "auditBusinessSegmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditBusinessSegmentsAuditBusinessSegmentIdPutRequest struct {
	ctx context.Context
	ApiService *AuditBusinessSegmentsAPIService
	auditBusinessSegmentId int64
	auditBusinessSegmentsPut *AuditBusinessSegmentsPut
}

func (r ApiAuditBusinessSegmentsAuditBusinessSegmentIdPutRequest) AuditBusinessSegmentsPut(auditBusinessSegmentsPut AuditBusinessSegmentsPut) ApiAuditBusinessSegmentsAuditBusinessSegmentIdPutRequest {
	r.auditBusinessSegmentsPut = &auditBusinessSegmentsPut
	return r
}

func (r ApiAuditBusinessSegmentsAuditBusinessSegmentIdPutRequest) Execute() (*AuditBusinessSegments, *http.Response, error) {
	return r.ApiService.AuditBusinessSegmentsAuditBusinessSegmentIdPutExecute(r)
}

/*
AuditBusinessSegmentsAuditBusinessSegmentIdPut Method for AuditBusinessSegmentsAuditBusinessSegmentIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditBusinessSegmentId Model id
 @return ApiAuditBusinessSegmentsAuditBusinessSegmentIdPutRequest
*/
func (a *AuditBusinessSegmentsAPIService) AuditBusinessSegmentsAuditBusinessSegmentIdPut(ctx context.Context, auditBusinessSegmentId int64) ApiAuditBusinessSegmentsAuditBusinessSegmentIdPutRequest {
	return ApiAuditBusinessSegmentsAuditBusinessSegmentIdPutRequest{
		ApiService: a,
		ctx: ctx,
		auditBusinessSegmentId: auditBusinessSegmentId,
	}
}

// Execute executes the request
//  @return AuditBusinessSegments
func (a *AuditBusinessSegmentsAPIService) AuditBusinessSegmentsAuditBusinessSegmentIdPutExecute(r ApiAuditBusinessSegmentsAuditBusinessSegmentIdPutRequest) (*AuditBusinessSegments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditBusinessSegments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditBusinessSegmentsAPIService.AuditBusinessSegmentsAuditBusinessSegmentIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_business_segments/{audit_business_segment_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_business_segment_id"+"}", url.PathEscape(parameterValueToString(r.auditBusinessSegmentId, "auditBusinessSegmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditBusinessSegmentsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditBusinessSegmentsGetRequest struct {
	ctx context.Context
	ApiService *AuditBusinessSegmentsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditBusinessSegmentsGetRequest) Include(include []string) ApiAuditBusinessSegmentsGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditBusinessSegmentsGetRequest) Execute() (*AuditBusinessSegmentsGet200Response, *http.Response, error) {
	return r.ApiService.AuditBusinessSegmentsGetExecute(r)
}

/*
AuditBusinessSegmentsGet Method for AuditBusinessSegmentsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditBusinessSegmentsGetRequest
*/
func (a *AuditBusinessSegmentsAPIService) AuditBusinessSegmentsGet(ctx context.Context) ApiAuditBusinessSegmentsGetRequest {
	return ApiAuditBusinessSegmentsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditBusinessSegmentsGet200Response
func (a *AuditBusinessSegmentsAPIService) AuditBusinessSegmentsGetExecute(r ApiAuditBusinessSegmentsGetRequest) (*AuditBusinessSegmentsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditBusinessSegmentsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditBusinessSegmentsAPIService.AuditBusinessSegmentsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_business_segments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditBusinessSegmentsPostRequest struct {
	ctx context.Context
	ApiService *AuditBusinessSegmentsAPIService
	auditBusinessSegmentsPostRequest *AuditBusinessSegmentsPostRequest
}

func (r ApiAuditBusinessSegmentsPostRequest) AuditBusinessSegmentsPostRequest(auditBusinessSegmentsPostRequest AuditBusinessSegmentsPostRequest) ApiAuditBusinessSegmentsPostRequest {
	r.auditBusinessSegmentsPostRequest = &auditBusinessSegmentsPostRequest
	return r
}

func (r ApiAuditBusinessSegmentsPostRequest) Execute() (*AuditBusinessSegmentsGet200Response, *http.Response, error) {
	return r.ApiService.AuditBusinessSegmentsPostExecute(r)
}

/*
AuditBusinessSegmentsPost Method for AuditBusinessSegmentsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditBusinessSegmentsPostRequest
*/
func (a *AuditBusinessSegmentsAPIService) AuditBusinessSegmentsPost(ctx context.Context) ApiAuditBusinessSegmentsPostRequest {
	return ApiAuditBusinessSegmentsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditBusinessSegmentsGet200Response
func (a *AuditBusinessSegmentsAPIService) AuditBusinessSegmentsPostExecute(r ApiAuditBusinessSegmentsPostRequest) (*AuditBusinessSegmentsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditBusinessSegmentsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditBusinessSegmentsAPIService.AuditBusinessSegmentsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_business_segments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditBusinessSegmentsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
