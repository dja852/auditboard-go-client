/*
AuditBoard Developer Portal API Documentation

Testing OpsAuditsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package auditboard

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/dja852/auditboard-go-client"
)

func Test_auditboard_OpsAuditsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OpsAuditsAPIService OpsAuditsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OpsAuditsAPI.OpsAuditsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OpsAuditsAPIService OpsAuditsIdClonePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.OpsAuditsAPI.OpsAuditsIdClonePost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OpsAuditsAPIService OpsAuditsOpsAuditIdCancelPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var opsAuditId int64

		resp, httpRes, err := apiClient.OpsAuditsAPI.OpsAuditsOpsAuditIdCancelPut(context.Background(), opsAuditId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OpsAuditsAPIService OpsAuditsOpsAuditIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var opsAuditId int64

		resp, httpRes, err := apiClient.OpsAuditsAPI.OpsAuditsOpsAuditIdDelete(context.Background(), opsAuditId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OpsAuditsAPIService OpsAuditsOpsAuditIdExportAuditFormsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var opsAuditId int64

		resp, httpRes, err := apiClient.OpsAuditsAPI.OpsAuditsOpsAuditIdExportAuditFormsPost(context.Background(), opsAuditId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OpsAuditsAPIService OpsAuditsOpsAuditIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var opsAuditId int64

		resp, httpRes, err := apiClient.OpsAuditsAPI.OpsAuditsOpsAuditIdGet(context.Background(), opsAuditId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OpsAuditsAPIService OpsAuditsOpsAuditIdMergePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var opsAuditId int64

		resp, httpRes, err := apiClient.OpsAuditsAPI.OpsAuditsOpsAuditIdMergePost(context.Background(), opsAuditId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OpsAuditsAPIService OpsAuditsOpsAuditIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var opsAuditId int64

		resp, httpRes, err := apiClient.OpsAuditsAPI.OpsAuditsOpsAuditIdPut(context.Background(), opsAuditId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OpsAuditsAPIService OpsAuditsOpsAuditIdStartPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var opsAuditId int64

		resp, httpRes, err := apiClient.OpsAuditsAPI.OpsAuditsOpsAuditIdStartPut(context.Background(), opsAuditId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OpsAuditsAPIService OpsAuditsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OpsAuditsAPI.OpsAuditsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
