/*
AuditBoard Developer Portal API Documentation

Testing EsgMetricFrequencyOptionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package auditboard

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/dja852/auditboard-go-client"
)

func Test_auditboard_EsgMetricFrequencyOptionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EsgMetricFrequencyOptionsAPIService EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var esgMetricFrequencyOptionId int64

		resp, httpRes, err := apiClient.EsgMetricFrequencyOptionsAPI.EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdDelete(context.Background(), esgMetricFrequencyOptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EsgMetricFrequencyOptionsAPIService EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var esgMetricFrequencyOptionId int64

		resp, httpRes, err := apiClient.EsgMetricFrequencyOptionsAPI.EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGet(context.Background(), esgMetricFrequencyOptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EsgMetricFrequencyOptionsAPIService EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var esgMetricFrequencyOptionId int64

		resp, httpRes, err := apiClient.EsgMetricFrequencyOptionsAPI.EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPut(context.Background(), esgMetricFrequencyOptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EsgMetricFrequencyOptionsAPIService EsgMetricFrequencyOptionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EsgMetricFrequencyOptionsAPI.EsgMetricFrequencyOptionsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EsgMetricFrequencyOptionsAPIService EsgMetricFrequencyOptionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EsgMetricFrequencyOptionsAPI.EsgMetricFrequencyOptionsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
