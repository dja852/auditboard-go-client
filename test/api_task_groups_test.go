/*
AuditBoard Developer Portal API Documentation

Testing TaskGroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package auditboard

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/dja852/auditboard-go-client"
)

func Test_auditboard_TaskGroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TaskGroupsAPIService TaskGroupsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TaskGroupsAPI.TaskGroupsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskGroupsAPIService TaskGroupsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TaskGroupsAPI.TaskGroupsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskGroupsAPIService TaskGroupsTaskGroupIdBulkEnableItemsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskGroupId int64

		resp, httpRes, err := apiClient.TaskGroupsAPI.TaskGroupsTaskGroupIdBulkEnableItemsPut(context.Background(), taskGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskGroupsAPIService TaskGroupsTaskGroupIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskGroupId int64

		resp, httpRes, err := apiClient.TaskGroupsAPI.TaskGroupsTaskGroupIdDelete(context.Background(), taskGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskGroupsAPIService TaskGroupsTaskGroupIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskGroupId int64

		resp, httpRes, err := apiClient.TaskGroupsAPI.TaskGroupsTaskGroupIdGet(context.Background(), taskGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskGroupsAPIService TaskGroupsTaskGroupIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskGroupId int64

		resp, httpRes, err := apiClient.TaskGroupsAPI.TaskGroupsTaskGroupIdPut(context.Background(), taskGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskGroupsAPIService TaskGroupsTaskGroupIdStartPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskGroupId int64

		resp, httpRes, err := apiClient.TaskGroupsAPI.TaskGroupsTaskGroupIdStartPut(context.Background(), taskGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
