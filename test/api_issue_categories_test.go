/*
AuditBoard Developer Portal API Documentation

Testing IssueCategoriesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package auditboard

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/dja852/auditboard-go-client"
)

func Test_auditboard_IssueCategoriesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IssueCategoriesAPIService IssueCategoriesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssueCategoriesAPI.IssueCategoriesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssueCategoriesAPIService IssueCategoriesIssueCategoryIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var issueCategoryId int64

		resp, httpRes, err := apiClient.IssueCategoriesAPI.IssueCategoriesIssueCategoryIdDelete(context.Background(), issueCategoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssueCategoriesAPIService IssueCategoriesIssueCategoryIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var issueCategoryId int64

		resp, httpRes, err := apiClient.IssueCategoriesAPI.IssueCategoriesIssueCategoryIdGet(context.Background(), issueCategoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssueCategoriesAPIService IssueCategoriesIssueCategoryIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var issueCategoryId int64

		resp, httpRes, err := apiClient.IssueCategoriesAPI.IssueCategoriesIssueCategoryIdPut(context.Background(), issueCategoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssueCategoriesAPIService IssueCategoriesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssueCategoriesAPI.IssueCategoriesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
