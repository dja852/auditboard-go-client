/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// LibraryControlClassificationsAPIService LibraryControlClassificationsAPI service
type LibraryControlClassificationsAPIService service

type ApiLibraryControlClassificationsGetRequest struct {
	ctx context.Context
	ApiService *LibraryControlClassificationsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiLibraryControlClassificationsGetRequest) Include(include []string) ApiLibraryControlClassificationsGetRequest {
	r.include = &include
	return r
}

func (r ApiLibraryControlClassificationsGetRequest) Execute() (*LibraryControlClassificationsGet200Response, *http.Response, error) {
	return r.ApiService.LibraryControlClassificationsGetExecute(r)
}

/*
LibraryControlClassificationsGet Method for LibraryControlClassificationsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLibraryControlClassificationsGetRequest
*/
func (a *LibraryControlClassificationsAPIService) LibraryControlClassificationsGet(ctx context.Context) ApiLibraryControlClassificationsGetRequest {
	return ApiLibraryControlClassificationsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LibraryControlClassificationsGet200Response
func (a *LibraryControlClassificationsAPIService) LibraryControlClassificationsGetExecute(r ApiLibraryControlClassificationsGetRequest) (*LibraryControlClassificationsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlClassificationsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlClassificationsAPIService.LibraryControlClassificationsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_classifications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLibraryControlClassificationsLibraryControlClassificationIdDeleteRequest struct {
	ctx context.Context
	ApiService *LibraryControlClassificationsAPIService
	libraryControlClassificationId int64
}

func (r ApiLibraryControlClassificationsLibraryControlClassificationIdDeleteRequest) Execute() (*LibraryControlClassifications, *http.Response, error) {
	return r.ApiService.LibraryControlClassificationsLibraryControlClassificationIdDeleteExecute(r)
}

/*
LibraryControlClassificationsLibraryControlClassificationIdDelete Method for LibraryControlClassificationsLibraryControlClassificationIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param libraryControlClassificationId Model id
 @return ApiLibraryControlClassificationsLibraryControlClassificationIdDeleteRequest
*/
func (a *LibraryControlClassificationsAPIService) LibraryControlClassificationsLibraryControlClassificationIdDelete(ctx context.Context, libraryControlClassificationId int64) ApiLibraryControlClassificationsLibraryControlClassificationIdDeleteRequest {
	return ApiLibraryControlClassificationsLibraryControlClassificationIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		libraryControlClassificationId: libraryControlClassificationId,
	}
}

// Execute executes the request
//  @return LibraryControlClassifications
func (a *LibraryControlClassificationsAPIService) LibraryControlClassificationsLibraryControlClassificationIdDeleteExecute(r ApiLibraryControlClassificationsLibraryControlClassificationIdDeleteRequest) (*LibraryControlClassifications, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlClassifications
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlClassificationsAPIService.LibraryControlClassificationsLibraryControlClassificationIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_classifications/{library_control_classification_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"library_control_classification_id"+"}", url.PathEscape(parameterValueToString(r.libraryControlClassificationId, "libraryControlClassificationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLibraryControlClassificationsLibraryControlClassificationIdGetRequest struct {
	ctx context.Context
	ApiService *LibraryControlClassificationsAPIService
	libraryControlClassificationId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiLibraryControlClassificationsLibraryControlClassificationIdGetRequest) Include(include []string) ApiLibraryControlClassificationsLibraryControlClassificationIdGetRequest {
	r.include = &include
	return r
}

func (r ApiLibraryControlClassificationsLibraryControlClassificationIdGetRequest) Execute() (*LibraryControlClassifications, *http.Response, error) {
	return r.ApiService.LibraryControlClassificationsLibraryControlClassificationIdGetExecute(r)
}

/*
LibraryControlClassificationsLibraryControlClassificationIdGet Method for LibraryControlClassificationsLibraryControlClassificationIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param libraryControlClassificationId Model id
 @return ApiLibraryControlClassificationsLibraryControlClassificationIdGetRequest
*/
func (a *LibraryControlClassificationsAPIService) LibraryControlClassificationsLibraryControlClassificationIdGet(ctx context.Context, libraryControlClassificationId int64) ApiLibraryControlClassificationsLibraryControlClassificationIdGetRequest {
	return ApiLibraryControlClassificationsLibraryControlClassificationIdGetRequest{
		ApiService: a,
		ctx: ctx,
		libraryControlClassificationId: libraryControlClassificationId,
	}
}

// Execute executes the request
//  @return LibraryControlClassifications
func (a *LibraryControlClassificationsAPIService) LibraryControlClassificationsLibraryControlClassificationIdGetExecute(r ApiLibraryControlClassificationsLibraryControlClassificationIdGetRequest) (*LibraryControlClassifications, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlClassifications
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlClassificationsAPIService.LibraryControlClassificationsLibraryControlClassificationIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_classifications/{library_control_classification_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"library_control_classification_id"+"}", url.PathEscape(parameterValueToString(r.libraryControlClassificationId, "libraryControlClassificationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLibraryControlClassificationsLibraryControlClassificationIdPutRequest struct {
	ctx context.Context
	ApiService *LibraryControlClassificationsAPIService
	libraryControlClassificationId int64
	libraryControlClassificationsPut *LibraryControlClassificationsPut
}

func (r ApiLibraryControlClassificationsLibraryControlClassificationIdPutRequest) LibraryControlClassificationsPut(libraryControlClassificationsPut LibraryControlClassificationsPut) ApiLibraryControlClassificationsLibraryControlClassificationIdPutRequest {
	r.libraryControlClassificationsPut = &libraryControlClassificationsPut
	return r
}

func (r ApiLibraryControlClassificationsLibraryControlClassificationIdPutRequest) Execute() (*LibraryControlClassifications, *http.Response, error) {
	return r.ApiService.LibraryControlClassificationsLibraryControlClassificationIdPutExecute(r)
}

/*
LibraryControlClassificationsLibraryControlClassificationIdPut Method for LibraryControlClassificationsLibraryControlClassificationIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param libraryControlClassificationId Model id
 @return ApiLibraryControlClassificationsLibraryControlClassificationIdPutRequest
*/
func (a *LibraryControlClassificationsAPIService) LibraryControlClassificationsLibraryControlClassificationIdPut(ctx context.Context, libraryControlClassificationId int64) ApiLibraryControlClassificationsLibraryControlClassificationIdPutRequest {
	return ApiLibraryControlClassificationsLibraryControlClassificationIdPutRequest{
		ApiService: a,
		ctx: ctx,
		libraryControlClassificationId: libraryControlClassificationId,
	}
}

// Execute executes the request
//  @return LibraryControlClassifications
func (a *LibraryControlClassificationsAPIService) LibraryControlClassificationsLibraryControlClassificationIdPutExecute(r ApiLibraryControlClassificationsLibraryControlClassificationIdPutRequest) (*LibraryControlClassifications, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlClassifications
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlClassificationsAPIService.LibraryControlClassificationsLibraryControlClassificationIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_classifications/{library_control_classification_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"library_control_classification_id"+"}", url.PathEscape(parameterValueToString(r.libraryControlClassificationId, "libraryControlClassificationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.libraryControlClassificationsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLibraryControlClassificationsPostRequest struct {
	ctx context.Context
	ApiService *LibraryControlClassificationsAPIService
	libraryControlClassificationsPostRequest *LibraryControlClassificationsPostRequest
}

func (r ApiLibraryControlClassificationsPostRequest) LibraryControlClassificationsPostRequest(libraryControlClassificationsPostRequest LibraryControlClassificationsPostRequest) ApiLibraryControlClassificationsPostRequest {
	r.libraryControlClassificationsPostRequest = &libraryControlClassificationsPostRequest
	return r
}

func (r ApiLibraryControlClassificationsPostRequest) Execute() (*LibraryControlClassificationsGet200Response, *http.Response, error) {
	return r.ApiService.LibraryControlClassificationsPostExecute(r)
}

/*
LibraryControlClassificationsPost Method for LibraryControlClassificationsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLibraryControlClassificationsPostRequest
*/
func (a *LibraryControlClassificationsAPIService) LibraryControlClassificationsPost(ctx context.Context) ApiLibraryControlClassificationsPostRequest {
	return ApiLibraryControlClassificationsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LibraryControlClassificationsGet200Response
func (a *LibraryControlClassificationsAPIService) LibraryControlClassificationsPostExecute(r ApiLibraryControlClassificationsPostRequest) (*LibraryControlClassificationsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LibraryControlClassificationsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryControlClassificationsAPIService.LibraryControlClassificationsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/library_control_classifications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.libraryControlClassificationsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
