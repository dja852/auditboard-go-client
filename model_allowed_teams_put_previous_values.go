/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the AllowedTeamsPutPreviousValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllowedTeamsPutPreviousValues{}

// AllowedTeamsPutPreviousValues struct for AllowedTeamsPutPreviousValues
type AllowedTeamsPutPreviousValues struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	TeamableId *int32 `json:"teamable_id,omitempty"`
	TeamableType *string `json:"teamable_type,omitempty"`
	Permission *string `json:"permission,omitempty"`
	// Note: This is a Foreign Key to `teams.id`.<fk table='teams' column='id'/>
	TeamId *int32 `json:"team_id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewAllowedTeamsPutPreviousValues instantiates a new AllowedTeamsPutPreviousValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowedTeamsPutPreviousValues() *AllowedTeamsPutPreviousValues {
	this := AllowedTeamsPutPreviousValues{}
	return &this
}

// NewAllowedTeamsPutPreviousValuesWithDefaults instantiates a new AllowedTeamsPutPreviousValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowedTeamsPutPreviousValuesWithDefaults() *AllowedTeamsPutPreviousValues {
	this := AllowedTeamsPutPreviousValues{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AllowedTeamsPutPreviousValues) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPutPreviousValues) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AllowedTeamsPutPreviousValues) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AllowedTeamsPutPreviousValues) SetId(v int32) {
	o.Id = &v
}

// GetTeamableId returns the TeamableId field value if set, zero value otherwise.
func (o *AllowedTeamsPutPreviousValues) GetTeamableId() int32 {
	if o == nil || IsNil(o.TeamableId) {
		var ret int32
		return ret
	}
	return *o.TeamableId
}

// GetTeamableIdOk returns a tuple with the TeamableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPutPreviousValues) GetTeamableIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TeamableId) {
		return nil, false
	}
	return o.TeamableId, true
}

// HasTeamableId returns a boolean if a field has been set.
func (o *AllowedTeamsPutPreviousValues) HasTeamableId() bool {
	if o != nil && !IsNil(o.TeamableId) {
		return true
	}

	return false
}

// SetTeamableId gets a reference to the given int32 and assigns it to the TeamableId field.
func (o *AllowedTeamsPutPreviousValues) SetTeamableId(v int32) {
	o.TeamableId = &v
}

// GetTeamableType returns the TeamableType field value if set, zero value otherwise.
func (o *AllowedTeamsPutPreviousValues) GetTeamableType() string {
	if o == nil || IsNil(o.TeamableType) {
		var ret string
		return ret
	}
	return *o.TeamableType
}

// GetTeamableTypeOk returns a tuple with the TeamableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPutPreviousValues) GetTeamableTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TeamableType) {
		return nil, false
	}
	return o.TeamableType, true
}

// HasTeamableType returns a boolean if a field has been set.
func (o *AllowedTeamsPutPreviousValues) HasTeamableType() bool {
	if o != nil && !IsNil(o.TeamableType) {
		return true
	}

	return false
}

// SetTeamableType gets a reference to the given string and assigns it to the TeamableType field.
func (o *AllowedTeamsPutPreviousValues) SetTeamableType(v string) {
	o.TeamableType = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *AllowedTeamsPutPreviousValues) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPutPreviousValues) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *AllowedTeamsPutPreviousValues) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *AllowedTeamsPutPreviousValues) SetPermission(v string) {
	o.Permission = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *AllowedTeamsPutPreviousValues) GetTeamId() int32 {
	if o == nil || IsNil(o.TeamId) {
		var ret int32
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPutPreviousValues) GetTeamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *AllowedTeamsPutPreviousValues) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given int32 and assigns it to the TeamId field.
func (o *AllowedTeamsPutPreviousValues) SetTeamId(v int32) {
	o.TeamId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AllowedTeamsPutPreviousValues) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPutPreviousValues) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AllowedTeamsPutPreviousValues) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *AllowedTeamsPutPreviousValues) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AllowedTeamsPutPreviousValues) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTeamsPutPreviousValues) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AllowedTeamsPutPreviousValues) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *AllowedTeamsPutPreviousValues) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o AllowedTeamsPutPreviousValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllowedTeamsPutPreviousValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TeamableId) {
		toSerialize["teamable_id"] = o.TeamableId
	}
	if !IsNil(o.TeamableType) {
		toSerialize["teamable_type"] = o.TeamableType
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.TeamId) {
		toSerialize["team_id"] = o.TeamId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableAllowedTeamsPutPreviousValues struct {
	value *AllowedTeamsPutPreviousValues
	isSet bool
}

func (v NullableAllowedTeamsPutPreviousValues) Get() *AllowedTeamsPutPreviousValues {
	return v.value
}

func (v *NullableAllowedTeamsPutPreviousValues) Set(val *AllowedTeamsPutPreviousValues) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowedTeamsPutPreviousValues) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowedTeamsPutPreviousValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowedTeamsPutPreviousValues(val *AllowedTeamsPutPreviousValues) *NullableAllowedTeamsPutPreviousValues {
	return &NullableAllowedTeamsPutPreviousValues{value: val, isSet: true}
}

func (v NullableAllowedTeamsPutPreviousValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowedTeamsPutPreviousValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


