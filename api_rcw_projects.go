/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RcwProjectsAPIService RcwProjectsAPI service
type RcwProjectsAPIService service

type ApiRcwProjectsGetRequest struct {
	ctx context.Context
	ApiService *RcwProjectsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiRcwProjectsGetRequest) Include(include []string) ApiRcwProjectsGetRequest {
	r.include = &include
	return r
}

func (r ApiRcwProjectsGetRequest) Execute() (*RcwProjectsGet200Response, *http.Response, error) {
	return r.ApiService.RcwProjectsGetExecute(r)
}

/*
RcwProjectsGet Method for RcwProjectsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRcwProjectsGetRequest
*/
func (a *RcwProjectsAPIService) RcwProjectsGet(ctx context.Context) ApiRcwProjectsGetRequest {
	return ApiRcwProjectsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RcwProjectsGet200Response
func (a *RcwProjectsAPIService) RcwProjectsGetExecute(r ApiRcwProjectsGetRequest) (*RcwProjectsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwProjectsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwProjectsAPIService.RcwProjectsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_projects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwProjectsPostRequest struct {
	ctx context.Context
	ApiService *RcwProjectsAPIService
	rcwProjectsPostRequest *RcwProjectsPostRequest
}

func (r ApiRcwProjectsPostRequest) RcwProjectsPostRequest(rcwProjectsPostRequest RcwProjectsPostRequest) ApiRcwProjectsPostRequest {
	r.rcwProjectsPostRequest = &rcwProjectsPostRequest
	return r
}

func (r ApiRcwProjectsPostRequest) Execute() (*RcwProjectsGet200Response, *http.Response, error) {
	return r.ApiService.RcwProjectsPostExecute(r)
}

/*
RcwProjectsPost Method for RcwProjectsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRcwProjectsPostRequest
*/
func (a *RcwProjectsAPIService) RcwProjectsPost(ctx context.Context) ApiRcwProjectsPostRequest {
	return ApiRcwProjectsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RcwProjectsGet200Response
func (a *RcwProjectsAPIService) RcwProjectsPostExecute(r ApiRcwProjectsPostRequest) (*RcwProjectsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwProjectsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwProjectsAPIService.RcwProjectsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_projects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rcwProjectsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwProjectsRcwProjectIdDeleteRequest struct {
	ctx context.Context
	ApiService *RcwProjectsAPIService
	rcwProjectId int64
}

func (r ApiRcwProjectsRcwProjectIdDeleteRequest) Execute() (*RcwProjects, *http.Response, error) {
	return r.ApiService.RcwProjectsRcwProjectIdDeleteExecute(r)
}

/*
RcwProjectsRcwProjectIdDelete Method for RcwProjectsRcwProjectIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rcwProjectId Model id
 @return ApiRcwProjectsRcwProjectIdDeleteRequest
*/
func (a *RcwProjectsAPIService) RcwProjectsRcwProjectIdDelete(ctx context.Context, rcwProjectId int64) ApiRcwProjectsRcwProjectIdDeleteRequest {
	return ApiRcwProjectsRcwProjectIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		rcwProjectId: rcwProjectId,
	}
}

// Execute executes the request
//  @return RcwProjects
func (a *RcwProjectsAPIService) RcwProjectsRcwProjectIdDeleteExecute(r ApiRcwProjectsRcwProjectIdDeleteRequest) (*RcwProjects, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwProjects
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwProjectsAPIService.RcwProjectsRcwProjectIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_projects/{rcw_project_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"rcw_project_id"+"}", url.PathEscape(parameterValueToString(r.rcwProjectId, "rcwProjectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwProjectsRcwProjectIdGetRequest struct {
	ctx context.Context
	ApiService *RcwProjectsAPIService
	rcwProjectId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiRcwProjectsRcwProjectIdGetRequest) Include(include []string) ApiRcwProjectsRcwProjectIdGetRequest {
	r.include = &include
	return r
}

func (r ApiRcwProjectsRcwProjectIdGetRequest) Execute() (*RcwProjects, *http.Response, error) {
	return r.ApiService.RcwProjectsRcwProjectIdGetExecute(r)
}

/*
RcwProjectsRcwProjectIdGet Method for RcwProjectsRcwProjectIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rcwProjectId Model id
 @return ApiRcwProjectsRcwProjectIdGetRequest
*/
func (a *RcwProjectsAPIService) RcwProjectsRcwProjectIdGet(ctx context.Context, rcwProjectId int64) ApiRcwProjectsRcwProjectIdGetRequest {
	return ApiRcwProjectsRcwProjectIdGetRequest{
		ApiService: a,
		ctx: ctx,
		rcwProjectId: rcwProjectId,
	}
}

// Execute executes the request
//  @return RcwProjects
func (a *RcwProjectsAPIService) RcwProjectsRcwProjectIdGetExecute(r ApiRcwProjectsRcwProjectIdGetRequest) (*RcwProjects, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwProjects
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwProjectsAPIService.RcwProjectsRcwProjectIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_projects/{rcw_project_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"rcw_project_id"+"}", url.PathEscape(parameterValueToString(r.rcwProjectId, "rcwProjectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwProjectsRcwProjectIdPutRequest struct {
	ctx context.Context
	ApiService *RcwProjectsAPIService
	rcwProjectId int64
	rcwProjectsPut *RcwProjectsPut
}

func (r ApiRcwProjectsRcwProjectIdPutRequest) RcwProjectsPut(rcwProjectsPut RcwProjectsPut) ApiRcwProjectsRcwProjectIdPutRequest {
	r.rcwProjectsPut = &rcwProjectsPut
	return r
}

func (r ApiRcwProjectsRcwProjectIdPutRequest) Execute() (*RcwProjects, *http.Response, error) {
	return r.ApiService.RcwProjectsRcwProjectIdPutExecute(r)
}

/*
RcwProjectsRcwProjectIdPut Method for RcwProjectsRcwProjectIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rcwProjectId Model id
 @return ApiRcwProjectsRcwProjectIdPutRequest
*/
func (a *RcwProjectsAPIService) RcwProjectsRcwProjectIdPut(ctx context.Context, rcwProjectId int64) ApiRcwProjectsRcwProjectIdPutRequest {
	return ApiRcwProjectsRcwProjectIdPutRequest{
		ApiService: a,
		ctx: ctx,
		rcwProjectId: rcwProjectId,
	}
}

// Execute executes the request
//  @return RcwProjects
func (a *RcwProjectsAPIService) RcwProjectsRcwProjectIdPutExecute(r ApiRcwProjectsRcwProjectIdPutRequest) (*RcwProjects, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwProjects
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwProjectsAPIService.RcwProjectsRcwProjectIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_projects/{rcw_project_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"rcw_project_id"+"}", url.PathEscape(parameterValueToString(r.rcwProjectId, "rcwProjectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rcwProjectsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
