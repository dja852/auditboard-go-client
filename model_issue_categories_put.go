/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the IssueCategoriesPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueCategoriesPut{}

// IssueCategoriesPut struct for IssueCategoriesPut
type IssueCategoriesPut struct {
	IssueCategory *IssueCategoriesPutIssueCategory `json:"issue_category,omitempty"`
	PreviousValues *IssueCategoriesPutPreviousValues `json:"previous_values,omitempty"`
}

// NewIssueCategoriesPut instantiates a new IssueCategoriesPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueCategoriesPut() *IssueCategoriesPut {
	this := IssueCategoriesPut{}
	return &this
}

// NewIssueCategoriesPutWithDefaults instantiates a new IssueCategoriesPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueCategoriesPutWithDefaults() *IssueCategoriesPut {
	this := IssueCategoriesPut{}
	return &this
}

// GetIssueCategory returns the IssueCategory field value if set, zero value otherwise.
func (o *IssueCategoriesPut) GetIssueCategory() IssueCategoriesPutIssueCategory {
	if o == nil || IsNil(o.IssueCategory) {
		var ret IssueCategoriesPutIssueCategory
		return ret
	}
	return *o.IssueCategory
}

// GetIssueCategoryOk returns a tuple with the IssueCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoriesPut) GetIssueCategoryOk() (*IssueCategoriesPutIssueCategory, bool) {
	if o == nil || IsNil(o.IssueCategory) {
		return nil, false
	}
	return o.IssueCategory, true
}

// HasIssueCategory returns a boolean if a field has been set.
func (o *IssueCategoriesPut) HasIssueCategory() bool {
	if o != nil && !IsNil(o.IssueCategory) {
		return true
	}

	return false
}

// SetIssueCategory gets a reference to the given IssueCategoriesPutIssueCategory and assigns it to the IssueCategory field.
func (o *IssueCategoriesPut) SetIssueCategory(v IssueCategoriesPutIssueCategory) {
	o.IssueCategory = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *IssueCategoriesPut) GetPreviousValues() IssueCategoriesPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret IssueCategoriesPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoriesPut) GetPreviousValuesOk() (*IssueCategoriesPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *IssueCategoriesPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given IssueCategoriesPutPreviousValues and assigns it to the PreviousValues field.
func (o *IssueCategoriesPut) SetPreviousValues(v IssueCategoriesPutPreviousValues) {
	o.PreviousValues = &v
}

func (o IssueCategoriesPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueCategoriesPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IssueCategory) {
		toSerialize["issue_category"] = o.IssueCategory
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableIssueCategoriesPut struct {
	value *IssueCategoriesPut
	isSet bool
}

func (v NullableIssueCategoriesPut) Get() *IssueCategoriesPut {
	return v.value
}

func (v *NullableIssueCategoriesPut) Set(val *IssueCategoriesPut) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueCategoriesPut) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueCategoriesPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueCategoriesPut(val *IssueCategoriesPut) *NullableIssueCategoriesPut {
	return &NullableIssueCategoriesPut{value: val, isSet: true}
}

func (v NullableIssueCategoriesPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueCategoriesPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


