/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RcwRequests type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RcwRequests{}

// RcwRequests struct for RcwRequests
type RcwRequests struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	// Note: This is a Foreign Key to `rcw_library_requests.id`.<fk table='rcw_library_requests' column='id'/>
	RcwLibraryRequestId int32 `json:"rcw_library_request_id"`
	// Note: This is a Foreign Key to `rcw_projects.id`.<fk table='rcw_projects' column='id'/>
	RcwProjectId *int32 `json:"rcw_project_id,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	AssigneeUserId *int32 `json:"assignee_user_id,omitempty"`
	Status string `json:"status"`
	OpenDate *string `json:"open_date,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	OpenByUserId *int32 `json:"open_by_user_id,omitempty"`
	PendingReviewDate *string `json:"pending_review_date,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	PendingReviewByUserId *int32 `json:"pending_review_by_user_id,omitempty"`
	ReopenedDate *string `json:"reopened_date,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	ReopenedByUserId *int32 `json:"reopened_by_user_id,omitempty"`
	CompletedDate *string `json:"completed_date,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	CompletedByUserId *int32 `json:"completed_by_user_id,omitempty"`
	DueDate *string `json:"due_date,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	// Note: This is a Foreign Key to `rcw_request_ratings.id`.<fk table='rcw_request_ratings' column='id'/>
	RcwRequestRatingId *int32 `json:"rcw_request_rating_id,omitempty"`
	DidNotify bool `json:"did_notify"`
	ExplanationText *string `json:"explanation_text,omitempty"`
	IsAutomated *bool `json:"is_automated,omitempty"`
	LaunchDate *string `json:"launch_date,omitempty"`
	PeriodStart *string `json:"period_start,omitempty"`
	PeriodEnd *string `json:"period_end,omitempty"`
	ExternalIntegrationUrl *string `json:"external_integration_url,omitempty"`
	PeriodDependent *bool `json:"period_dependent,omitempty"`
	Description *string `json:"description,omitempty"`
	AdditionalInformation *string `json:"additional_information,omitempty"`
	Scopes interface{} `json:"scopes,omitempty"`
	IsRecurrence *bool `json:"is_recurrence,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	SubmittedByUserId *int32 `json:"submitted_by_user_id,omitempty"`
}

type _RcwRequests RcwRequests

// NewRcwRequests instantiates a new RcwRequests object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRcwRequests(rcwLibraryRequestId int32, status string, didNotify bool) *RcwRequests {
	this := RcwRequests{}
	this.RcwLibraryRequestId = rcwLibraryRequestId
	this.Status = status
	this.DidNotify = didNotify
	var periodDependent bool = false
	this.PeriodDependent = &periodDependent
	return &this
}

// NewRcwRequestsWithDefaults instantiates a new RcwRequests object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRcwRequestsWithDefaults() *RcwRequests {
	this := RcwRequests{}
	var didNotify bool = false
	this.DidNotify = didNotify
	var periodDependent bool = false
	this.PeriodDependent = &periodDependent
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RcwRequests) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RcwRequests) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RcwRequests) SetId(v int32) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *RcwRequests) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *RcwRequests) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *RcwRequests) SetTitle(v string) {
	o.Title = &v
}

// GetRcwLibraryRequestId returns the RcwLibraryRequestId field value
func (o *RcwRequests) GetRcwLibraryRequestId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RcwLibraryRequestId
}

// GetRcwLibraryRequestIdOk returns a tuple with the RcwLibraryRequestId field value
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetRcwLibraryRequestIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RcwLibraryRequestId, true
}

// SetRcwLibraryRequestId sets field value
func (o *RcwRequests) SetRcwLibraryRequestId(v int32) {
	o.RcwLibraryRequestId = v
}

// GetRcwProjectId returns the RcwProjectId field value if set, zero value otherwise.
func (o *RcwRequests) GetRcwProjectId() int32 {
	if o == nil || IsNil(o.RcwProjectId) {
		var ret int32
		return ret
	}
	return *o.RcwProjectId
}

// GetRcwProjectIdOk returns a tuple with the RcwProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetRcwProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RcwProjectId) {
		return nil, false
	}
	return o.RcwProjectId, true
}

// HasRcwProjectId returns a boolean if a field has been set.
func (o *RcwRequests) HasRcwProjectId() bool {
	if o != nil && !IsNil(o.RcwProjectId) {
		return true
	}

	return false
}

// SetRcwProjectId gets a reference to the given int32 and assigns it to the RcwProjectId field.
func (o *RcwRequests) SetRcwProjectId(v int32) {
	o.RcwProjectId = &v
}

// GetAssigneeUserId returns the AssigneeUserId field value if set, zero value otherwise.
func (o *RcwRequests) GetAssigneeUserId() int32 {
	if o == nil || IsNil(o.AssigneeUserId) {
		var ret int32
		return ret
	}
	return *o.AssigneeUserId
}

// GetAssigneeUserIdOk returns a tuple with the AssigneeUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetAssigneeUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AssigneeUserId) {
		return nil, false
	}
	return o.AssigneeUserId, true
}

// HasAssigneeUserId returns a boolean if a field has been set.
func (o *RcwRequests) HasAssigneeUserId() bool {
	if o != nil && !IsNil(o.AssigneeUserId) {
		return true
	}

	return false
}

// SetAssigneeUserId gets a reference to the given int32 and assigns it to the AssigneeUserId field.
func (o *RcwRequests) SetAssigneeUserId(v int32) {
	o.AssigneeUserId = &v
}

// GetStatus returns the Status field value
func (o *RcwRequests) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *RcwRequests) SetStatus(v string) {
	o.Status = v
}

// GetOpenDate returns the OpenDate field value if set, zero value otherwise.
func (o *RcwRequests) GetOpenDate() string {
	if o == nil || IsNil(o.OpenDate) {
		var ret string
		return ret
	}
	return *o.OpenDate
}

// GetOpenDateOk returns a tuple with the OpenDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetOpenDateOk() (*string, bool) {
	if o == nil || IsNil(o.OpenDate) {
		return nil, false
	}
	return o.OpenDate, true
}

// HasOpenDate returns a boolean if a field has been set.
func (o *RcwRequests) HasOpenDate() bool {
	if o != nil && !IsNil(o.OpenDate) {
		return true
	}

	return false
}

// SetOpenDate gets a reference to the given string and assigns it to the OpenDate field.
func (o *RcwRequests) SetOpenDate(v string) {
	o.OpenDate = &v
}

// GetOpenByUserId returns the OpenByUserId field value if set, zero value otherwise.
func (o *RcwRequests) GetOpenByUserId() int32 {
	if o == nil || IsNil(o.OpenByUserId) {
		var ret int32
		return ret
	}
	return *o.OpenByUserId
}

// GetOpenByUserIdOk returns a tuple with the OpenByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetOpenByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OpenByUserId) {
		return nil, false
	}
	return o.OpenByUserId, true
}

// HasOpenByUserId returns a boolean if a field has been set.
func (o *RcwRequests) HasOpenByUserId() bool {
	if o != nil && !IsNil(o.OpenByUserId) {
		return true
	}

	return false
}

// SetOpenByUserId gets a reference to the given int32 and assigns it to the OpenByUserId field.
func (o *RcwRequests) SetOpenByUserId(v int32) {
	o.OpenByUserId = &v
}

// GetPendingReviewDate returns the PendingReviewDate field value if set, zero value otherwise.
func (o *RcwRequests) GetPendingReviewDate() string {
	if o == nil || IsNil(o.PendingReviewDate) {
		var ret string
		return ret
	}
	return *o.PendingReviewDate
}

// GetPendingReviewDateOk returns a tuple with the PendingReviewDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetPendingReviewDateOk() (*string, bool) {
	if o == nil || IsNil(o.PendingReviewDate) {
		return nil, false
	}
	return o.PendingReviewDate, true
}

// HasPendingReviewDate returns a boolean if a field has been set.
func (o *RcwRequests) HasPendingReviewDate() bool {
	if o != nil && !IsNil(o.PendingReviewDate) {
		return true
	}

	return false
}

// SetPendingReviewDate gets a reference to the given string and assigns it to the PendingReviewDate field.
func (o *RcwRequests) SetPendingReviewDate(v string) {
	o.PendingReviewDate = &v
}

// GetPendingReviewByUserId returns the PendingReviewByUserId field value if set, zero value otherwise.
func (o *RcwRequests) GetPendingReviewByUserId() int32 {
	if o == nil || IsNil(o.PendingReviewByUserId) {
		var ret int32
		return ret
	}
	return *o.PendingReviewByUserId
}

// GetPendingReviewByUserIdOk returns a tuple with the PendingReviewByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetPendingReviewByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PendingReviewByUserId) {
		return nil, false
	}
	return o.PendingReviewByUserId, true
}

// HasPendingReviewByUserId returns a boolean if a field has been set.
func (o *RcwRequests) HasPendingReviewByUserId() bool {
	if o != nil && !IsNil(o.PendingReviewByUserId) {
		return true
	}

	return false
}

// SetPendingReviewByUserId gets a reference to the given int32 and assigns it to the PendingReviewByUserId field.
func (o *RcwRequests) SetPendingReviewByUserId(v int32) {
	o.PendingReviewByUserId = &v
}

// GetReopenedDate returns the ReopenedDate field value if set, zero value otherwise.
func (o *RcwRequests) GetReopenedDate() string {
	if o == nil || IsNil(o.ReopenedDate) {
		var ret string
		return ret
	}
	return *o.ReopenedDate
}

// GetReopenedDateOk returns a tuple with the ReopenedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetReopenedDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReopenedDate) {
		return nil, false
	}
	return o.ReopenedDate, true
}

// HasReopenedDate returns a boolean if a field has been set.
func (o *RcwRequests) HasReopenedDate() bool {
	if o != nil && !IsNil(o.ReopenedDate) {
		return true
	}

	return false
}

// SetReopenedDate gets a reference to the given string and assigns it to the ReopenedDate field.
func (o *RcwRequests) SetReopenedDate(v string) {
	o.ReopenedDate = &v
}

// GetReopenedByUserId returns the ReopenedByUserId field value if set, zero value otherwise.
func (o *RcwRequests) GetReopenedByUserId() int32 {
	if o == nil || IsNil(o.ReopenedByUserId) {
		var ret int32
		return ret
	}
	return *o.ReopenedByUserId
}

// GetReopenedByUserIdOk returns a tuple with the ReopenedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetReopenedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ReopenedByUserId) {
		return nil, false
	}
	return o.ReopenedByUserId, true
}

// HasReopenedByUserId returns a boolean if a field has been set.
func (o *RcwRequests) HasReopenedByUserId() bool {
	if o != nil && !IsNil(o.ReopenedByUserId) {
		return true
	}

	return false
}

// SetReopenedByUserId gets a reference to the given int32 and assigns it to the ReopenedByUserId field.
func (o *RcwRequests) SetReopenedByUserId(v int32) {
	o.ReopenedByUserId = &v
}

// GetCompletedDate returns the CompletedDate field value if set, zero value otherwise.
func (o *RcwRequests) GetCompletedDate() string {
	if o == nil || IsNil(o.CompletedDate) {
		var ret string
		return ret
	}
	return *o.CompletedDate
}

// GetCompletedDateOk returns a tuple with the CompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetCompletedDateOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedDate) {
		return nil, false
	}
	return o.CompletedDate, true
}

// HasCompletedDate returns a boolean if a field has been set.
func (o *RcwRequests) HasCompletedDate() bool {
	if o != nil && !IsNil(o.CompletedDate) {
		return true
	}

	return false
}

// SetCompletedDate gets a reference to the given string and assigns it to the CompletedDate field.
func (o *RcwRequests) SetCompletedDate(v string) {
	o.CompletedDate = &v
}

// GetCompletedByUserId returns the CompletedByUserId field value if set, zero value otherwise.
func (o *RcwRequests) GetCompletedByUserId() int32 {
	if o == nil || IsNil(o.CompletedByUserId) {
		var ret int32
		return ret
	}
	return *o.CompletedByUserId
}

// GetCompletedByUserIdOk returns a tuple with the CompletedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetCompletedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CompletedByUserId) {
		return nil, false
	}
	return o.CompletedByUserId, true
}

// HasCompletedByUserId returns a boolean if a field has been set.
func (o *RcwRequests) HasCompletedByUserId() bool {
	if o != nil && !IsNil(o.CompletedByUserId) {
		return true
	}

	return false
}

// SetCompletedByUserId gets a reference to the given int32 and assigns it to the CompletedByUserId field.
func (o *RcwRequests) SetCompletedByUserId(v int32) {
	o.CompletedByUserId = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *RcwRequests) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *RcwRequests) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *RcwRequests) SetDueDate(v string) {
	o.DueDate = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RcwRequests) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RcwRequests) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *RcwRequests) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RcwRequests) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RcwRequests) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *RcwRequests) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *RcwRequests) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *RcwRequests) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *RcwRequests) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetRcwRequestRatingId returns the RcwRequestRatingId field value if set, zero value otherwise.
func (o *RcwRequests) GetRcwRequestRatingId() int32 {
	if o == nil || IsNil(o.RcwRequestRatingId) {
		var ret int32
		return ret
	}
	return *o.RcwRequestRatingId
}

// GetRcwRequestRatingIdOk returns a tuple with the RcwRequestRatingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetRcwRequestRatingIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RcwRequestRatingId) {
		return nil, false
	}
	return o.RcwRequestRatingId, true
}

// HasRcwRequestRatingId returns a boolean if a field has been set.
func (o *RcwRequests) HasRcwRequestRatingId() bool {
	if o != nil && !IsNil(o.RcwRequestRatingId) {
		return true
	}

	return false
}

// SetRcwRequestRatingId gets a reference to the given int32 and assigns it to the RcwRequestRatingId field.
func (o *RcwRequests) SetRcwRequestRatingId(v int32) {
	o.RcwRequestRatingId = &v
}

// GetDidNotify returns the DidNotify field value
func (o *RcwRequests) GetDidNotify() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DidNotify
}

// GetDidNotifyOk returns a tuple with the DidNotify field value
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetDidNotifyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DidNotify, true
}

// SetDidNotify sets field value
func (o *RcwRequests) SetDidNotify(v bool) {
	o.DidNotify = v
}

// GetExplanationText returns the ExplanationText field value if set, zero value otherwise.
func (o *RcwRequests) GetExplanationText() string {
	if o == nil || IsNil(o.ExplanationText) {
		var ret string
		return ret
	}
	return *o.ExplanationText
}

// GetExplanationTextOk returns a tuple with the ExplanationText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetExplanationTextOk() (*string, bool) {
	if o == nil || IsNil(o.ExplanationText) {
		return nil, false
	}
	return o.ExplanationText, true
}

// HasExplanationText returns a boolean if a field has been set.
func (o *RcwRequests) HasExplanationText() bool {
	if o != nil && !IsNil(o.ExplanationText) {
		return true
	}

	return false
}

// SetExplanationText gets a reference to the given string and assigns it to the ExplanationText field.
func (o *RcwRequests) SetExplanationText(v string) {
	o.ExplanationText = &v
}

// GetIsAutomated returns the IsAutomated field value if set, zero value otherwise.
func (o *RcwRequests) GetIsAutomated() bool {
	if o == nil || IsNil(o.IsAutomated) {
		var ret bool
		return ret
	}
	return *o.IsAutomated
}

// GetIsAutomatedOk returns a tuple with the IsAutomated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetIsAutomatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAutomated) {
		return nil, false
	}
	return o.IsAutomated, true
}

// HasIsAutomated returns a boolean if a field has been set.
func (o *RcwRequests) HasIsAutomated() bool {
	if o != nil && !IsNil(o.IsAutomated) {
		return true
	}

	return false
}

// SetIsAutomated gets a reference to the given bool and assigns it to the IsAutomated field.
func (o *RcwRequests) SetIsAutomated(v bool) {
	o.IsAutomated = &v
}

// GetLaunchDate returns the LaunchDate field value if set, zero value otherwise.
func (o *RcwRequests) GetLaunchDate() string {
	if o == nil || IsNil(o.LaunchDate) {
		var ret string
		return ret
	}
	return *o.LaunchDate
}

// GetLaunchDateOk returns a tuple with the LaunchDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetLaunchDateOk() (*string, bool) {
	if o == nil || IsNil(o.LaunchDate) {
		return nil, false
	}
	return o.LaunchDate, true
}

// HasLaunchDate returns a boolean if a field has been set.
func (o *RcwRequests) HasLaunchDate() bool {
	if o != nil && !IsNil(o.LaunchDate) {
		return true
	}

	return false
}

// SetLaunchDate gets a reference to the given string and assigns it to the LaunchDate field.
func (o *RcwRequests) SetLaunchDate(v string) {
	o.LaunchDate = &v
}

// GetPeriodStart returns the PeriodStart field value if set, zero value otherwise.
func (o *RcwRequests) GetPeriodStart() string {
	if o == nil || IsNil(o.PeriodStart) {
		var ret string
		return ret
	}
	return *o.PeriodStart
}

// GetPeriodStartOk returns a tuple with the PeriodStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetPeriodStartOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodStart) {
		return nil, false
	}
	return o.PeriodStart, true
}

// HasPeriodStart returns a boolean if a field has been set.
func (o *RcwRequests) HasPeriodStart() bool {
	if o != nil && !IsNil(o.PeriodStart) {
		return true
	}

	return false
}

// SetPeriodStart gets a reference to the given string and assigns it to the PeriodStart field.
func (o *RcwRequests) SetPeriodStart(v string) {
	o.PeriodStart = &v
}

// GetPeriodEnd returns the PeriodEnd field value if set, zero value otherwise.
func (o *RcwRequests) GetPeriodEnd() string {
	if o == nil || IsNil(o.PeriodEnd) {
		var ret string
		return ret
	}
	return *o.PeriodEnd
}

// GetPeriodEndOk returns a tuple with the PeriodEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetPeriodEndOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodEnd) {
		return nil, false
	}
	return o.PeriodEnd, true
}

// HasPeriodEnd returns a boolean if a field has been set.
func (o *RcwRequests) HasPeriodEnd() bool {
	if o != nil && !IsNil(o.PeriodEnd) {
		return true
	}

	return false
}

// SetPeriodEnd gets a reference to the given string and assigns it to the PeriodEnd field.
func (o *RcwRequests) SetPeriodEnd(v string) {
	o.PeriodEnd = &v
}

// GetExternalIntegrationUrl returns the ExternalIntegrationUrl field value if set, zero value otherwise.
func (o *RcwRequests) GetExternalIntegrationUrl() string {
	if o == nil || IsNil(o.ExternalIntegrationUrl) {
		var ret string
		return ret
	}
	return *o.ExternalIntegrationUrl
}

// GetExternalIntegrationUrlOk returns a tuple with the ExternalIntegrationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetExternalIntegrationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalIntegrationUrl) {
		return nil, false
	}
	return o.ExternalIntegrationUrl, true
}

// HasExternalIntegrationUrl returns a boolean if a field has been set.
func (o *RcwRequests) HasExternalIntegrationUrl() bool {
	if o != nil && !IsNil(o.ExternalIntegrationUrl) {
		return true
	}

	return false
}

// SetExternalIntegrationUrl gets a reference to the given string and assigns it to the ExternalIntegrationUrl field.
func (o *RcwRequests) SetExternalIntegrationUrl(v string) {
	o.ExternalIntegrationUrl = &v
}

// GetPeriodDependent returns the PeriodDependent field value if set, zero value otherwise.
func (o *RcwRequests) GetPeriodDependent() bool {
	if o == nil || IsNil(o.PeriodDependent) {
		var ret bool
		return ret
	}
	return *o.PeriodDependent
}

// GetPeriodDependentOk returns a tuple with the PeriodDependent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetPeriodDependentOk() (*bool, bool) {
	if o == nil || IsNil(o.PeriodDependent) {
		return nil, false
	}
	return o.PeriodDependent, true
}

// HasPeriodDependent returns a boolean if a field has been set.
func (o *RcwRequests) HasPeriodDependent() bool {
	if o != nil && !IsNil(o.PeriodDependent) {
		return true
	}

	return false
}

// SetPeriodDependent gets a reference to the given bool and assigns it to the PeriodDependent field.
func (o *RcwRequests) SetPeriodDependent(v bool) {
	o.PeriodDependent = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RcwRequests) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RcwRequests) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RcwRequests) SetDescription(v string) {
	o.Description = &v
}

// GetAdditionalInformation returns the AdditionalInformation field value if set, zero value otherwise.
func (o *RcwRequests) GetAdditionalInformation() string {
	if o == nil || IsNil(o.AdditionalInformation) {
		var ret string
		return ret
	}
	return *o.AdditionalInformation
}

// GetAdditionalInformationOk returns a tuple with the AdditionalInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetAdditionalInformationOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalInformation) {
		return nil, false
	}
	return o.AdditionalInformation, true
}

// HasAdditionalInformation returns a boolean if a field has been set.
func (o *RcwRequests) HasAdditionalInformation() bool {
	if o != nil && !IsNil(o.AdditionalInformation) {
		return true
	}

	return false
}

// SetAdditionalInformation gets a reference to the given string and assigns it to the AdditionalInformation field.
func (o *RcwRequests) SetAdditionalInformation(v string) {
	o.AdditionalInformation = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RcwRequests) GetScopes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RcwRequests) GetScopesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return &o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *RcwRequests) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given interface{} and assigns it to the Scopes field.
func (o *RcwRequests) SetScopes(v interface{}) {
	o.Scopes = v
}

// GetIsRecurrence returns the IsRecurrence field value if set, zero value otherwise.
func (o *RcwRequests) GetIsRecurrence() bool {
	if o == nil || IsNil(o.IsRecurrence) {
		var ret bool
		return ret
	}
	return *o.IsRecurrence
}

// GetIsRecurrenceOk returns a tuple with the IsRecurrence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetIsRecurrenceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRecurrence) {
		return nil, false
	}
	return o.IsRecurrence, true
}

// HasIsRecurrence returns a boolean if a field has been set.
func (o *RcwRequests) HasIsRecurrence() bool {
	if o != nil && !IsNil(o.IsRecurrence) {
		return true
	}

	return false
}

// SetIsRecurrence gets a reference to the given bool and assigns it to the IsRecurrence field.
func (o *RcwRequests) SetIsRecurrence(v bool) {
	o.IsRecurrence = &v
}

// GetSubmittedByUserId returns the SubmittedByUserId field value if set, zero value otherwise.
func (o *RcwRequests) GetSubmittedByUserId() int32 {
	if o == nil || IsNil(o.SubmittedByUserId) {
		var ret int32
		return ret
	}
	return *o.SubmittedByUserId
}

// GetSubmittedByUserIdOk returns a tuple with the SubmittedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequests) GetSubmittedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubmittedByUserId) {
		return nil, false
	}
	return o.SubmittedByUserId, true
}

// HasSubmittedByUserId returns a boolean if a field has been set.
func (o *RcwRequests) HasSubmittedByUserId() bool {
	if o != nil && !IsNil(o.SubmittedByUserId) {
		return true
	}

	return false
}

// SetSubmittedByUserId gets a reference to the given int32 and assigns it to the SubmittedByUserId field.
func (o *RcwRequests) SetSubmittedByUserId(v int32) {
	o.SubmittedByUserId = &v
}

func (o RcwRequests) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RcwRequests) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	toSerialize["rcw_library_request_id"] = o.RcwLibraryRequestId
	if !IsNil(o.RcwProjectId) {
		toSerialize["rcw_project_id"] = o.RcwProjectId
	}
	if !IsNil(o.AssigneeUserId) {
		toSerialize["assignee_user_id"] = o.AssigneeUserId
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.OpenDate) {
		toSerialize["open_date"] = o.OpenDate
	}
	if !IsNil(o.OpenByUserId) {
		toSerialize["open_by_user_id"] = o.OpenByUserId
	}
	if !IsNil(o.PendingReviewDate) {
		toSerialize["pending_review_date"] = o.PendingReviewDate
	}
	if !IsNil(o.PendingReviewByUserId) {
		toSerialize["pending_review_by_user_id"] = o.PendingReviewByUserId
	}
	if !IsNil(o.ReopenedDate) {
		toSerialize["reopened_date"] = o.ReopenedDate
	}
	if !IsNil(o.ReopenedByUserId) {
		toSerialize["reopened_by_user_id"] = o.ReopenedByUserId
	}
	if !IsNil(o.CompletedDate) {
		toSerialize["completed_date"] = o.CompletedDate
	}
	if !IsNil(o.CompletedByUserId) {
		toSerialize["completed_by_user_id"] = o.CompletedByUserId
	}
	if !IsNil(o.DueDate) {
		toSerialize["due_date"] = o.DueDate
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.RcwRequestRatingId) {
		toSerialize["rcw_request_rating_id"] = o.RcwRequestRatingId
	}
	toSerialize["did_notify"] = o.DidNotify
	if !IsNil(o.ExplanationText) {
		toSerialize["explanation_text"] = o.ExplanationText
	}
	if !IsNil(o.IsAutomated) {
		toSerialize["is_automated"] = o.IsAutomated
	}
	if !IsNil(o.LaunchDate) {
		toSerialize["launch_date"] = o.LaunchDate
	}
	if !IsNil(o.PeriodStart) {
		toSerialize["period_start"] = o.PeriodStart
	}
	if !IsNil(o.PeriodEnd) {
		toSerialize["period_end"] = o.PeriodEnd
	}
	if !IsNil(o.ExternalIntegrationUrl) {
		toSerialize["external_integration_url"] = o.ExternalIntegrationUrl
	}
	if !IsNil(o.PeriodDependent) {
		toSerialize["period_dependent"] = o.PeriodDependent
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AdditionalInformation) {
		toSerialize["additional_information"] = o.AdditionalInformation
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.IsRecurrence) {
		toSerialize["is_recurrence"] = o.IsRecurrence
	}
	if !IsNil(o.SubmittedByUserId) {
		toSerialize["submitted_by_user_id"] = o.SubmittedByUserId
	}
	return toSerialize, nil
}

func (o *RcwRequests) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rcw_library_request_id",
		"status",
		"did_notify",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRcwRequests := _RcwRequests{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRcwRequests)

	if err != nil {
		return err
	}

	*o = RcwRequests(varRcwRequests)

	return err
}

type NullableRcwRequests struct {
	value *RcwRequests
	isSet bool
}

func (v NullableRcwRequests) Get() *RcwRequests {
	return v.value
}

func (v *NullableRcwRequests) Set(val *RcwRequests) {
	v.value = val
	v.isSet = true
}

func (v NullableRcwRequests) IsSet() bool {
	return v.isSet
}

func (v *NullableRcwRequests) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRcwRequests(val *RcwRequests) *NullableRcwRequests {
	return &NullableRcwRequests{value: val, isSet: true}
}

func (v NullableRcwRequests) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRcwRequests) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


