/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the TestsPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestsPut{}

// TestsPut struct for TestsPut
type TestsPut struct {
	Test *TestsPutTest `json:"test,omitempty"`
	PreviousValues *TestsPutPreviousValues `json:"previous_values,omitempty"`
}

// NewTestsPut instantiates a new TestsPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestsPut() *TestsPut {
	this := TestsPut{}
	return &this
}

// NewTestsPutWithDefaults instantiates a new TestsPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestsPutWithDefaults() *TestsPut {
	this := TestsPut{}
	return &this
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *TestsPut) GetTest() TestsPutTest {
	if o == nil || IsNil(o.Test) {
		var ret TestsPutTest
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestsPut) GetTestOk() (*TestsPutTest, bool) {
	if o == nil || IsNil(o.Test) {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *TestsPut) HasTest() bool {
	if o != nil && !IsNil(o.Test) {
		return true
	}

	return false
}

// SetTest gets a reference to the given TestsPutTest and assigns it to the Test field.
func (o *TestsPut) SetTest(v TestsPutTest) {
	o.Test = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *TestsPut) GetPreviousValues() TestsPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret TestsPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestsPut) GetPreviousValuesOk() (*TestsPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *TestsPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given TestsPutPreviousValues and assigns it to the PreviousValues field.
func (o *TestsPut) SetPreviousValues(v TestsPutPreviousValues) {
	o.PreviousValues = &v
}

func (o TestsPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestsPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Test) {
		toSerialize["test"] = o.Test
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableTestsPut struct {
	value *TestsPut
	isSet bool
}

func (v NullableTestsPut) Get() *TestsPut {
	return v.value
}

func (v *NullableTestsPut) Set(val *TestsPut) {
	v.value = val
	v.isSet = true
}

func (v NullableTestsPut) IsSet() bool {
	return v.isSet
}

func (v *NullableTestsPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestsPut(val *TestsPut) *NullableTestsPut {
	return &NullableTestsPut{value: val, isSet: true}
}

func (v NullableTestsPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestsPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


