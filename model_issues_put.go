/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the IssuesPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssuesPut{}

// IssuesPut struct for IssuesPut
type IssuesPut struct {
	Issue *IssuesPutIssue `json:"issue,omitempty"`
	PreviousValues *IssuesPutPreviousValues `json:"previous_values,omitempty"`
}

// NewIssuesPut instantiates a new IssuesPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesPut() *IssuesPut {
	this := IssuesPut{}
	return &this
}

// NewIssuesPutWithDefaults instantiates a new IssuesPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesPutWithDefaults() *IssuesPut {
	this := IssuesPut{}
	return &this
}

// GetIssue returns the Issue field value if set, zero value otherwise.
func (o *IssuesPut) GetIssue() IssuesPutIssue {
	if o == nil || IsNil(o.Issue) {
		var ret IssuesPutIssue
		return ret
	}
	return *o.Issue
}

// GetIssueOk returns a tuple with the Issue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesPut) GetIssueOk() (*IssuesPutIssue, bool) {
	if o == nil || IsNil(o.Issue) {
		return nil, false
	}
	return o.Issue, true
}

// HasIssue returns a boolean if a field has been set.
func (o *IssuesPut) HasIssue() bool {
	if o != nil && !IsNil(o.Issue) {
		return true
	}

	return false
}

// SetIssue gets a reference to the given IssuesPutIssue and assigns it to the Issue field.
func (o *IssuesPut) SetIssue(v IssuesPutIssue) {
	o.Issue = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *IssuesPut) GetPreviousValues() IssuesPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret IssuesPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesPut) GetPreviousValuesOk() (*IssuesPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *IssuesPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given IssuesPutPreviousValues and assigns it to the PreviousValues field.
func (o *IssuesPut) SetPreviousValues(v IssuesPutPreviousValues) {
	o.PreviousValues = &v
}

func (o IssuesPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssuesPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Issue) {
		toSerialize["issue"] = o.Issue
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableIssuesPut struct {
	value *IssuesPut
	isSet bool
}

func (v NullableIssuesPut) Get() *IssuesPut {
	return v.value
}

func (v *NullableIssuesPut) Set(val *IssuesPut) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesPut) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesPut(val *IssuesPut) *NullableIssuesPut {
	return &NullableIssuesPut{value: val, isSet: true}
}

func (v NullableIssuesPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


