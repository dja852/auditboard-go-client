/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the EntityRisksPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityRisksPut{}

// EntityRisksPut struct for EntityRisksPut
type EntityRisksPut struct {
	EntityRisk *EntityRisksPutEntityRisk `json:"entity_risk,omitempty"`
	PreviousValues *EntityRisksPutPreviousValues `json:"previous_values,omitempty"`
}

// NewEntityRisksPut instantiates a new EntityRisksPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityRisksPut() *EntityRisksPut {
	this := EntityRisksPut{}
	return &this
}

// NewEntityRisksPutWithDefaults instantiates a new EntityRisksPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityRisksPutWithDefaults() *EntityRisksPut {
	this := EntityRisksPut{}
	return &this
}

// GetEntityRisk returns the EntityRisk field value if set, zero value otherwise.
func (o *EntityRisksPut) GetEntityRisk() EntityRisksPutEntityRisk {
	if o == nil || IsNil(o.EntityRisk) {
		var ret EntityRisksPutEntityRisk
		return ret
	}
	return *o.EntityRisk
}

// GetEntityRiskOk returns a tuple with the EntityRisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityRisksPut) GetEntityRiskOk() (*EntityRisksPutEntityRisk, bool) {
	if o == nil || IsNil(o.EntityRisk) {
		return nil, false
	}
	return o.EntityRisk, true
}

// HasEntityRisk returns a boolean if a field has been set.
func (o *EntityRisksPut) HasEntityRisk() bool {
	if o != nil && !IsNil(o.EntityRisk) {
		return true
	}

	return false
}

// SetEntityRisk gets a reference to the given EntityRisksPutEntityRisk and assigns it to the EntityRisk field.
func (o *EntityRisksPut) SetEntityRisk(v EntityRisksPutEntityRisk) {
	o.EntityRisk = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *EntityRisksPut) GetPreviousValues() EntityRisksPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret EntityRisksPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityRisksPut) GetPreviousValuesOk() (*EntityRisksPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *EntityRisksPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given EntityRisksPutPreviousValues and assigns it to the PreviousValues field.
func (o *EntityRisksPut) SetPreviousValues(v EntityRisksPutPreviousValues) {
	o.PreviousValues = &v
}

func (o EntityRisksPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityRisksPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityRisk) {
		toSerialize["entity_risk"] = o.EntityRisk
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableEntityRisksPut struct {
	value *EntityRisksPut
	isSet bool
}

func (v NullableEntityRisksPut) Get() *EntityRisksPut {
	return v.value
}

func (v *NullableEntityRisksPut) Set(val *EntityRisksPut) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityRisksPut) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityRisksPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityRisksPut(val *EntityRisksPut) *NullableEntityRisksPut {
	return &NullableEntityRisksPut{value: val, isSet: true}
}

func (v NullableEntityRisksPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityRisksPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


