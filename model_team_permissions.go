/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TeamPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamPermissions{}

// TeamPermissions struct for TeamPermissions
type TeamPermissions struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	// Note: This is a Foreign Key to `teams.id`.<fk table='teams' column='id'/>
	TeamId int32 `json:"team_id"`
	// Note: This is a Foreign Key to `global_permissions.id`.<fk table='global_permissions' column='id'/>
	GlobalPermissionId int32 `json:"global_permission_id"`
	Section string `json:"section"`
	Key string `json:"key"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type _TeamPermissions TeamPermissions

// NewTeamPermissions instantiates a new TeamPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamPermissions(teamId int32, globalPermissionId int32, section string, key string) *TeamPermissions {
	this := TeamPermissions{}
	this.TeamId = teamId
	this.GlobalPermissionId = globalPermissionId
	this.Section = section
	this.Key = key
	return &this
}

// NewTeamPermissionsWithDefaults instantiates a new TeamPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamPermissionsWithDefaults() *TeamPermissions {
	this := TeamPermissions{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TeamPermissions) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPermissions) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TeamPermissions) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TeamPermissions) SetId(v int32) {
	o.Id = &v
}

// GetTeamId returns the TeamId field value
func (o *TeamPermissions) GetTeamId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *TeamPermissions) GetTeamIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *TeamPermissions) SetTeamId(v int32) {
	o.TeamId = v
}

// GetGlobalPermissionId returns the GlobalPermissionId field value
func (o *TeamPermissions) GetGlobalPermissionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GlobalPermissionId
}

// GetGlobalPermissionIdOk returns a tuple with the GlobalPermissionId field value
// and a boolean to check if the value has been set.
func (o *TeamPermissions) GetGlobalPermissionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GlobalPermissionId, true
}

// SetGlobalPermissionId sets field value
func (o *TeamPermissions) SetGlobalPermissionId(v int32) {
	o.GlobalPermissionId = v
}

// GetSection returns the Section field value
func (o *TeamPermissions) GetSection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Section
}

// GetSectionOk returns a tuple with the Section field value
// and a boolean to check if the value has been set.
func (o *TeamPermissions) GetSectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Section, true
}

// SetSection sets field value
func (o *TeamPermissions) SetSection(v string) {
	o.Section = v
}

// GetKey returns the Key field value
func (o *TeamPermissions) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *TeamPermissions) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *TeamPermissions) SetKey(v string) {
	o.Key = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TeamPermissions) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPermissions) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TeamPermissions) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *TeamPermissions) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TeamPermissions) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPermissions) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TeamPermissions) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *TeamPermissions) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o TeamPermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["team_id"] = o.TeamId
	toSerialize["global_permission_id"] = o.GlobalPermissionId
	toSerialize["section"] = o.Section
	toSerialize["key"] = o.Key
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *TeamPermissions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"team_id",
		"global_permission_id",
		"section",
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeamPermissions := _TeamPermissions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTeamPermissions)

	if err != nil {
		return err
	}

	*o = TeamPermissions(varTeamPermissions)

	return err
}

type NullableTeamPermissions struct {
	value *TeamPermissions
	isSet bool
}

func (v NullableTeamPermissions) Get() *TeamPermissions {
	return v.value
}

func (v *NullableTeamPermissions) Set(val *TeamPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamPermissions(val *TeamPermissions) *NullableTeamPermissions {
	return &NullableTeamPermissions{value: val, isSet: true}
}

func (v NullableTeamPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


