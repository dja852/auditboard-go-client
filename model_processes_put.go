/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the ProcessesPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessesPut{}

// ProcessesPut struct for ProcessesPut
type ProcessesPut struct {
	Process *ProcessesPutProcess `json:"process,omitempty"`
	PreviousValues *ProcessesPutPreviousValues `json:"previous_values,omitempty"`
}

// NewProcessesPut instantiates a new ProcessesPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessesPut() *ProcessesPut {
	this := ProcessesPut{}
	return &this
}

// NewProcessesPutWithDefaults instantiates a new ProcessesPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessesPutWithDefaults() *ProcessesPut {
	this := ProcessesPut{}
	return &this
}

// GetProcess returns the Process field value if set, zero value otherwise.
func (o *ProcessesPut) GetProcess() ProcessesPutProcess {
	if o == nil || IsNil(o.Process) {
		var ret ProcessesPutProcess
		return ret
	}
	return *o.Process
}

// GetProcessOk returns a tuple with the Process field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessesPut) GetProcessOk() (*ProcessesPutProcess, bool) {
	if o == nil || IsNil(o.Process) {
		return nil, false
	}
	return o.Process, true
}

// HasProcess returns a boolean if a field has been set.
func (o *ProcessesPut) HasProcess() bool {
	if o != nil && !IsNil(o.Process) {
		return true
	}

	return false
}

// SetProcess gets a reference to the given ProcessesPutProcess and assigns it to the Process field.
func (o *ProcessesPut) SetProcess(v ProcessesPutProcess) {
	o.Process = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *ProcessesPut) GetPreviousValues() ProcessesPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret ProcessesPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessesPut) GetPreviousValuesOk() (*ProcessesPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *ProcessesPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given ProcessesPutPreviousValues and assigns it to the PreviousValues field.
func (o *ProcessesPut) SetPreviousValues(v ProcessesPutPreviousValues) {
	o.PreviousValues = &v
}

func (o ProcessesPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessesPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Process) {
		toSerialize["process"] = o.Process
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableProcessesPut struct {
	value *ProcessesPut
	isSet bool
}

func (v NullableProcessesPut) Get() *ProcessesPut {
	return v.value
}

func (v *NullableProcessesPut) Set(val *ProcessesPut) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessesPut) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessesPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessesPut(val *ProcessesPut) *NullableProcessesPut {
	return &NullableProcessesPut{value: val, isSet: true}
}

func (v NullableProcessesPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessesPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


