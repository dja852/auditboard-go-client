/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EsgMetricFrequencyOptionsAPIService EsgMetricFrequencyOptionsAPI service
type EsgMetricFrequencyOptionsAPIService service

type ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdDeleteRequest struct {
	ctx context.Context
	ApiService *EsgMetricFrequencyOptionsAPIService
	esgMetricFrequencyOptionId int64
}

func (r ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdDeleteRequest) Execute() (*EsgMetricFrequencyOptions, *http.Response, error) {
	return r.ApiService.EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdDeleteExecute(r)
}

/*
EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdDelete Method for EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricFrequencyOptionId Model id
 @return ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdDeleteRequest
*/
func (a *EsgMetricFrequencyOptionsAPIService) EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdDelete(ctx context.Context, esgMetricFrequencyOptionId int64) ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdDeleteRequest {
	return ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricFrequencyOptionId: esgMetricFrequencyOptionId,
	}
}

// Execute executes the request
//  @return EsgMetricFrequencyOptions
func (a *EsgMetricFrequencyOptionsAPIService) EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdDeleteExecute(r ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdDeleteRequest) (*EsgMetricFrequencyOptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricFrequencyOptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricFrequencyOptionsAPIService.EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_frequency_options/{esg_metric_frequency_option_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_frequency_option_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricFrequencyOptionId, "esgMetricFrequencyOptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGetRequest struct {
	ctx context.Context
	ApiService *EsgMetricFrequencyOptionsAPIService
	esgMetricFrequencyOptionId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGetRequest) Include(include []string) ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGetRequest {
	r.include = &include
	return r
}

func (r ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGetRequest) Execute() (*EsgMetricFrequencyOptions, *http.Response, error) {
	return r.ApiService.EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGetExecute(r)
}

/*
EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGet Method for EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricFrequencyOptionId Model id
 @return ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGetRequest
*/
func (a *EsgMetricFrequencyOptionsAPIService) EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGet(ctx context.Context, esgMetricFrequencyOptionId int64) ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGetRequest {
	return ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricFrequencyOptionId: esgMetricFrequencyOptionId,
	}
}

// Execute executes the request
//  @return EsgMetricFrequencyOptions
func (a *EsgMetricFrequencyOptionsAPIService) EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGetExecute(r ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGetRequest) (*EsgMetricFrequencyOptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricFrequencyOptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricFrequencyOptionsAPIService.EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_frequency_options/{esg_metric_frequency_option_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_frequency_option_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricFrequencyOptionId, "esgMetricFrequencyOptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPutRequest struct {
	ctx context.Context
	ApiService *EsgMetricFrequencyOptionsAPIService
	esgMetricFrequencyOptionId int64
	esgMetricFrequencyOptionsPut *EsgMetricFrequencyOptionsPut
}

func (r ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPutRequest) EsgMetricFrequencyOptionsPut(esgMetricFrequencyOptionsPut EsgMetricFrequencyOptionsPut) ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPutRequest {
	r.esgMetricFrequencyOptionsPut = &esgMetricFrequencyOptionsPut
	return r
}

func (r ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPutRequest) Execute() (*EsgMetricFrequencyOptions, *http.Response, error) {
	return r.ApiService.EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPutExecute(r)
}

/*
EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPut Method for EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricFrequencyOptionId Model id
 @return ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPutRequest
*/
func (a *EsgMetricFrequencyOptionsAPIService) EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPut(ctx context.Context, esgMetricFrequencyOptionId int64) ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPutRequest {
	return ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPutRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricFrequencyOptionId: esgMetricFrequencyOptionId,
	}
}

// Execute executes the request
//  @return EsgMetricFrequencyOptions
func (a *EsgMetricFrequencyOptionsAPIService) EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPutExecute(r ApiEsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPutRequest) (*EsgMetricFrequencyOptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricFrequencyOptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricFrequencyOptionsAPIService.EsgMetricFrequencyOptionsEsgMetricFrequencyOptionIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_frequency_options/{esg_metric_frequency_option_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_frequency_option_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricFrequencyOptionId, "esgMetricFrequencyOptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esgMetricFrequencyOptionsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricFrequencyOptionsGetRequest struct {
	ctx context.Context
	ApiService *EsgMetricFrequencyOptionsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiEsgMetricFrequencyOptionsGetRequest) Include(include []string) ApiEsgMetricFrequencyOptionsGetRequest {
	r.include = &include
	return r
}

func (r ApiEsgMetricFrequencyOptionsGetRequest) Execute() (*EsgMetricFrequencyOptionsGet200Response, *http.Response, error) {
	return r.ApiService.EsgMetricFrequencyOptionsGetExecute(r)
}

/*
EsgMetricFrequencyOptionsGet Method for EsgMetricFrequencyOptionsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEsgMetricFrequencyOptionsGetRequest
*/
func (a *EsgMetricFrequencyOptionsAPIService) EsgMetricFrequencyOptionsGet(ctx context.Context) ApiEsgMetricFrequencyOptionsGetRequest {
	return ApiEsgMetricFrequencyOptionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EsgMetricFrequencyOptionsGet200Response
func (a *EsgMetricFrequencyOptionsAPIService) EsgMetricFrequencyOptionsGetExecute(r ApiEsgMetricFrequencyOptionsGetRequest) (*EsgMetricFrequencyOptionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricFrequencyOptionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricFrequencyOptionsAPIService.EsgMetricFrequencyOptionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_frequency_options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricFrequencyOptionsPostRequest struct {
	ctx context.Context
	ApiService *EsgMetricFrequencyOptionsAPIService
	esgMetricFrequencyOptionsPostRequest *EsgMetricFrequencyOptionsPostRequest
}

func (r ApiEsgMetricFrequencyOptionsPostRequest) EsgMetricFrequencyOptionsPostRequest(esgMetricFrequencyOptionsPostRequest EsgMetricFrequencyOptionsPostRequest) ApiEsgMetricFrequencyOptionsPostRequest {
	r.esgMetricFrequencyOptionsPostRequest = &esgMetricFrequencyOptionsPostRequest
	return r
}

func (r ApiEsgMetricFrequencyOptionsPostRequest) Execute() (*EsgMetricFrequencyOptionsGet200Response, *http.Response, error) {
	return r.ApiService.EsgMetricFrequencyOptionsPostExecute(r)
}

/*
EsgMetricFrequencyOptionsPost Method for EsgMetricFrequencyOptionsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEsgMetricFrequencyOptionsPostRequest
*/
func (a *EsgMetricFrequencyOptionsAPIService) EsgMetricFrequencyOptionsPost(ctx context.Context) ApiEsgMetricFrequencyOptionsPostRequest {
	return ApiEsgMetricFrequencyOptionsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EsgMetricFrequencyOptionsGet200Response
func (a *EsgMetricFrequencyOptionsAPIService) EsgMetricFrequencyOptionsPostExecute(r ApiEsgMetricFrequencyOptionsPostRequest) (*EsgMetricFrequencyOptionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricFrequencyOptionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricFrequencyOptionsAPIService.EsgMetricFrequencyOptionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_frequency_options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esgMetricFrequencyOptionsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
