/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the AttachmentsPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachmentsPut{}

// AttachmentsPut struct for AttachmentsPut
type AttachmentsPut struct {
	Attachment *AttachmentsPutAttachment `json:"attachment,omitempty"`
	PreviousValues *AttachmentsPutPreviousValues `json:"previous_values,omitempty"`
}

// NewAttachmentsPut instantiates a new AttachmentsPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachmentsPut() *AttachmentsPut {
	this := AttachmentsPut{}
	return &this
}

// NewAttachmentsPutWithDefaults instantiates a new AttachmentsPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentsPutWithDefaults() *AttachmentsPut {
	this := AttachmentsPut{}
	return &this
}

// GetAttachment returns the Attachment field value if set, zero value otherwise.
func (o *AttachmentsPut) GetAttachment() AttachmentsPutAttachment {
	if o == nil || IsNil(o.Attachment) {
		var ret AttachmentsPutAttachment
		return ret
	}
	return *o.Attachment
}

// GetAttachmentOk returns a tuple with the Attachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentsPut) GetAttachmentOk() (*AttachmentsPutAttachment, bool) {
	if o == nil || IsNil(o.Attachment) {
		return nil, false
	}
	return o.Attachment, true
}

// HasAttachment returns a boolean if a field has been set.
func (o *AttachmentsPut) HasAttachment() bool {
	if o != nil && !IsNil(o.Attachment) {
		return true
	}

	return false
}

// SetAttachment gets a reference to the given AttachmentsPutAttachment and assigns it to the Attachment field.
func (o *AttachmentsPut) SetAttachment(v AttachmentsPutAttachment) {
	o.Attachment = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *AttachmentsPut) GetPreviousValues() AttachmentsPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret AttachmentsPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentsPut) GetPreviousValuesOk() (*AttachmentsPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *AttachmentsPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given AttachmentsPutPreviousValues and assigns it to the PreviousValues field.
func (o *AttachmentsPut) SetPreviousValues(v AttachmentsPutPreviousValues) {
	o.PreviousValues = &v
}

func (o AttachmentsPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachmentsPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attachment) {
		toSerialize["attachment"] = o.Attachment
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableAttachmentsPut struct {
	value *AttachmentsPut
	isSet bool
}

func (v NullableAttachmentsPut) Get() *AttachmentsPut {
	return v.value
}

func (v *NullableAttachmentsPut) Set(val *AttachmentsPut) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachmentsPut) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachmentsPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachmentsPut(val *AttachmentsPut) *NullableAttachmentsPut {
	return &NullableAttachmentsPut{value: val, isSet: true}
}

func (v NullableAttachmentsPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachmentsPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


