/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EsgMetricAuditableEntitiesAPIService EsgMetricAuditableEntitiesAPI service
type EsgMetricAuditableEntitiesAPIService service

type ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdDeleteRequest struct {
	ctx context.Context
	ApiService *EsgMetricAuditableEntitiesAPIService
	esgMetricAuditableEntityId int64
}

func (r ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdDeleteRequest) Execute() (*EsgMetricAuditableEntities, *http.Response, error) {
	return r.ApiService.EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdDeleteExecute(r)
}

/*
EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdDelete Method for EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricAuditableEntityId Model id
 @return ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdDeleteRequest
*/
func (a *EsgMetricAuditableEntitiesAPIService) EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdDelete(ctx context.Context, esgMetricAuditableEntityId int64) ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdDeleteRequest {
	return ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricAuditableEntityId: esgMetricAuditableEntityId,
	}
}

// Execute executes the request
//  @return EsgMetricAuditableEntities
func (a *EsgMetricAuditableEntitiesAPIService) EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdDeleteExecute(r ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdDeleteRequest) (*EsgMetricAuditableEntities, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricAuditableEntities
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricAuditableEntitiesAPIService.EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_auditable_entities/{esg_metric_auditable_entity_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_auditable_entity_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricAuditableEntityId, "esgMetricAuditableEntityId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdGetRequest struct {
	ctx context.Context
	ApiService *EsgMetricAuditableEntitiesAPIService
	esgMetricAuditableEntityId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdGetRequest) Include(include []string) ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdGetRequest {
	r.include = &include
	return r
}

func (r ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdGetRequest) Execute() (*EsgMetricAuditableEntities, *http.Response, error) {
	return r.ApiService.EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdGetExecute(r)
}

/*
EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdGet Method for EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricAuditableEntityId Model id
 @return ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdGetRequest
*/
func (a *EsgMetricAuditableEntitiesAPIService) EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdGet(ctx context.Context, esgMetricAuditableEntityId int64) ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdGetRequest {
	return ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdGetRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricAuditableEntityId: esgMetricAuditableEntityId,
	}
}

// Execute executes the request
//  @return EsgMetricAuditableEntities
func (a *EsgMetricAuditableEntitiesAPIService) EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdGetExecute(r ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdGetRequest) (*EsgMetricAuditableEntities, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricAuditableEntities
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricAuditableEntitiesAPIService.EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_auditable_entities/{esg_metric_auditable_entity_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_auditable_entity_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricAuditableEntityId, "esgMetricAuditableEntityId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdPutRequest struct {
	ctx context.Context
	ApiService *EsgMetricAuditableEntitiesAPIService
	esgMetricAuditableEntityId int64
	esgMetricAuditableEntitiesPut *EsgMetricAuditableEntitiesPut
}

func (r ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdPutRequest) EsgMetricAuditableEntitiesPut(esgMetricAuditableEntitiesPut EsgMetricAuditableEntitiesPut) ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdPutRequest {
	r.esgMetricAuditableEntitiesPut = &esgMetricAuditableEntitiesPut
	return r
}

func (r ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdPutRequest) Execute() (*EsgMetricAuditableEntities, *http.Response, error) {
	return r.ApiService.EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdPutExecute(r)
}

/*
EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdPut Method for EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricAuditableEntityId Model id
 @return ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdPutRequest
*/
func (a *EsgMetricAuditableEntitiesAPIService) EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdPut(ctx context.Context, esgMetricAuditableEntityId int64) ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdPutRequest {
	return ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdPutRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricAuditableEntityId: esgMetricAuditableEntityId,
	}
}

// Execute executes the request
//  @return EsgMetricAuditableEntities
func (a *EsgMetricAuditableEntitiesAPIService) EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdPutExecute(r ApiEsgMetricAuditableEntitiesEsgMetricAuditableEntityIdPutRequest) (*EsgMetricAuditableEntities, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricAuditableEntities
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricAuditableEntitiesAPIService.EsgMetricAuditableEntitiesEsgMetricAuditableEntityIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_auditable_entities/{esg_metric_auditable_entity_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_auditable_entity_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricAuditableEntityId, "esgMetricAuditableEntityId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esgMetricAuditableEntitiesPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricAuditableEntitiesGetRequest struct {
	ctx context.Context
	ApiService *EsgMetricAuditableEntitiesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiEsgMetricAuditableEntitiesGetRequest) Include(include []string) ApiEsgMetricAuditableEntitiesGetRequest {
	r.include = &include
	return r
}

func (r ApiEsgMetricAuditableEntitiesGetRequest) Execute() (*EsgMetricAuditableEntitiesGet200Response, *http.Response, error) {
	return r.ApiService.EsgMetricAuditableEntitiesGetExecute(r)
}

/*
EsgMetricAuditableEntitiesGet Method for EsgMetricAuditableEntitiesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEsgMetricAuditableEntitiesGetRequest
*/
func (a *EsgMetricAuditableEntitiesAPIService) EsgMetricAuditableEntitiesGet(ctx context.Context) ApiEsgMetricAuditableEntitiesGetRequest {
	return ApiEsgMetricAuditableEntitiesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EsgMetricAuditableEntitiesGet200Response
func (a *EsgMetricAuditableEntitiesAPIService) EsgMetricAuditableEntitiesGetExecute(r ApiEsgMetricAuditableEntitiesGetRequest) (*EsgMetricAuditableEntitiesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricAuditableEntitiesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricAuditableEntitiesAPIService.EsgMetricAuditableEntitiesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_auditable_entities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricAuditableEntitiesPostRequest struct {
	ctx context.Context
	ApiService *EsgMetricAuditableEntitiesAPIService
	esgMetricAuditableEntitiesPostRequest *EsgMetricAuditableEntitiesPostRequest
}

func (r ApiEsgMetricAuditableEntitiesPostRequest) EsgMetricAuditableEntitiesPostRequest(esgMetricAuditableEntitiesPostRequest EsgMetricAuditableEntitiesPostRequest) ApiEsgMetricAuditableEntitiesPostRequest {
	r.esgMetricAuditableEntitiesPostRequest = &esgMetricAuditableEntitiesPostRequest
	return r
}

func (r ApiEsgMetricAuditableEntitiesPostRequest) Execute() (*EsgMetricAuditableEntitiesGet200Response, *http.Response, error) {
	return r.ApiService.EsgMetricAuditableEntitiesPostExecute(r)
}

/*
EsgMetricAuditableEntitiesPost Method for EsgMetricAuditableEntitiesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEsgMetricAuditableEntitiesPostRequest
*/
func (a *EsgMetricAuditableEntitiesAPIService) EsgMetricAuditableEntitiesPost(ctx context.Context) ApiEsgMetricAuditableEntitiesPostRequest {
	return ApiEsgMetricAuditableEntitiesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EsgMetricAuditableEntitiesGet200Response
func (a *EsgMetricAuditableEntitiesAPIService) EsgMetricAuditableEntitiesPostExecute(r ApiEsgMetricAuditableEntitiesPostRequest) (*EsgMetricAuditableEntitiesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricAuditableEntitiesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricAuditableEntitiesAPIService.EsgMetricAuditableEntitiesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_auditable_entities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esgMetricAuditableEntitiesPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
