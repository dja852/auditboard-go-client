/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the IssuesGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssuesGet200Response{}

// IssuesGet200Response struct for IssuesGet200Response
type IssuesGet200Response struct {
	Issues []Issues `json:"issues,omitempty"`
}

// NewIssuesGet200Response instantiates a new IssuesGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesGet200Response() *IssuesGet200Response {
	this := IssuesGet200Response{}
	return &this
}

// NewIssuesGet200ResponseWithDefaults instantiates a new IssuesGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesGet200ResponseWithDefaults() *IssuesGet200Response {
	this := IssuesGet200Response{}
	return &this
}

// GetIssues returns the Issues field value if set, zero value otherwise.
func (o *IssuesGet200Response) GetIssues() []Issues {
	if o == nil || IsNil(o.Issues) {
		var ret []Issues
		return ret
	}
	return o.Issues
}

// GetIssuesOk returns a tuple with the Issues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesGet200Response) GetIssuesOk() ([]Issues, bool) {
	if o == nil || IsNil(o.Issues) {
		return nil, false
	}
	return o.Issues, true
}

// HasIssues returns a boolean if a field has been set.
func (o *IssuesGet200Response) HasIssues() bool {
	if o != nil && !IsNil(o.Issues) {
		return true
	}

	return false
}

// SetIssues gets a reference to the given []Issues and assigns it to the Issues field.
func (o *IssuesGet200Response) SetIssues(v []Issues) {
	o.Issues = v
}

func (o IssuesGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssuesGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Issues) {
		toSerialize["issues"] = o.Issues
	}
	return toSerialize, nil
}

type NullableIssuesGet200Response struct {
	value *IssuesGet200Response
	isSet bool
}

func (v NullableIssuesGet200Response) Get() *IssuesGet200Response {
	return v.value
}

func (v *NullableIssuesGet200Response) Set(val *IssuesGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesGet200Response(val *IssuesGet200Response) *NullableIssuesGet200Response {
	return &NullableIssuesGet200Response{value: val, isSet: true}
}

func (v NullableIssuesGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


