/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the RolePermissionsPutRolePermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RolePermissionsPutRolePermission{}

// RolePermissionsPutRolePermission struct for RolePermissionsPutRolePermission
type RolePermissionsPutRolePermission struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	// Note: This is a Foreign Key to `roles.id`.<fk table='roles' column='id'/>
	RoleId *int32 `json:"role_id,omitempty"`
	Section *string `json:"section,omitempty"`
	Key *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	// Note: This is a Foreign Key to `global_permissions.id`.<fk table='global_permissions' column='id'/>
	GlobalPermissionId int32 `json:"global_permission_id"`
	Scope interface{} `json:"scope,omitempty"`
	CoreModules interface{} `json:"core_modules"`
}

type _RolePermissionsPutRolePermission RolePermissionsPutRolePermission

// NewRolePermissionsPutRolePermission instantiates a new RolePermissionsPutRolePermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolePermissionsPutRolePermission(globalPermissionId int32, coreModules interface{}) *RolePermissionsPutRolePermission {
	this := RolePermissionsPutRolePermission{}
	this.GlobalPermissionId = globalPermissionId
	this.CoreModules = coreModules
	return &this
}

// NewRolePermissionsPutRolePermissionWithDefaults instantiates a new RolePermissionsPutRolePermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolePermissionsPutRolePermissionWithDefaults() *RolePermissionsPutRolePermission {
	this := RolePermissionsPutRolePermission{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RolePermissionsPutRolePermission) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissionsPutRolePermission) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RolePermissionsPutRolePermission) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RolePermissionsPutRolePermission) SetId(v int32) {
	o.Id = &v
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *RolePermissionsPutRolePermission) GetRoleId() int32 {
	if o == nil || IsNil(o.RoleId) {
		var ret int32
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissionsPutRolePermission) GetRoleIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *RolePermissionsPutRolePermission) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given int32 and assigns it to the RoleId field.
func (o *RolePermissionsPutRolePermission) SetRoleId(v int32) {
	o.RoleId = &v
}

// GetSection returns the Section field value if set, zero value otherwise.
func (o *RolePermissionsPutRolePermission) GetSection() string {
	if o == nil || IsNil(o.Section) {
		var ret string
		return ret
	}
	return *o.Section
}

// GetSectionOk returns a tuple with the Section field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissionsPutRolePermission) GetSectionOk() (*string, bool) {
	if o == nil || IsNil(o.Section) {
		return nil, false
	}
	return o.Section, true
}

// HasSection returns a boolean if a field has been set.
func (o *RolePermissionsPutRolePermission) HasSection() bool {
	if o != nil && !IsNil(o.Section) {
		return true
	}

	return false
}

// SetSection gets a reference to the given string and assigns it to the Section field.
func (o *RolePermissionsPutRolePermission) SetSection(v string) {
	o.Section = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *RolePermissionsPutRolePermission) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissionsPutRolePermission) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *RolePermissionsPutRolePermission) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *RolePermissionsPutRolePermission) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *RolePermissionsPutRolePermission) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissionsPutRolePermission) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RolePermissionsPutRolePermission) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *RolePermissionsPutRolePermission) SetValue(v string) {
	o.Value = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RolePermissionsPutRolePermission) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissionsPutRolePermission) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RolePermissionsPutRolePermission) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *RolePermissionsPutRolePermission) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RolePermissionsPutRolePermission) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissionsPutRolePermission) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RolePermissionsPutRolePermission) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *RolePermissionsPutRolePermission) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *RolePermissionsPutRolePermission) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissionsPutRolePermission) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *RolePermissionsPutRolePermission) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *RolePermissionsPutRolePermission) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetGlobalPermissionId returns the GlobalPermissionId field value
func (o *RolePermissionsPutRolePermission) GetGlobalPermissionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GlobalPermissionId
}

// GetGlobalPermissionIdOk returns a tuple with the GlobalPermissionId field value
// and a boolean to check if the value has been set.
func (o *RolePermissionsPutRolePermission) GetGlobalPermissionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GlobalPermissionId, true
}

// SetGlobalPermissionId sets field value
func (o *RolePermissionsPutRolePermission) SetGlobalPermissionId(v int32) {
	o.GlobalPermissionId = v
}

// GetScope returns the Scope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RolePermissionsPutRolePermission) GetScope() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RolePermissionsPutRolePermission) GetScopeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return &o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *RolePermissionsPutRolePermission) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given interface{} and assigns it to the Scope field.
func (o *RolePermissionsPutRolePermission) SetScope(v interface{}) {
	o.Scope = v
}

// GetCoreModules returns the CoreModules field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *RolePermissionsPutRolePermission) GetCoreModules() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CoreModules
}

// GetCoreModulesOk returns a tuple with the CoreModules field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RolePermissionsPutRolePermission) GetCoreModulesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CoreModules) {
		return nil, false
	}
	return &o.CoreModules, true
}

// SetCoreModules sets field value
func (o *RolePermissionsPutRolePermission) SetCoreModules(v interface{}) {
	o.CoreModules = v
}

func (o RolePermissionsPutRolePermission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RolePermissionsPutRolePermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RoleId) {
		toSerialize["role_id"] = o.RoleId
	}
	if !IsNil(o.Section) {
		toSerialize["section"] = o.Section
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	toSerialize["global_permission_id"] = o.GlobalPermissionId
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.CoreModules != nil {
		toSerialize["core_modules"] = o.CoreModules
	}
	return toSerialize, nil
}

type NullableRolePermissionsPutRolePermission struct {
	value *RolePermissionsPutRolePermission
	isSet bool
}

func (v NullableRolePermissionsPutRolePermission) Get() *RolePermissionsPutRolePermission {
	return v.value
}

func (v *NullableRolePermissionsPutRolePermission) Set(val *RolePermissionsPutRolePermission) {
	v.value = val
	v.isSet = true
}

func (v NullableRolePermissionsPutRolePermission) IsSet() bool {
	return v.isSet
}

func (v *NullableRolePermissionsPutRolePermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolePermissionsPutRolePermission(val *RolePermissionsPutRolePermission) *NullableRolePermissionsPutRolePermission {
	return &NullableRolePermissionsPutRolePermission{value: val, isSet: true}
}

func (v NullableRolePermissionsPutRolePermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolePermissionsPutRolePermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


