/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the SubprocessesPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubprocessesPut{}

// SubprocessesPut struct for SubprocessesPut
type SubprocessesPut struct {
	Subprocess *SubprocessesPutSubprocess `json:"subprocess,omitempty"`
	PreviousValues *SubprocessesPutPreviousValues `json:"previous_values,omitempty"`
}

// NewSubprocessesPut instantiates a new SubprocessesPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubprocessesPut() *SubprocessesPut {
	this := SubprocessesPut{}
	return &this
}

// NewSubprocessesPutWithDefaults instantiates a new SubprocessesPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubprocessesPutWithDefaults() *SubprocessesPut {
	this := SubprocessesPut{}
	return &this
}

// GetSubprocess returns the Subprocess field value if set, zero value otherwise.
func (o *SubprocessesPut) GetSubprocess() SubprocessesPutSubprocess {
	if o == nil || IsNil(o.Subprocess) {
		var ret SubprocessesPutSubprocess
		return ret
	}
	return *o.Subprocess
}

// GetSubprocessOk returns a tuple with the Subprocess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesPut) GetSubprocessOk() (*SubprocessesPutSubprocess, bool) {
	if o == nil || IsNil(o.Subprocess) {
		return nil, false
	}
	return o.Subprocess, true
}

// HasSubprocess returns a boolean if a field has been set.
func (o *SubprocessesPut) HasSubprocess() bool {
	if o != nil && !IsNil(o.Subprocess) {
		return true
	}

	return false
}

// SetSubprocess gets a reference to the given SubprocessesPutSubprocess and assigns it to the Subprocess field.
func (o *SubprocessesPut) SetSubprocess(v SubprocessesPutSubprocess) {
	o.Subprocess = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *SubprocessesPut) GetPreviousValues() SubprocessesPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret SubprocessesPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesPut) GetPreviousValuesOk() (*SubprocessesPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *SubprocessesPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given SubprocessesPutPreviousValues and assigns it to the PreviousValues field.
func (o *SubprocessesPut) SetPreviousValues(v SubprocessesPutPreviousValues) {
	o.PreviousValues = &v
}

func (o SubprocessesPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubprocessesPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subprocess) {
		toSerialize["subprocess"] = o.Subprocess
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableSubprocessesPut struct {
	value *SubprocessesPut
	isSet bool
}

func (v NullableSubprocessesPut) Get() *SubprocessesPut {
	return v.value
}

func (v *NullableSubprocessesPut) Set(val *SubprocessesPut) {
	v.value = val
	v.isSet = true
}

func (v NullableSubprocessesPut) IsSet() bool {
	return v.isSet
}

func (v *NullableSubprocessesPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubprocessesPut(val *SubprocessesPut) *NullableSubprocessesPut {
	return &NullableSubprocessesPut{value: val, isSet: true}
}

func (v NullableSubprocessesPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubprocessesPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


