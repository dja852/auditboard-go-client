/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the IssuesPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssuesPostRequest{}

// IssuesPostRequest struct for IssuesPostRequest
type IssuesPostRequest struct {
	Issue *Issues `json:"issue,omitempty"`
}

// NewIssuesPostRequest instantiates a new IssuesPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesPostRequest() *IssuesPostRequest {
	this := IssuesPostRequest{}
	return &this
}

// NewIssuesPostRequestWithDefaults instantiates a new IssuesPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesPostRequestWithDefaults() *IssuesPostRequest {
	this := IssuesPostRequest{}
	return &this
}

// GetIssue returns the Issue field value if set, zero value otherwise.
func (o *IssuesPostRequest) GetIssue() Issues {
	if o == nil || IsNil(o.Issue) {
		var ret Issues
		return ret
	}
	return *o.Issue
}

// GetIssueOk returns a tuple with the Issue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesPostRequest) GetIssueOk() (*Issues, bool) {
	if o == nil || IsNil(o.Issue) {
		return nil, false
	}
	return o.Issue, true
}

// HasIssue returns a boolean if a field has been set.
func (o *IssuesPostRequest) HasIssue() bool {
	if o != nil && !IsNil(o.Issue) {
		return true
	}

	return false
}

// SetIssue gets a reference to the given Issues and assigns it to the Issue field.
func (o *IssuesPostRequest) SetIssue(v Issues) {
	o.Issue = &v
}

func (o IssuesPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssuesPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Issue) {
		toSerialize["issue"] = o.Issue
	}
	return toSerialize, nil
}

type NullableIssuesPostRequest struct {
	value *IssuesPostRequest
	isSet bool
}

func (v NullableIssuesPostRequest) Get() *IssuesPostRequest {
	return v.value
}

func (v *NullableIssuesPostRequest) Set(val *IssuesPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesPostRequest(val *IssuesPostRequest) *NullableIssuesPostRequest {
	return &NullableIssuesPostRequest{value: val, isSet: true}
}

func (v NullableIssuesPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


