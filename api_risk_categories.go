/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RiskCategoriesAPIService RiskCategoriesAPI service
type RiskCategoriesAPIService service

type ApiRiskCategoriesGetRequest struct {
	ctx context.Context
	ApiService *RiskCategoriesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiRiskCategoriesGetRequest) Include(include []string) ApiRiskCategoriesGetRequest {
	r.include = &include
	return r
}

func (r ApiRiskCategoriesGetRequest) Execute() (*RiskCategoriesGet200Response, *http.Response, error) {
	return r.ApiService.RiskCategoriesGetExecute(r)
}

/*
RiskCategoriesGet Method for RiskCategoriesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRiskCategoriesGetRequest
*/
func (a *RiskCategoriesAPIService) RiskCategoriesGet(ctx context.Context) ApiRiskCategoriesGetRequest {
	return ApiRiskCategoriesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RiskCategoriesGet200Response
func (a *RiskCategoriesAPIService) RiskCategoriesGetExecute(r ApiRiskCategoriesGetRequest) (*RiskCategoriesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RiskCategoriesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RiskCategoriesAPIService.RiskCategoriesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/risk_categories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRiskCategoriesPostRequest struct {
	ctx context.Context
	ApiService *RiskCategoriesAPIService
	riskCategoriesPostRequest *RiskCategoriesPostRequest
}

func (r ApiRiskCategoriesPostRequest) RiskCategoriesPostRequest(riskCategoriesPostRequest RiskCategoriesPostRequest) ApiRiskCategoriesPostRequest {
	r.riskCategoriesPostRequest = &riskCategoriesPostRequest
	return r
}

func (r ApiRiskCategoriesPostRequest) Execute() (*RiskCategoriesGet200Response, *http.Response, error) {
	return r.ApiService.RiskCategoriesPostExecute(r)
}

/*
RiskCategoriesPost Method for RiskCategoriesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRiskCategoriesPostRequest
*/
func (a *RiskCategoriesAPIService) RiskCategoriesPost(ctx context.Context) ApiRiskCategoriesPostRequest {
	return ApiRiskCategoriesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RiskCategoriesGet200Response
func (a *RiskCategoriesAPIService) RiskCategoriesPostExecute(r ApiRiskCategoriesPostRequest) (*RiskCategoriesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RiskCategoriesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RiskCategoriesAPIService.RiskCategoriesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/risk_categories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.riskCategoriesPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRiskCategoriesRiskCategoryIdDeleteRequest struct {
	ctx context.Context
	ApiService *RiskCategoriesAPIService
	riskCategoryId int64
}

func (r ApiRiskCategoriesRiskCategoryIdDeleteRequest) Execute() (*RiskCategories, *http.Response, error) {
	return r.ApiService.RiskCategoriesRiskCategoryIdDeleteExecute(r)
}

/*
RiskCategoriesRiskCategoryIdDelete Method for RiskCategoriesRiskCategoryIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param riskCategoryId Model id
 @return ApiRiskCategoriesRiskCategoryIdDeleteRequest
*/
func (a *RiskCategoriesAPIService) RiskCategoriesRiskCategoryIdDelete(ctx context.Context, riskCategoryId int64) ApiRiskCategoriesRiskCategoryIdDeleteRequest {
	return ApiRiskCategoriesRiskCategoryIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		riskCategoryId: riskCategoryId,
	}
}

// Execute executes the request
//  @return RiskCategories
func (a *RiskCategoriesAPIService) RiskCategoriesRiskCategoryIdDeleteExecute(r ApiRiskCategoriesRiskCategoryIdDeleteRequest) (*RiskCategories, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RiskCategories
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RiskCategoriesAPIService.RiskCategoriesRiskCategoryIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/risk_categories/{risk_category_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"risk_category_id"+"}", url.PathEscape(parameterValueToString(r.riskCategoryId, "riskCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRiskCategoriesRiskCategoryIdGetRequest struct {
	ctx context.Context
	ApiService *RiskCategoriesAPIService
	riskCategoryId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiRiskCategoriesRiskCategoryIdGetRequest) Include(include []string) ApiRiskCategoriesRiskCategoryIdGetRequest {
	r.include = &include
	return r
}

func (r ApiRiskCategoriesRiskCategoryIdGetRequest) Execute() (*RiskCategories, *http.Response, error) {
	return r.ApiService.RiskCategoriesRiskCategoryIdGetExecute(r)
}

/*
RiskCategoriesRiskCategoryIdGet Method for RiskCategoriesRiskCategoryIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param riskCategoryId Model id
 @return ApiRiskCategoriesRiskCategoryIdGetRequest
*/
func (a *RiskCategoriesAPIService) RiskCategoriesRiskCategoryIdGet(ctx context.Context, riskCategoryId int64) ApiRiskCategoriesRiskCategoryIdGetRequest {
	return ApiRiskCategoriesRiskCategoryIdGetRequest{
		ApiService: a,
		ctx: ctx,
		riskCategoryId: riskCategoryId,
	}
}

// Execute executes the request
//  @return RiskCategories
func (a *RiskCategoriesAPIService) RiskCategoriesRiskCategoryIdGetExecute(r ApiRiskCategoriesRiskCategoryIdGetRequest) (*RiskCategories, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RiskCategories
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RiskCategoriesAPIService.RiskCategoriesRiskCategoryIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/risk_categories/{risk_category_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"risk_category_id"+"}", url.PathEscape(parameterValueToString(r.riskCategoryId, "riskCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRiskCategoriesRiskCategoryIdPutRequest struct {
	ctx context.Context
	ApiService *RiskCategoriesAPIService
	riskCategoryId int64
	riskCategoriesPut *RiskCategoriesPut
}

func (r ApiRiskCategoriesRiskCategoryIdPutRequest) RiskCategoriesPut(riskCategoriesPut RiskCategoriesPut) ApiRiskCategoriesRiskCategoryIdPutRequest {
	r.riskCategoriesPut = &riskCategoriesPut
	return r
}

func (r ApiRiskCategoriesRiskCategoryIdPutRequest) Execute() (*RiskCategories, *http.Response, error) {
	return r.ApiService.RiskCategoriesRiskCategoryIdPutExecute(r)
}

/*
RiskCategoriesRiskCategoryIdPut Method for RiskCategoriesRiskCategoryIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param riskCategoryId Model id
 @return ApiRiskCategoriesRiskCategoryIdPutRequest
*/
func (a *RiskCategoriesAPIService) RiskCategoriesRiskCategoryIdPut(ctx context.Context, riskCategoryId int64) ApiRiskCategoriesRiskCategoryIdPutRequest {
	return ApiRiskCategoriesRiskCategoryIdPutRequest{
		ApiService: a,
		ctx: ctx,
		riskCategoryId: riskCategoryId,
	}
}

// Execute executes the request
//  @return RiskCategories
func (a *RiskCategoriesAPIService) RiskCategoriesRiskCategoryIdPutExecute(r ApiRiskCategoriesRiskCategoryIdPutRequest) (*RiskCategories, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RiskCategories
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RiskCategoriesAPIService.RiskCategoriesRiskCategoryIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/risk_categories/{risk_category_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"risk_category_id"+"}", url.PathEscape(parameterValueToString(r.riskCategoryId, "riskCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.riskCategoriesPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
