/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the TestsGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestsGet200Response{}

// TestsGet200Response struct for TestsGet200Response
type TestsGet200Response struct {
	Tests []Tests `json:"tests,omitempty"`
}

// NewTestsGet200Response instantiates a new TestsGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestsGet200Response() *TestsGet200Response {
	this := TestsGet200Response{}
	return &this
}

// NewTestsGet200ResponseWithDefaults instantiates a new TestsGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestsGet200ResponseWithDefaults() *TestsGet200Response {
	this := TestsGet200Response{}
	return &this
}

// GetTests returns the Tests field value if set, zero value otherwise.
func (o *TestsGet200Response) GetTests() []Tests {
	if o == nil || IsNil(o.Tests) {
		var ret []Tests
		return ret
	}
	return o.Tests
}

// GetTestsOk returns a tuple with the Tests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestsGet200Response) GetTestsOk() ([]Tests, bool) {
	if o == nil || IsNil(o.Tests) {
		return nil, false
	}
	return o.Tests, true
}

// HasTests returns a boolean if a field has been set.
func (o *TestsGet200Response) HasTests() bool {
	if o != nil && !IsNil(o.Tests) {
		return true
	}

	return false
}

// SetTests gets a reference to the given []Tests and assigns it to the Tests field.
func (o *TestsGet200Response) SetTests(v []Tests) {
	o.Tests = v
}

func (o TestsGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestsGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tests) {
		toSerialize["tests"] = o.Tests
	}
	return toSerialize, nil
}

type NullableTestsGet200Response struct {
	value *TestsGet200Response
	isSet bool
}

func (v NullableTestsGet200Response) Get() *TestsGet200Response {
	return v.value
}

func (v *NullableTestsGet200Response) Set(val *TestsGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTestsGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTestsGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestsGet200Response(val *TestsGet200Response) *NullableTestsGet200Response {
	return &NullableTestsGet200Response{value: val, isSet: true}
}

func (v NullableTestsGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestsGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


