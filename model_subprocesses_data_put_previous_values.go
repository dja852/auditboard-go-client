/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the SubprocessesDataPutPreviousValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubprocessesDataPutPreviousValues{}

// SubprocessesDataPutPreviousValues struct for SubprocessesDataPutPreviousValues
type SubprocessesDataPutPreviousValues struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	File *string `json:"file,omitempty"`
	// Note: This is a Foreign Key to `subprocesses.id`.<fk table='subprocesses' column='id'/>
	SubprocessId *int32 `json:"subprocess_id,omitempty"`
	// Note: This is a Foreign Key to `processes_data.id`.<fk table='processes_data' column='id'/>
	ProcessesDatumId *int32 `json:"processes_datum_id,omitempty"`
	Scopes interface{} `json:"scopes,omitempty"`
}

// NewSubprocessesDataPutPreviousValues instantiates a new SubprocessesDataPutPreviousValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubprocessesDataPutPreviousValues() *SubprocessesDataPutPreviousValues {
	this := SubprocessesDataPutPreviousValues{}
	return &this
}

// NewSubprocessesDataPutPreviousValuesWithDefaults instantiates a new SubprocessesDataPutPreviousValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubprocessesDataPutPreviousValuesWithDefaults() *SubprocessesDataPutPreviousValues {
	this := SubprocessesDataPutPreviousValues{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubprocessesDataPutPreviousValues) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesDataPutPreviousValues) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubprocessesDataPutPreviousValues) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SubprocessesDataPutPreviousValues) SetId(v int32) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SubprocessesDataPutPreviousValues) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesDataPutPreviousValues) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SubprocessesDataPutPreviousValues) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *SubprocessesDataPutPreviousValues) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SubprocessesDataPutPreviousValues) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesDataPutPreviousValues) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SubprocessesDataPutPreviousValues) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *SubprocessesDataPutPreviousValues) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *SubprocessesDataPutPreviousValues) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesDataPutPreviousValues) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *SubprocessesDataPutPreviousValues) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *SubprocessesDataPutPreviousValues) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *SubprocessesDataPutPreviousValues) GetFile() string {
	if o == nil || IsNil(o.File) {
		var ret string
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesDataPutPreviousValues) GetFileOk() (*string, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *SubprocessesDataPutPreviousValues) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given string and assigns it to the File field.
func (o *SubprocessesDataPutPreviousValues) SetFile(v string) {
	o.File = &v
}

// GetSubprocessId returns the SubprocessId field value if set, zero value otherwise.
func (o *SubprocessesDataPutPreviousValues) GetSubprocessId() int32 {
	if o == nil || IsNil(o.SubprocessId) {
		var ret int32
		return ret
	}
	return *o.SubprocessId
}

// GetSubprocessIdOk returns a tuple with the SubprocessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesDataPutPreviousValues) GetSubprocessIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubprocessId) {
		return nil, false
	}
	return o.SubprocessId, true
}

// HasSubprocessId returns a boolean if a field has been set.
func (o *SubprocessesDataPutPreviousValues) HasSubprocessId() bool {
	if o != nil && !IsNil(o.SubprocessId) {
		return true
	}

	return false
}

// SetSubprocessId gets a reference to the given int32 and assigns it to the SubprocessId field.
func (o *SubprocessesDataPutPreviousValues) SetSubprocessId(v int32) {
	o.SubprocessId = &v
}

// GetProcessesDatumId returns the ProcessesDatumId field value if set, zero value otherwise.
func (o *SubprocessesDataPutPreviousValues) GetProcessesDatumId() int32 {
	if o == nil || IsNil(o.ProcessesDatumId) {
		var ret int32
		return ret
	}
	return *o.ProcessesDatumId
}

// GetProcessesDatumIdOk returns a tuple with the ProcessesDatumId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesDataPutPreviousValues) GetProcessesDatumIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProcessesDatumId) {
		return nil, false
	}
	return o.ProcessesDatumId, true
}

// HasProcessesDatumId returns a boolean if a field has been set.
func (o *SubprocessesDataPutPreviousValues) HasProcessesDatumId() bool {
	if o != nil && !IsNil(o.ProcessesDatumId) {
		return true
	}

	return false
}

// SetProcessesDatumId gets a reference to the given int32 and assigns it to the ProcessesDatumId field.
func (o *SubprocessesDataPutPreviousValues) SetProcessesDatumId(v int32) {
	o.ProcessesDatumId = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubprocessesDataPutPreviousValues) GetScopes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubprocessesDataPutPreviousValues) GetScopesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return &o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *SubprocessesDataPutPreviousValues) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given interface{} and assigns it to the Scopes field.
func (o *SubprocessesDataPutPreviousValues) SetScopes(v interface{}) {
	o.Scopes = v
}

func (o SubprocessesDataPutPreviousValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubprocessesDataPutPreviousValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	if !IsNil(o.SubprocessId) {
		toSerialize["subprocess_id"] = o.SubprocessId
	}
	if !IsNil(o.ProcessesDatumId) {
		toSerialize["processes_datum_id"] = o.ProcessesDatumId
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

type NullableSubprocessesDataPutPreviousValues struct {
	value *SubprocessesDataPutPreviousValues
	isSet bool
}

func (v NullableSubprocessesDataPutPreviousValues) Get() *SubprocessesDataPutPreviousValues {
	return v.value
}

func (v *NullableSubprocessesDataPutPreviousValues) Set(val *SubprocessesDataPutPreviousValues) {
	v.value = val
	v.isSet = true
}

func (v NullableSubprocessesDataPutPreviousValues) IsSet() bool {
	return v.isSet
}

func (v *NullableSubprocessesDataPutPreviousValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubprocessesDataPutPreviousValues(val *SubprocessesDataPutPreviousValues) *NullableSubprocessesDataPutPreviousValues {
	return &NullableSubprocessesDataPutPreviousValues{value: val, isSet: true}
}

func (v NullableSubprocessesDataPutPreviousValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubprocessesDataPutPreviousValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


