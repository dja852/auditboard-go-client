/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RcwRequestsAPIService RcwRequestsAPI service
type RcwRequestsAPIService service

type ApiRcwRequestsGetRequest struct {
	ctx context.Context
	ApiService *RcwRequestsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiRcwRequestsGetRequest) Include(include []string) ApiRcwRequestsGetRequest {
	r.include = &include
	return r
}

func (r ApiRcwRequestsGetRequest) Execute() (*RcwRequestsGet200Response, *http.Response, error) {
	return r.ApiService.RcwRequestsGetExecute(r)
}

/*
RcwRequestsGet Method for RcwRequestsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRcwRequestsGetRequest
*/
func (a *RcwRequestsAPIService) RcwRequestsGet(ctx context.Context) ApiRcwRequestsGetRequest {
	return ApiRcwRequestsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RcwRequestsGet200Response
func (a *RcwRequestsAPIService) RcwRequestsGetExecute(r ApiRcwRequestsGetRequest) (*RcwRequestsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwRequestsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwRequestsAPIService.RcwRequestsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_requests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwRequestsPostRequest struct {
	ctx context.Context
	ApiService *RcwRequestsAPIService
	rcwRequestsPostRequest *RcwRequestsPostRequest
}

func (r ApiRcwRequestsPostRequest) RcwRequestsPostRequest(rcwRequestsPostRequest RcwRequestsPostRequest) ApiRcwRequestsPostRequest {
	r.rcwRequestsPostRequest = &rcwRequestsPostRequest
	return r
}

func (r ApiRcwRequestsPostRequest) Execute() (*RcwRequestsGet200Response, *http.Response, error) {
	return r.ApiService.RcwRequestsPostExecute(r)
}

/*
RcwRequestsPost Method for RcwRequestsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRcwRequestsPostRequest
*/
func (a *RcwRequestsAPIService) RcwRequestsPost(ctx context.Context) ApiRcwRequestsPostRequest {
	return ApiRcwRequestsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RcwRequestsGet200Response
func (a *RcwRequestsAPIService) RcwRequestsPostExecute(r ApiRcwRequestsPostRequest) (*RcwRequestsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwRequestsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwRequestsAPIService.RcwRequestsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_requests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rcwRequestsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwRequestsRcwRequestIdDeleteRequest struct {
	ctx context.Context
	ApiService *RcwRequestsAPIService
	rcwRequestId int64
}

func (r ApiRcwRequestsRcwRequestIdDeleteRequest) Execute() (*RcwRequests, *http.Response, error) {
	return r.ApiService.RcwRequestsRcwRequestIdDeleteExecute(r)
}

/*
RcwRequestsRcwRequestIdDelete Method for RcwRequestsRcwRequestIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rcwRequestId Model id
 @return ApiRcwRequestsRcwRequestIdDeleteRequest
*/
func (a *RcwRequestsAPIService) RcwRequestsRcwRequestIdDelete(ctx context.Context, rcwRequestId int64) ApiRcwRequestsRcwRequestIdDeleteRequest {
	return ApiRcwRequestsRcwRequestIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		rcwRequestId: rcwRequestId,
	}
}

// Execute executes the request
//  @return RcwRequests
func (a *RcwRequestsAPIService) RcwRequestsRcwRequestIdDeleteExecute(r ApiRcwRequestsRcwRequestIdDeleteRequest) (*RcwRequests, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwRequests
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwRequestsAPIService.RcwRequestsRcwRequestIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_requests/{rcw_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"rcw_request_id"+"}", url.PathEscape(parameterValueToString(r.rcwRequestId, "rcwRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwRequestsRcwRequestIdGetRequest struct {
	ctx context.Context
	ApiService *RcwRequestsAPIService
	rcwRequestId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiRcwRequestsRcwRequestIdGetRequest) Include(include []string) ApiRcwRequestsRcwRequestIdGetRequest {
	r.include = &include
	return r
}

func (r ApiRcwRequestsRcwRequestIdGetRequest) Execute() (*RcwRequests, *http.Response, error) {
	return r.ApiService.RcwRequestsRcwRequestIdGetExecute(r)
}

/*
RcwRequestsRcwRequestIdGet Method for RcwRequestsRcwRequestIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rcwRequestId Model id
 @return ApiRcwRequestsRcwRequestIdGetRequest
*/
func (a *RcwRequestsAPIService) RcwRequestsRcwRequestIdGet(ctx context.Context, rcwRequestId int64) ApiRcwRequestsRcwRequestIdGetRequest {
	return ApiRcwRequestsRcwRequestIdGetRequest{
		ApiService: a,
		ctx: ctx,
		rcwRequestId: rcwRequestId,
	}
}

// Execute executes the request
//  @return RcwRequests
func (a *RcwRequestsAPIService) RcwRequestsRcwRequestIdGetExecute(r ApiRcwRequestsRcwRequestIdGetRequest) (*RcwRequests, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwRequests
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwRequestsAPIService.RcwRequestsRcwRequestIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_requests/{rcw_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"rcw_request_id"+"}", url.PathEscape(parameterValueToString(r.rcwRequestId, "rcwRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwRequestsRcwRequestIdPutRequest struct {
	ctx context.Context
	ApiService *RcwRequestsAPIService
	rcwRequestId int64
	rcwRequestsPut *RcwRequestsPut
}

func (r ApiRcwRequestsRcwRequestIdPutRequest) RcwRequestsPut(rcwRequestsPut RcwRequestsPut) ApiRcwRequestsRcwRequestIdPutRequest {
	r.rcwRequestsPut = &rcwRequestsPut
	return r
}

func (r ApiRcwRequestsRcwRequestIdPutRequest) Execute() (*RcwRequests, *http.Response, error) {
	return r.ApiService.RcwRequestsRcwRequestIdPutExecute(r)
}

/*
RcwRequestsRcwRequestIdPut Method for RcwRequestsRcwRequestIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rcwRequestId Model id
 @return ApiRcwRequestsRcwRequestIdPutRequest
*/
func (a *RcwRequestsAPIService) RcwRequestsRcwRequestIdPut(ctx context.Context, rcwRequestId int64) ApiRcwRequestsRcwRequestIdPutRequest {
	return ApiRcwRequestsRcwRequestIdPutRequest{
		ApiService: a,
		ctx: ctx,
		rcwRequestId: rcwRequestId,
	}
}

// Execute executes the request
//  @return RcwRequests
func (a *RcwRequestsAPIService) RcwRequestsRcwRequestIdPutExecute(r ApiRcwRequestsRcwRequestIdPutRequest) (*RcwRequests, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwRequests
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwRequestsAPIService.RcwRequestsRcwRequestIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_requests/{rcw_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"rcw_request_id"+"}", url.PathEscape(parameterValueToString(r.rcwRequestId, "rcwRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rcwRequestsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
