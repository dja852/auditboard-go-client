/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AuditableEntityRegionsAPIService AuditableEntityRegionsAPI service
type AuditableEntityRegionsAPIService service

type ApiAuditableEntityRegionsAuditableEntityRegionIdDeleteRequest struct {
	ctx context.Context
	ApiService *AuditableEntityRegionsAPIService
	auditableEntityRegionId int64
}

func (r ApiAuditableEntityRegionsAuditableEntityRegionIdDeleteRequest) Execute() (*AuditableEntityRegions, *http.Response, error) {
	return r.ApiService.AuditableEntityRegionsAuditableEntityRegionIdDeleteExecute(r)
}

/*
AuditableEntityRegionsAuditableEntityRegionIdDelete Method for AuditableEntityRegionsAuditableEntityRegionIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditableEntityRegionId Model id
 @return ApiAuditableEntityRegionsAuditableEntityRegionIdDeleteRequest
*/
func (a *AuditableEntityRegionsAPIService) AuditableEntityRegionsAuditableEntityRegionIdDelete(ctx context.Context, auditableEntityRegionId int64) ApiAuditableEntityRegionsAuditableEntityRegionIdDeleteRequest {
	return ApiAuditableEntityRegionsAuditableEntityRegionIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		auditableEntityRegionId: auditableEntityRegionId,
	}
}

// Execute executes the request
//  @return AuditableEntityRegions
func (a *AuditableEntityRegionsAPIService) AuditableEntityRegionsAuditableEntityRegionIdDeleteExecute(r ApiAuditableEntityRegionsAuditableEntityRegionIdDeleteRequest) (*AuditableEntityRegions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditableEntityRegions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditableEntityRegionsAPIService.AuditableEntityRegionsAuditableEntityRegionIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auditable_entity_regions/{auditable_entity_region_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auditable_entity_region_id"+"}", url.PathEscape(parameterValueToString(r.auditableEntityRegionId, "auditableEntityRegionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditableEntityRegionsAuditableEntityRegionIdGetRequest struct {
	ctx context.Context
	ApiService *AuditableEntityRegionsAPIService
	auditableEntityRegionId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditableEntityRegionsAuditableEntityRegionIdGetRequest) Include(include []string) ApiAuditableEntityRegionsAuditableEntityRegionIdGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditableEntityRegionsAuditableEntityRegionIdGetRequest) Execute() (*AuditableEntityRegions, *http.Response, error) {
	return r.ApiService.AuditableEntityRegionsAuditableEntityRegionIdGetExecute(r)
}

/*
AuditableEntityRegionsAuditableEntityRegionIdGet Method for AuditableEntityRegionsAuditableEntityRegionIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditableEntityRegionId Model id
 @return ApiAuditableEntityRegionsAuditableEntityRegionIdGetRequest
*/
func (a *AuditableEntityRegionsAPIService) AuditableEntityRegionsAuditableEntityRegionIdGet(ctx context.Context, auditableEntityRegionId int64) ApiAuditableEntityRegionsAuditableEntityRegionIdGetRequest {
	return ApiAuditableEntityRegionsAuditableEntityRegionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		auditableEntityRegionId: auditableEntityRegionId,
	}
}

// Execute executes the request
//  @return AuditableEntityRegions
func (a *AuditableEntityRegionsAPIService) AuditableEntityRegionsAuditableEntityRegionIdGetExecute(r ApiAuditableEntityRegionsAuditableEntityRegionIdGetRequest) (*AuditableEntityRegions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditableEntityRegions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditableEntityRegionsAPIService.AuditableEntityRegionsAuditableEntityRegionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auditable_entity_regions/{auditable_entity_region_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auditable_entity_region_id"+"}", url.PathEscape(parameterValueToString(r.auditableEntityRegionId, "auditableEntityRegionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditableEntityRegionsAuditableEntityRegionIdPutRequest struct {
	ctx context.Context
	ApiService *AuditableEntityRegionsAPIService
	auditableEntityRegionId int64
	auditableEntityRegionsPut *AuditableEntityRegionsPut
}

func (r ApiAuditableEntityRegionsAuditableEntityRegionIdPutRequest) AuditableEntityRegionsPut(auditableEntityRegionsPut AuditableEntityRegionsPut) ApiAuditableEntityRegionsAuditableEntityRegionIdPutRequest {
	r.auditableEntityRegionsPut = &auditableEntityRegionsPut
	return r
}

func (r ApiAuditableEntityRegionsAuditableEntityRegionIdPutRequest) Execute() (*AuditableEntityRegions, *http.Response, error) {
	return r.ApiService.AuditableEntityRegionsAuditableEntityRegionIdPutExecute(r)
}

/*
AuditableEntityRegionsAuditableEntityRegionIdPut Method for AuditableEntityRegionsAuditableEntityRegionIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditableEntityRegionId Model id
 @return ApiAuditableEntityRegionsAuditableEntityRegionIdPutRequest
*/
func (a *AuditableEntityRegionsAPIService) AuditableEntityRegionsAuditableEntityRegionIdPut(ctx context.Context, auditableEntityRegionId int64) ApiAuditableEntityRegionsAuditableEntityRegionIdPutRequest {
	return ApiAuditableEntityRegionsAuditableEntityRegionIdPutRequest{
		ApiService: a,
		ctx: ctx,
		auditableEntityRegionId: auditableEntityRegionId,
	}
}

// Execute executes the request
//  @return AuditableEntityRegions
func (a *AuditableEntityRegionsAPIService) AuditableEntityRegionsAuditableEntityRegionIdPutExecute(r ApiAuditableEntityRegionsAuditableEntityRegionIdPutRequest) (*AuditableEntityRegions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditableEntityRegions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditableEntityRegionsAPIService.AuditableEntityRegionsAuditableEntityRegionIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auditable_entity_regions/{auditable_entity_region_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auditable_entity_region_id"+"}", url.PathEscape(parameterValueToString(r.auditableEntityRegionId, "auditableEntityRegionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditableEntityRegionsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditableEntityRegionsGetRequest struct {
	ctx context.Context
	ApiService *AuditableEntityRegionsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditableEntityRegionsGetRequest) Include(include []string) ApiAuditableEntityRegionsGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditableEntityRegionsGetRequest) Execute() (*AuditableEntityRegionsGet200Response, *http.Response, error) {
	return r.ApiService.AuditableEntityRegionsGetExecute(r)
}

/*
AuditableEntityRegionsGet Method for AuditableEntityRegionsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditableEntityRegionsGetRequest
*/
func (a *AuditableEntityRegionsAPIService) AuditableEntityRegionsGet(ctx context.Context) ApiAuditableEntityRegionsGetRequest {
	return ApiAuditableEntityRegionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditableEntityRegionsGet200Response
func (a *AuditableEntityRegionsAPIService) AuditableEntityRegionsGetExecute(r ApiAuditableEntityRegionsGetRequest) (*AuditableEntityRegionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditableEntityRegionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditableEntityRegionsAPIService.AuditableEntityRegionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auditable_entity_regions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditableEntityRegionsPostRequest struct {
	ctx context.Context
	ApiService *AuditableEntityRegionsAPIService
	auditableEntityRegionsPostRequest *AuditableEntityRegionsPostRequest
}

func (r ApiAuditableEntityRegionsPostRequest) AuditableEntityRegionsPostRequest(auditableEntityRegionsPostRequest AuditableEntityRegionsPostRequest) ApiAuditableEntityRegionsPostRequest {
	r.auditableEntityRegionsPostRequest = &auditableEntityRegionsPostRequest
	return r
}

func (r ApiAuditableEntityRegionsPostRequest) Execute() (*AuditableEntityRegionsGet200Response, *http.Response, error) {
	return r.ApiService.AuditableEntityRegionsPostExecute(r)
}

/*
AuditableEntityRegionsPost Method for AuditableEntityRegionsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditableEntityRegionsPostRequest
*/
func (a *AuditableEntityRegionsAPIService) AuditableEntityRegionsPost(ctx context.Context) ApiAuditableEntityRegionsPostRequest {
	return ApiAuditableEntityRegionsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditableEntityRegionsGet200Response
func (a *AuditableEntityRegionsAPIService) AuditableEntityRegionsPostExecute(r ApiAuditableEntityRegionsPostRequest) (*AuditableEntityRegionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditableEntityRegionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditableEntityRegionsAPIService.AuditableEntityRegionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auditable_entity_regions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditableEntityRegionsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
