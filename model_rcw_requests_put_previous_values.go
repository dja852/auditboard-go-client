/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the RcwRequestsPutPreviousValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RcwRequestsPutPreviousValues{}

// RcwRequestsPutPreviousValues struct for RcwRequestsPutPreviousValues
type RcwRequestsPutPreviousValues struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	// Note: This is a Foreign Key to `rcw_library_requests.id`.<fk table='rcw_library_requests' column='id'/>
	RcwLibraryRequestId *int32 `json:"rcw_library_request_id,omitempty"`
	// Note: This is a Foreign Key to `rcw_projects.id`.<fk table='rcw_projects' column='id'/>
	RcwProjectId *int32 `json:"rcw_project_id,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	AssigneeUserId *int32 `json:"assignee_user_id,omitempty"`
	Status *string `json:"status,omitempty"`
	OpenDate *string `json:"open_date,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	OpenByUserId *int32 `json:"open_by_user_id,omitempty"`
	PendingReviewDate *string `json:"pending_review_date,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	PendingReviewByUserId *int32 `json:"pending_review_by_user_id,omitempty"`
	ReopenedDate *string `json:"reopened_date,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	ReopenedByUserId *int32 `json:"reopened_by_user_id,omitempty"`
	CompletedDate *string `json:"completed_date,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	CompletedByUserId *int32 `json:"completed_by_user_id,omitempty"`
	DueDate *string `json:"due_date,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	// Note: This is a Foreign Key to `rcw_request_ratings.id`.<fk table='rcw_request_ratings' column='id'/>
	RcwRequestRatingId *int32 `json:"rcw_request_rating_id,omitempty"`
	DidNotify *bool `json:"did_notify,omitempty"`
	ExplanationText *string `json:"explanation_text,omitempty"`
	IsAutomated *bool `json:"is_automated,omitempty"`
	LaunchDate *string `json:"launch_date,omitempty"`
	PeriodStart *string `json:"period_start,omitempty"`
	PeriodEnd *string `json:"period_end,omitempty"`
	ExternalIntegrationUrl *string `json:"external_integration_url,omitempty"`
	PeriodDependent *bool `json:"period_dependent,omitempty"`
	Description *string `json:"description,omitempty"`
	AdditionalInformation *string `json:"additional_information,omitempty"`
	Scopes interface{} `json:"scopes,omitempty"`
	IsRecurrence *bool `json:"is_recurrence,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	SubmittedByUserId *int32 `json:"submitted_by_user_id,omitempty"`
}

// NewRcwRequestsPutPreviousValues instantiates a new RcwRequestsPutPreviousValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRcwRequestsPutPreviousValues() *RcwRequestsPutPreviousValues {
	this := RcwRequestsPutPreviousValues{}
	var didNotify bool = false
	this.DidNotify = &didNotify
	var periodDependent bool = false
	this.PeriodDependent = &periodDependent
	return &this
}

// NewRcwRequestsPutPreviousValuesWithDefaults instantiates a new RcwRequestsPutPreviousValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRcwRequestsPutPreviousValuesWithDefaults() *RcwRequestsPutPreviousValues {
	this := RcwRequestsPutPreviousValues{}
	var didNotify bool = false
	this.DidNotify = &didNotify
	var periodDependent bool = false
	this.PeriodDependent = &periodDependent
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RcwRequestsPutPreviousValues) SetId(v int32) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *RcwRequestsPutPreviousValues) SetTitle(v string) {
	o.Title = &v
}

// GetRcwLibraryRequestId returns the RcwLibraryRequestId field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetRcwLibraryRequestId() int32 {
	if o == nil || IsNil(o.RcwLibraryRequestId) {
		var ret int32
		return ret
	}
	return *o.RcwLibraryRequestId
}

// GetRcwLibraryRequestIdOk returns a tuple with the RcwLibraryRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetRcwLibraryRequestIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RcwLibraryRequestId) {
		return nil, false
	}
	return o.RcwLibraryRequestId, true
}

// HasRcwLibraryRequestId returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasRcwLibraryRequestId() bool {
	if o != nil && !IsNil(o.RcwLibraryRequestId) {
		return true
	}

	return false
}

// SetRcwLibraryRequestId gets a reference to the given int32 and assigns it to the RcwLibraryRequestId field.
func (o *RcwRequestsPutPreviousValues) SetRcwLibraryRequestId(v int32) {
	o.RcwLibraryRequestId = &v
}

// GetRcwProjectId returns the RcwProjectId field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetRcwProjectId() int32 {
	if o == nil || IsNil(o.RcwProjectId) {
		var ret int32
		return ret
	}
	return *o.RcwProjectId
}

// GetRcwProjectIdOk returns a tuple with the RcwProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetRcwProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RcwProjectId) {
		return nil, false
	}
	return o.RcwProjectId, true
}

// HasRcwProjectId returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasRcwProjectId() bool {
	if o != nil && !IsNil(o.RcwProjectId) {
		return true
	}

	return false
}

// SetRcwProjectId gets a reference to the given int32 and assigns it to the RcwProjectId field.
func (o *RcwRequestsPutPreviousValues) SetRcwProjectId(v int32) {
	o.RcwProjectId = &v
}

// GetAssigneeUserId returns the AssigneeUserId field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetAssigneeUserId() int32 {
	if o == nil || IsNil(o.AssigneeUserId) {
		var ret int32
		return ret
	}
	return *o.AssigneeUserId
}

// GetAssigneeUserIdOk returns a tuple with the AssigneeUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetAssigneeUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AssigneeUserId) {
		return nil, false
	}
	return o.AssigneeUserId, true
}

// HasAssigneeUserId returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasAssigneeUserId() bool {
	if o != nil && !IsNil(o.AssigneeUserId) {
		return true
	}

	return false
}

// SetAssigneeUserId gets a reference to the given int32 and assigns it to the AssigneeUserId field.
func (o *RcwRequestsPutPreviousValues) SetAssigneeUserId(v int32) {
	o.AssigneeUserId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RcwRequestsPutPreviousValues) SetStatus(v string) {
	o.Status = &v
}

// GetOpenDate returns the OpenDate field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetOpenDate() string {
	if o == nil || IsNil(o.OpenDate) {
		var ret string
		return ret
	}
	return *o.OpenDate
}

// GetOpenDateOk returns a tuple with the OpenDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetOpenDateOk() (*string, bool) {
	if o == nil || IsNil(o.OpenDate) {
		return nil, false
	}
	return o.OpenDate, true
}

// HasOpenDate returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasOpenDate() bool {
	if o != nil && !IsNil(o.OpenDate) {
		return true
	}

	return false
}

// SetOpenDate gets a reference to the given string and assigns it to the OpenDate field.
func (o *RcwRequestsPutPreviousValues) SetOpenDate(v string) {
	o.OpenDate = &v
}

// GetOpenByUserId returns the OpenByUserId field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetOpenByUserId() int32 {
	if o == nil || IsNil(o.OpenByUserId) {
		var ret int32
		return ret
	}
	return *o.OpenByUserId
}

// GetOpenByUserIdOk returns a tuple with the OpenByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetOpenByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OpenByUserId) {
		return nil, false
	}
	return o.OpenByUserId, true
}

// HasOpenByUserId returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasOpenByUserId() bool {
	if o != nil && !IsNil(o.OpenByUserId) {
		return true
	}

	return false
}

// SetOpenByUserId gets a reference to the given int32 and assigns it to the OpenByUserId field.
func (o *RcwRequestsPutPreviousValues) SetOpenByUserId(v int32) {
	o.OpenByUserId = &v
}

// GetPendingReviewDate returns the PendingReviewDate field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetPendingReviewDate() string {
	if o == nil || IsNil(o.PendingReviewDate) {
		var ret string
		return ret
	}
	return *o.PendingReviewDate
}

// GetPendingReviewDateOk returns a tuple with the PendingReviewDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetPendingReviewDateOk() (*string, bool) {
	if o == nil || IsNil(o.PendingReviewDate) {
		return nil, false
	}
	return o.PendingReviewDate, true
}

// HasPendingReviewDate returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasPendingReviewDate() bool {
	if o != nil && !IsNil(o.PendingReviewDate) {
		return true
	}

	return false
}

// SetPendingReviewDate gets a reference to the given string and assigns it to the PendingReviewDate field.
func (o *RcwRequestsPutPreviousValues) SetPendingReviewDate(v string) {
	o.PendingReviewDate = &v
}

// GetPendingReviewByUserId returns the PendingReviewByUserId field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetPendingReviewByUserId() int32 {
	if o == nil || IsNil(o.PendingReviewByUserId) {
		var ret int32
		return ret
	}
	return *o.PendingReviewByUserId
}

// GetPendingReviewByUserIdOk returns a tuple with the PendingReviewByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetPendingReviewByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PendingReviewByUserId) {
		return nil, false
	}
	return o.PendingReviewByUserId, true
}

// HasPendingReviewByUserId returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasPendingReviewByUserId() bool {
	if o != nil && !IsNil(o.PendingReviewByUserId) {
		return true
	}

	return false
}

// SetPendingReviewByUserId gets a reference to the given int32 and assigns it to the PendingReviewByUserId field.
func (o *RcwRequestsPutPreviousValues) SetPendingReviewByUserId(v int32) {
	o.PendingReviewByUserId = &v
}

// GetReopenedDate returns the ReopenedDate field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetReopenedDate() string {
	if o == nil || IsNil(o.ReopenedDate) {
		var ret string
		return ret
	}
	return *o.ReopenedDate
}

// GetReopenedDateOk returns a tuple with the ReopenedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetReopenedDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReopenedDate) {
		return nil, false
	}
	return o.ReopenedDate, true
}

// HasReopenedDate returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasReopenedDate() bool {
	if o != nil && !IsNil(o.ReopenedDate) {
		return true
	}

	return false
}

// SetReopenedDate gets a reference to the given string and assigns it to the ReopenedDate field.
func (o *RcwRequestsPutPreviousValues) SetReopenedDate(v string) {
	o.ReopenedDate = &v
}

// GetReopenedByUserId returns the ReopenedByUserId field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetReopenedByUserId() int32 {
	if o == nil || IsNil(o.ReopenedByUserId) {
		var ret int32
		return ret
	}
	return *o.ReopenedByUserId
}

// GetReopenedByUserIdOk returns a tuple with the ReopenedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetReopenedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ReopenedByUserId) {
		return nil, false
	}
	return o.ReopenedByUserId, true
}

// HasReopenedByUserId returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasReopenedByUserId() bool {
	if o != nil && !IsNil(o.ReopenedByUserId) {
		return true
	}

	return false
}

// SetReopenedByUserId gets a reference to the given int32 and assigns it to the ReopenedByUserId field.
func (o *RcwRequestsPutPreviousValues) SetReopenedByUserId(v int32) {
	o.ReopenedByUserId = &v
}

// GetCompletedDate returns the CompletedDate field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetCompletedDate() string {
	if o == nil || IsNil(o.CompletedDate) {
		var ret string
		return ret
	}
	return *o.CompletedDate
}

// GetCompletedDateOk returns a tuple with the CompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetCompletedDateOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedDate) {
		return nil, false
	}
	return o.CompletedDate, true
}

// HasCompletedDate returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasCompletedDate() bool {
	if o != nil && !IsNil(o.CompletedDate) {
		return true
	}

	return false
}

// SetCompletedDate gets a reference to the given string and assigns it to the CompletedDate field.
func (o *RcwRequestsPutPreviousValues) SetCompletedDate(v string) {
	o.CompletedDate = &v
}

// GetCompletedByUserId returns the CompletedByUserId field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetCompletedByUserId() int32 {
	if o == nil || IsNil(o.CompletedByUserId) {
		var ret int32
		return ret
	}
	return *o.CompletedByUserId
}

// GetCompletedByUserIdOk returns a tuple with the CompletedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetCompletedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CompletedByUserId) {
		return nil, false
	}
	return o.CompletedByUserId, true
}

// HasCompletedByUserId returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasCompletedByUserId() bool {
	if o != nil && !IsNil(o.CompletedByUserId) {
		return true
	}

	return false
}

// SetCompletedByUserId gets a reference to the given int32 and assigns it to the CompletedByUserId field.
func (o *RcwRequestsPutPreviousValues) SetCompletedByUserId(v int32) {
	o.CompletedByUserId = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *RcwRequestsPutPreviousValues) SetDueDate(v string) {
	o.DueDate = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *RcwRequestsPutPreviousValues) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *RcwRequestsPutPreviousValues) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *RcwRequestsPutPreviousValues) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetRcwRequestRatingId returns the RcwRequestRatingId field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetRcwRequestRatingId() int32 {
	if o == nil || IsNil(o.RcwRequestRatingId) {
		var ret int32
		return ret
	}
	return *o.RcwRequestRatingId
}

// GetRcwRequestRatingIdOk returns a tuple with the RcwRequestRatingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetRcwRequestRatingIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RcwRequestRatingId) {
		return nil, false
	}
	return o.RcwRequestRatingId, true
}

// HasRcwRequestRatingId returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasRcwRequestRatingId() bool {
	if o != nil && !IsNil(o.RcwRequestRatingId) {
		return true
	}

	return false
}

// SetRcwRequestRatingId gets a reference to the given int32 and assigns it to the RcwRequestRatingId field.
func (o *RcwRequestsPutPreviousValues) SetRcwRequestRatingId(v int32) {
	o.RcwRequestRatingId = &v
}

// GetDidNotify returns the DidNotify field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetDidNotify() bool {
	if o == nil || IsNil(o.DidNotify) {
		var ret bool
		return ret
	}
	return *o.DidNotify
}

// GetDidNotifyOk returns a tuple with the DidNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetDidNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.DidNotify) {
		return nil, false
	}
	return o.DidNotify, true
}

// HasDidNotify returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasDidNotify() bool {
	if o != nil && !IsNil(o.DidNotify) {
		return true
	}

	return false
}

// SetDidNotify gets a reference to the given bool and assigns it to the DidNotify field.
func (o *RcwRequestsPutPreviousValues) SetDidNotify(v bool) {
	o.DidNotify = &v
}

// GetExplanationText returns the ExplanationText field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetExplanationText() string {
	if o == nil || IsNil(o.ExplanationText) {
		var ret string
		return ret
	}
	return *o.ExplanationText
}

// GetExplanationTextOk returns a tuple with the ExplanationText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetExplanationTextOk() (*string, bool) {
	if o == nil || IsNil(o.ExplanationText) {
		return nil, false
	}
	return o.ExplanationText, true
}

// HasExplanationText returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasExplanationText() bool {
	if o != nil && !IsNil(o.ExplanationText) {
		return true
	}

	return false
}

// SetExplanationText gets a reference to the given string and assigns it to the ExplanationText field.
func (o *RcwRequestsPutPreviousValues) SetExplanationText(v string) {
	o.ExplanationText = &v
}

// GetIsAutomated returns the IsAutomated field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetIsAutomated() bool {
	if o == nil || IsNil(o.IsAutomated) {
		var ret bool
		return ret
	}
	return *o.IsAutomated
}

// GetIsAutomatedOk returns a tuple with the IsAutomated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetIsAutomatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAutomated) {
		return nil, false
	}
	return o.IsAutomated, true
}

// HasIsAutomated returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasIsAutomated() bool {
	if o != nil && !IsNil(o.IsAutomated) {
		return true
	}

	return false
}

// SetIsAutomated gets a reference to the given bool and assigns it to the IsAutomated field.
func (o *RcwRequestsPutPreviousValues) SetIsAutomated(v bool) {
	o.IsAutomated = &v
}

// GetLaunchDate returns the LaunchDate field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetLaunchDate() string {
	if o == nil || IsNil(o.LaunchDate) {
		var ret string
		return ret
	}
	return *o.LaunchDate
}

// GetLaunchDateOk returns a tuple with the LaunchDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetLaunchDateOk() (*string, bool) {
	if o == nil || IsNil(o.LaunchDate) {
		return nil, false
	}
	return o.LaunchDate, true
}

// HasLaunchDate returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasLaunchDate() bool {
	if o != nil && !IsNil(o.LaunchDate) {
		return true
	}

	return false
}

// SetLaunchDate gets a reference to the given string and assigns it to the LaunchDate field.
func (o *RcwRequestsPutPreviousValues) SetLaunchDate(v string) {
	o.LaunchDate = &v
}

// GetPeriodStart returns the PeriodStart field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetPeriodStart() string {
	if o == nil || IsNil(o.PeriodStart) {
		var ret string
		return ret
	}
	return *o.PeriodStart
}

// GetPeriodStartOk returns a tuple with the PeriodStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetPeriodStartOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodStart) {
		return nil, false
	}
	return o.PeriodStart, true
}

// HasPeriodStart returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasPeriodStart() bool {
	if o != nil && !IsNil(o.PeriodStart) {
		return true
	}

	return false
}

// SetPeriodStart gets a reference to the given string and assigns it to the PeriodStart field.
func (o *RcwRequestsPutPreviousValues) SetPeriodStart(v string) {
	o.PeriodStart = &v
}

// GetPeriodEnd returns the PeriodEnd field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetPeriodEnd() string {
	if o == nil || IsNil(o.PeriodEnd) {
		var ret string
		return ret
	}
	return *o.PeriodEnd
}

// GetPeriodEndOk returns a tuple with the PeriodEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetPeriodEndOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodEnd) {
		return nil, false
	}
	return o.PeriodEnd, true
}

// HasPeriodEnd returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasPeriodEnd() bool {
	if o != nil && !IsNil(o.PeriodEnd) {
		return true
	}

	return false
}

// SetPeriodEnd gets a reference to the given string and assigns it to the PeriodEnd field.
func (o *RcwRequestsPutPreviousValues) SetPeriodEnd(v string) {
	o.PeriodEnd = &v
}

// GetExternalIntegrationUrl returns the ExternalIntegrationUrl field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetExternalIntegrationUrl() string {
	if o == nil || IsNil(o.ExternalIntegrationUrl) {
		var ret string
		return ret
	}
	return *o.ExternalIntegrationUrl
}

// GetExternalIntegrationUrlOk returns a tuple with the ExternalIntegrationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetExternalIntegrationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalIntegrationUrl) {
		return nil, false
	}
	return o.ExternalIntegrationUrl, true
}

// HasExternalIntegrationUrl returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasExternalIntegrationUrl() bool {
	if o != nil && !IsNil(o.ExternalIntegrationUrl) {
		return true
	}

	return false
}

// SetExternalIntegrationUrl gets a reference to the given string and assigns it to the ExternalIntegrationUrl field.
func (o *RcwRequestsPutPreviousValues) SetExternalIntegrationUrl(v string) {
	o.ExternalIntegrationUrl = &v
}

// GetPeriodDependent returns the PeriodDependent field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetPeriodDependent() bool {
	if o == nil || IsNil(o.PeriodDependent) {
		var ret bool
		return ret
	}
	return *o.PeriodDependent
}

// GetPeriodDependentOk returns a tuple with the PeriodDependent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetPeriodDependentOk() (*bool, bool) {
	if o == nil || IsNil(o.PeriodDependent) {
		return nil, false
	}
	return o.PeriodDependent, true
}

// HasPeriodDependent returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasPeriodDependent() bool {
	if o != nil && !IsNil(o.PeriodDependent) {
		return true
	}

	return false
}

// SetPeriodDependent gets a reference to the given bool and assigns it to the PeriodDependent field.
func (o *RcwRequestsPutPreviousValues) SetPeriodDependent(v bool) {
	o.PeriodDependent = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RcwRequestsPutPreviousValues) SetDescription(v string) {
	o.Description = &v
}

// GetAdditionalInformation returns the AdditionalInformation field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetAdditionalInformation() string {
	if o == nil || IsNil(o.AdditionalInformation) {
		var ret string
		return ret
	}
	return *o.AdditionalInformation
}

// GetAdditionalInformationOk returns a tuple with the AdditionalInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetAdditionalInformationOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalInformation) {
		return nil, false
	}
	return o.AdditionalInformation, true
}

// HasAdditionalInformation returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasAdditionalInformation() bool {
	if o != nil && !IsNil(o.AdditionalInformation) {
		return true
	}

	return false
}

// SetAdditionalInformation gets a reference to the given string and assigns it to the AdditionalInformation field.
func (o *RcwRequestsPutPreviousValues) SetAdditionalInformation(v string) {
	o.AdditionalInformation = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RcwRequestsPutPreviousValues) GetScopes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RcwRequestsPutPreviousValues) GetScopesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return &o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given interface{} and assigns it to the Scopes field.
func (o *RcwRequestsPutPreviousValues) SetScopes(v interface{}) {
	o.Scopes = v
}

// GetIsRecurrence returns the IsRecurrence field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetIsRecurrence() bool {
	if o == nil || IsNil(o.IsRecurrence) {
		var ret bool
		return ret
	}
	return *o.IsRecurrence
}

// GetIsRecurrenceOk returns a tuple with the IsRecurrence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetIsRecurrenceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRecurrence) {
		return nil, false
	}
	return o.IsRecurrence, true
}

// HasIsRecurrence returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasIsRecurrence() bool {
	if o != nil && !IsNil(o.IsRecurrence) {
		return true
	}

	return false
}

// SetIsRecurrence gets a reference to the given bool and assigns it to the IsRecurrence field.
func (o *RcwRequestsPutPreviousValues) SetIsRecurrence(v bool) {
	o.IsRecurrence = &v
}

// GetSubmittedByUserId returns the SubmittedByUserId field value if set, zero value otherwise.
func (o *RcwRequestsPutPreviousValues) GetSubmittedByUserId() int32 {
	if o == nil || IsNil(o.SubmittedByUserId) {
		var ret int32
		return ret
	}
	return *o.SubmittedByUserId
}

// GetSubmittedByUserIdOk returns a tuple with the SubmittedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwRequestsPutPreviousValues) GetSubmittedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubmittedByUserId) {
		return nil, false
	}
	return o.SubmittedByUserId, true
}

// HasSubmittedByUserId returns a boolean if a field has been set.
func (o *RcwRequestsPutPreviousValues) HasSubmittedByUserId() bool {
	if o != nil && !IsNil(o.SubmittedByUserId) {
		return true
	}

	return false
}

// SetSubmittedByUserId gets a reference to the given int32 and assigns it to the SubmittedByUserId field.
func (o *RcwRequestsPutPreviousValues) SetSubmittedByUserId(v int32) {
	o.SubmittedByUserId = &v
}

func (o RcwRequestsPutPreviousValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RcwRequestsPutPreviousValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.RcwLibraryRequestId) {
		toSerialize["rcw_library_request_id"] = o.RcwLibraryRequestId
	}
	if !IsNil(o.RcwProjectId) {
		toSerialize["rcw_project_id"] = o.RcwProjectId
	}
	if !IsNil(o.AssigneeUserId) {
		toSerialize["assignee_user_id"] = o.AssigneeUserId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.OpenDate) {
		toSerialize["open_date"] = o.OpenDate
	}
	if !IsNil(o.OpenByUserId) {
		toSerialize["open_by_user_id"] = o.OpenByUserId
	}
	if !IsNil(o.PendingReviewDate) {
		toSerialize["pending_review_date"] = o.PendingReviewDate
	}
	if !IsNil(o.PendingReviewByUserId) {
		toSerialize["pending_review_by_user_id"] = o.PendingReviewByUserId
	}
	if !IsNil(o.ReopenedDate) {
		toSerialize["reopened_date"] = o.ReopenedDate
	}
	if !IsNil(o.ReopenedByUserId) {
		toSerialize["reopened_by_user_id"] = o.ReopenedByUserId
	}
	if !IsNil(o.CompletedDate) {
		toSerialize["completed_date"] = o.CompletedDate
	}
	if !IsNil(o.CompletedByUserId) {
		toSerialize["completed_by_user_id"] = o.CompletedByUserId
	}
	if !IsNil(o.DueDate) {
		toSerialize["due_date"] = o.DueDate
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.RcwRequestRatingId) {
		toSerialize["rcw_request_rating_id"] = o.RcwRequestRatingId
	}
	if !IsNil(o.DidNotify) {
		toSerialize["did_notify"] = o.DidNotify
	}
	if !IsNil(o.ExplanationText) {
		toSerialize["explanation_text"] = o.ExplanationText
	}
	if !IsNil(o.IsAutomated) {
		toSerialize["is_automated"] = o.IsAutomated
	}
	if !IsNil(o.LaunchDate) {
		toSerialize["launch_date"] = o.LaunchDate
	}
	if !IsNil(o.PeriodStart) {
		toSerialize["period_start"] = o.PeriodStart
	}
	if !IsNil(o.PeriodEnd) {
		toSerialize["period_end"] = o.PeriodEnd
	}
	if !IsNil(o.ExternalIntegrationUrl) {
		toSerialize["external_integration_url"] = o.ExternalIntegrationUrl
	}
	if !IsNil(o.PeriodDependent) {
		toSerialize["period_dependent"] = o.PeriodDependent
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AdditionalInformation) {
		toSerialize["additional_information"] = o.AdditionalInformation
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.IsRecurrence) {
		toSerialize["is_recurrence"] = o.IsRecurrence
	}
	if !IsNil(o.SubmittedByUserId) {
		toSerialize["submitted_by_user_id"] = o.SubmittedByUserId
	}
	return toSerialize, nil
}

type NullableRcwRequestsPutPreviousValues struct {
	value *RcwRequestsPutPreviousValues
	isSet bool
}

func (v NullableRcwRequestsPutPreviousValues) Get() *RcwRequestsPutPreviousValues {
	return v.value
}

func (v *NullableRcwRequestsPutPreviousValues) Set(val *RcwRequestsPutPreviousValues) {
	v.value = val
	v.isSet = true
}

func (v NullableRcwRequestsPutPreviousValues) IsSet() bool {
	return v.isSet
}

func (v *NullableRcwRequestsPutPreviousValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRcwRequestsPutPreviousValues(val *RcwRequestsPutPreviousValues) *NullableRcwRequestsPutPreviousValues {
	return &NullableRcwRequestsPutPreviousValues{value: val, isSet: true}
}

func (v NullableRcwRequestsPutPreviousValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRcwRequestsPutPreviousValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


