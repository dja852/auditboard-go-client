/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RcwLibraryRequestsAPIService RcwLibraryRequestsAPI service
type RcwLibraryRequestsAPIService service

type ApiRcwLibraryRequestsGetRequest struct {
	ctx context.Context
	ApiService *RcwLibraryRequestsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiRcwLibraryRequestsGetRequest) Include(include []string) ApiRcwLibraryRequestsGetRequest {
	r.include = &include
	return r
}

func (r ApiRcwLibraryRequestsGetRequest) Execute() (*RcwLibraryRequestsGet200Response, *http.Response, error) {
	return r.ApiService.RcwLibraryRequestsGetExecute(r)
}

/*
RcwLibraryRequestsGet Method for RcwLibraryRequestsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRcwLibraryRequestsGetRequest
*/
func (a *RcwLibraryRequestsAPIService) RcwLibraryRequestsGet(ctx context.Context) ApiRcwLibraryRequestsGetRequest {
	return ApiRcwLibraryRequestsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RcwLibraryRequestsGet200Response
func (a *RcwLibraryRequestsAPIService) RcwLibraryRequestsGetExecute(r ApiRcwLibraryRequestsGetRequest) (*RcwLibraryRequestsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwLibraryRequestsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwLibraryRequestsAPIService.RcwLibraryRequestsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_library_requests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwLibraryRequestsPostRequest struct {
	ctx context.Context
	ApiService *RcwLibraryRequestsAPIService
	rcwLibraryRequestsPostRequest *RcwLibraryRequestsPostRequest
}

func (r ApiRcwLibraryRequestsPostRequest) RcwLibraryRequestsPostRequest(rcwLibraryRequestsPostRequest RcwLibraryRequestsPostRequest) ApiRcwLibraryRequestsPostRequest {
	r.rcwLibraryRequestsPostRequest = &rcwLibraryRequestsPostRequest
	return r
}

func (r ApiRcwLibraryRequestsPostRequest) Execute() (*RcwLibraryRequestsGet200Response, *http.Response, error) {
	return r.ApiService.RcwLibraryRequestsPostExecute(r)
}

/*
RcwLibraryRequestsPost Method for RcwLibraryRequestsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRcwLibraryRequestsPostRequest
*/
func (a *RcwLibraryRequestsAPIService) RcwLibraryRequestsPost(ctx context.Context) ApiRcwLibraryRequestsPostRequest {
	return ApiRcwLibraryRequestsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RcwLibraryRequestsGet200Response
func (a *RcwLibraryRequestsAPIService) RcwLibraryRequestsPostExecute(r ApiRcwLibraryRequestsPostRequest) (*RcwLibraryRequestsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwLibraryRequestsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwLibraryRequestsAPIService.RcwLibraryRequestsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_library_requests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rcwLibraryRequestsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwLibraryRequestsRcwLibraryRequestIdDeleteRequest struct {
	ctx context.Context
	ApiService *RcwLibraryRequestsAPIService
	rcwLibraryRequestId int64
}

func (r ApiRcwLibraryRequestsRcwLibraryRequestIdDeleteRequest) Execute() (*RcwLibraryRequests, *http.Response, error) {
	return r.ApiService.RcwLibraryRequestsRcwLibraryRequestIdDeleteExecute(r)
}

/*
RcwLibraryRequestsRcwLibraryRequestIdDelete Method for RcwLibraryRequestsRcwLibraryRequestIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rcwLibraryRequestId Model id
 @return ApiRcwLibraryRequestsRcwLibraryRequestIdDeleteRequest
*/
func (a *RcwLibraryRequestsAPIService) RcwLibraryRequestsRcwLibraryRequestIdDelete(ctx context.Context, rcwLibraryRequestId int64) ApiRcwLibraryRequestsRcwLibraryRequestIdDeleteRequest {
	return ApiRcwLibraryRequestsRcwLibraryRequestIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		rcwLibraryRequestId: rcwLibraryRequestId,
	}
}

// Execute executes the request
//  @return RcwLibraryRequests
func (a *RcwLibraryRequestsAPIService) RcwLibraryRequestsRcwLibraryRequestIdDeleteExecute(r ApiRcwLibraryRequestsRcwLibraryRequestIdDeleteRequest) (*RcwLibraryRequests, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwLibraryRequests
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwLibraryRequestsAPIService.RcwLibraryRequestsRcwLibraryRequestIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_library_requests/{rcw_library_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"rcw_library_request_id"+"}", url.PathEscape(parameterValueToString(r.rcwLibraryRequestId, "rcwLibraryRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwLibraryRequestsRcwLibraryRequestIdGetRequest struct {
	ctx context.Context
	ApiService *RcwLibraryRequestsAPIService
	rcwLibraryRequestId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiRcwLibraryRequestsRcwLibraryRequestIdGetRequest) Include(include []string) ApiRcwLibraryRequestsRcwLibraryRequestIdGetRequest {
	r.include = &include
	return r
}

func (r ApiRcwLibraryRequestsRcwLibraryRequestIdGetRequest) Execute() (*RcwLibraryRequests, *http.Response, error) {
	return r.ApiService.RcwLibraryRequestsRcwLibraryRequestIdGetExecute(r)
}

/*
RcwLibraryRequestsRcwLibraryRequestIdGet Method for RcwLibraryRequestsRcwLibraryRequestIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rcwLibraryRequestId Model id
 @return ApiRcwLibraryRequestsRcwLibraryRequestIdGetRequest
*/
func (a *RcwLibraryRequestsAPIService) RcwLibraryRequestsRcwLibraryRequestIdGet(ctx context.Context, rcwLibraryRequestId int64) ApiRcwLibraryRequestsRcwLibraryRequestIdGetRequest {
	return ApiRcwLibraryRequestsRcwLibraryRequestIdGetRequest{
		ApiService: a,
		ctx: ctx,
		rcwLibraryRequestId: rcwLibraryRequestId,
	}
}

// Execute executes the request
//  @return RcwLibraryRequests
func (a *RcwLibraryRequestsAPIService) RcwLibraryRequestsRcwLibraryRequestIdGetExecute(r ApiRcwLibraryRequestsRcwLibraryRequestIdGetRequest) (*RcwLibraryRequests, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwLibraryRequests
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwLibraryRequestsAPIService.RcwLibraryRequestsRcwLibraryRequestIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_library_requests/{rcw_library_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"rcw_library_request_id"+"}", url.PathEscape(parameterValueToString(r.rcwLibraryRequestId, "rcwLibraryRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwLibraryRequestsRcwLibraryRequestIdPutRequest struct {
	ctx context.Context
	ApiService *RcwLibraryRequestsAPIService
	rcwLibraryRequestId int64
	rcwLibraryRequestsPut *RcwLibraryRequestsPut
}

func (r ApiRcwLibraryRequestsRcwLibraryRequestIdPutRequest) RcwLibraryRequestsPut(rcwLibraryRequestsPut RcwLibraryRequestsPut) ApiRcwLibraryRequestsRcwLibraryRequestIdPutRequest {
	r.rcwLibraryRequestsPut = &rcwLibraryRequestsPut
	return r
}

func (r ApiRcwLibraryRequestsRcwLibraryRequestIdPutRequest) Execute() (*RcwLibraryRequests, *http.Response, error) {
	return r.ApiService.RcwLibraryRequestsRcwLibraryRequestIdPutExecute(r)
}

/*
RcwLibraryRequestsRcwLibraryRequestIdPut Method for RcwLibraryRequestsRcwLibraryRequestIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rcwLibraryRequestId Model id
 @return ApiRcwLibraryRequestsRcwLibraryRequestIdPutRequest
*/
func (a *RcwLibraryRequestsAPIService) RcwLibraryRequestsRcwLibraryRequestIdPut(ctx context.Context, rcwLibraryRequestId int64) ApiRcwLibraryRequestsRcwLibraryRequestIdPutRequest {
	return ApiRcwLibraryRequestsRcwLibraryRequestIdPutRequest{
		ApiService: a,
		ctx: ctx,
		rcwLibraryRequestId: rcwLibraryRequestId,
	}
}

// Execute executes the request
//  @return RcwLibraryRequests
func (a *RcwLibraryRequestsAPIService) RcwLibraryRequestsRcwLibraryRequestIdPutExecute(r ApiRcwLibraryRequestsRcwLibraryRequestIdPutRequest) (*RcwLibraryRequests, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwLibraryRequests
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwLibraryRequestsAPIService.RcwLibraryRequestsRcwLibraryRequestIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_library_requests/{rcw_library_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"rcw_library_request_id"+"}", url.PathEscape(parameterValueToString(r.rcwLibraryRequestId, "rcwLibraryRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rcwLibraryRequestsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
