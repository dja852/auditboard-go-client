/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BusinessUnitsAPIService BusinessUnitsAPI service
type BusinessUnitsAPIService service

type ApiBusinessUnitsBusinessUnitIdDeleteRequest struct {
	ctx context.Context
	ApiService *BusinessUnitsAPIService
	businessUnitId int64
}

func (r ApiBusinessUnitsBusinessUnitIdDeleteRequest) Execute() (*BusinessUnits, *http.Response, error) {
	return r.ApiService.BusinessUnitsBusinessUnitIdDeleteExecute(r)
}

/*
BusinessUnitsBusinessUnitIdDelete Method for BusinessUnitsBusinessUnitIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessUnitId Model id
 @return ApiBusinessUnitsBusinessUnitIdDeleteRequest
*/
func (a *BusinessUnitsAPIService) BusinessUnitsBusinessUnitIdDelete(ctx context.Context, businessUnitId int64) ApiBusinessUnitsBusinessUnitIdDeleteRequest {
	return ApiBusinessUnitsBusinessUnitIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		businessUnitId: businessUnitId,
	}
}

// Execute executes the request
//  @return BusinessUnits
func (a *BusinessUnitsAPIService) BusinessUnitsBusinessUnitIdDeleteExecute(r ApiBusinessUnitsBusinessUnitIdDeleteRequest) (*BusinessUnits, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BusinessUnits
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessUnitsAPIService.BusinessUnitsBusinessUnitIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/business_units/{business_unit_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"business_unit_id"+"}", url.PathEscape(parameterValueToString(r.businessUnitId, "businessUnitId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessUnitsBusinessUnitIdGetRequest struct {
	ctx context.Context
	ApiService *BusinessUnitsAPIService
	businessUnitId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiBusinessUnitsBusinessUnitIdGetRequest) Include(include []string) ApiBusinessUnitsBusinessUnitIdGetRequest {
	r.include = &include
	return r
}

func (r ApiBusinessUnitsBusinessUnitIdGetRequest) Execute() (*BusinessUnits, *http.Response, error) {
	return r.ApiService.BusinessUnitsBusinessUnitIdGetExecute(r)
}

/*
BusinessUnitsBusinessUnitIdGet Method for BusinessUnitsBusinessUnitIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessUnitId Model id
 @return ApiBusinessUnitsBusinessUnitIdGetRequest
*/
func (a *BusinessUnitsAPIService) BusinessUnitsBusinessUnitIdGet(ctx context.Context, businessUnitId int64) ApiBusinessUnitsBusinessUnitIdGetRequest {
	return ApiBusinessUnitsBusinessUnitIdGetRequest{
		ApiService: a,
		ctx: ctx,
		businessUnitId: businessUnitId,
	}
}

// Execute executes the request
//  @return BusinessUnits
func (a *BusinessUnitsAPIService) BusinessUnitsBusinessUnitIdGetExecute(r ApiBusinessUnitsBusinessUnitIdGetRequest) (*BusinessUnits, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BusinessUnits
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessUnitsAPIService.BusinessUnitsBusinessUnitIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/business_units/{business_unit_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"business_unit_id"+"}", url.PathEscape(parameterValueToString(r.businessUnitId, "businessUnitId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessUnitsBusinessUnitIdPutRequest struct {
	ctx context.Context
	ApiService *BusinessUnitsAPIService
	businessUnitId int64
	businessUnitsPut *BusinessUnitsPut
}

func (r ApiBusinessUnitsBusinessUnitIdPutRequest) BusinessUnitsPut(businessUnitsPut BusinessUnitsPut) ApiBusinessUnitsBusinessUnitIdPutRequest {
	r.businessUnitsPut = &businessUnitsPut
	return r
}

func (r ApiBusinessUnitsBusinessUnitIdPutRequest) Execute() (*BusinessUnits, *http.Response, error) {
	return r.ApiService.BusinessUnitsBusinessUnitIdPutExecute(r)
}

/*
BusinessUnitsBusinessUnitIdPut Method for BusinessUnitsBusinessUnitIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessUnitId Model id
 @return ApiBusinessUnitsBusinessUnitIdPutRequest
*/
func (a *BusinessUnitsAPIService) BusinessUnitsBusinessUnitIdPut(ctx context.Context, businessUnitId int64) ApiBusinessUnitsBusinessUnitIdPutRequest {
	return ApiBusinessUnitsBusinessUnitIdPutRequest{
		ApiService: a,
		ctx: ctx,
		businessUnitId: businessUnitId,
	}
}

// Execute executes the request
//  @return BusinessUnits
func (a *BusinessUnitsAPIService) BusinessUnitsBusinessUnitIdPutExecute(r ApiBusinessUnitsBusinessUnitIdPutRequest) (*BusinessUnits, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BusinessUnits
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessUnitsAPIService.BusinessUnitsBusinessUnitIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/business_units/{business_unit_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"business_unit_id"+"}", url.PathEscape(parameterValueToString(r.businessUnitId, "businessUnitId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.businessUnitsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessUnitsGetRequest struct {
	ctx context.Context
	ApiService *BusinessUnitsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiBusinessUnitsGetRequest) Include(include []string) ApiBusinessUnitsGetRequest {
	r.include = &include
	return r
}

func (r ApiBusinessUnitsGetRequest) Execute() (*BusinessUnitsGet200Response, *http.Response, error) {
	return r.ApiService.BusinessUnitsGetExecute(r)
}

/*
BusinessUnitsGet Method for BusinessUnitsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBusinessUnitsGetRequest
*/
func (a *BusinessUnitsAPIService) BusinessUnitsGet(ctx context.Context) ApiBusinessUnitsGetRequest {
	return ApiBusinessUnitsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BusinessUnitsGet200Response
func (a *BusinessUnitsAPIService) BusinessUnitsGetExecute(r ApiBusinessUnitsGetRequest) (*BusinessUnitsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BusinessUnitsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessUnitsAPIService.BusinessUnitsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/business_units"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessUnitsPostRequest struct {
	ctx context.Context
	ApiService *BusinessUnitsAPIService
	businessUnitsPostRequest *BusinessUnitsPostRequest
}

func (r ApiBusinessUnitsPostRequest) BusinessUnitsPostRequest(businessUnitsPostRequest BusinessUnitsPostRequest) ApiBusinessUnitsPostRequest {
	r.businessUnitsPostRequest = &businessUnitsPostRequest
	return r
}

func (r ApiBusinessUnitsPostRequest) Execute() (*BusinessUnitsGet200Response, *http.Response, error) {
	return r.ApiService.BusinessUnitsPostExecute(r)
}

/*
BusinessUnitsPost Method for BusinessUnitsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBusinessUnitsPostRequest
*/
func (a *BusinessUnitsAPIService) BusinessUnitsPost(ctx context.Context) ApiBusinessUnitsPostRequest {
	return ApiBusinessUnitsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BusinessUnitsGet200Response
func (a *BusinessUnitsAPIService) BusinessUnitsPostExecute(r ApiBusinessUnitsPostRequest) (*BusinessUnitsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BusinessUnitsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessUnitsAPIService.BusinessUnitsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/business_units"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.businessUnitsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
