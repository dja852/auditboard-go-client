/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the AuditQuestionsPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditQuestionsPut{}

// AuditQuestionsPut struct for AuditQuestionsPut
type AuditQuestionsPut struct {
	AuditQuestion *AuditQuestionsPutAuditQuestion `json:"audit_question,omitempty"`
	PreviousValues *AuditQuestionsPutPreviousValues `json:"previous_values,omitempty"`
}

// NewAuditQuestionsPut instantiates a new AuditQuestionsPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditQuestionsPut() *AuditQuestionsPut {
	this := AuditQuestionsPut{}
	return &this
}

// NewAuditQuestionsPutWithDefaults instantiates a new AuditQuestionsPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditQuestionsPutWithDefaults() *AuditQuestionsPut {
	this := AuditQuestionsPut{}
	return &this
}

// GetAuditQuestion returns the AuditQuestion field value if set, zero value otherwise.
func (o *AuditQuestionsPut) GetAuditQuestion() AuditQuestionsPutAuditQuestion {
	if o == nil || IsNil(o.AuditQuestion) {
		var ret AuditQuestionsPutAuditQuestion
		return ret
	}
	return *o.AuditQuestion
}

// GetAuditQuestionOk returns a tuple with the AuditQuestion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPut) GetAuditQuestionOk() (*AuditQuestionsPutAuditQuestion, bool) {
	if o == nil || IsNil(o.AuditQuestion) {
		return nil, false
	}
	return o.AuditQuestion, true
}

// HasAuditQuestion returns a boolean if a field has been set.
func (o *AuditQuestionsPut) HasAuditQuestion() bool {
	if o != nil && !IsNil(o.AuditQuestion) {
		return true
	}

	return false
}

// SetAuditQuestion gets a reference to the given AuditQuestionsPutAuditQuestion and assigns it to the AuditQuestion field.
func (o *AuditQuestionsPut) SetAuditQuestion(v AuditQuestionsPutAuditQuestion) {
	o.AuditQuestion = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *AuditQuestionsPut) GetPreviousValues() AuditQuestionsPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret AuditQuestionsPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPut) GetPreviousValuesOk() (*AuditQuestionsPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *AuditQuestionsPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given AuditQuestionsPutPreviousValues and assigns it to the PreviousValues field.
func (o *AuditQuestionsPut) SetPreviousValues(v AuditQuestionsPutPreviousValues) {
	o.PreviousValues = &v
}

func (o AuditQuestionsPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditQuestionsPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuditQuestion) {
		toSerialize["audit_question"] = o.AuditQuestion
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableAuditQuestionsPut struct {
	value *AuditQuestionsPut
	isSet bool
}

func (v NullableAuditQuestionsPut) Get() *AuditQuestionsPut {
	return v.value
}

func (v *NullableAuditQuestionsPut) Set(val *AuditQuestionsPut) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditQuestionsPut) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditQuestionsPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditQuestionsPut(val *AuditQuestionsPut) *NullableAuditQuestionsPut {
	return &NullableAuditQuestionsPut{value: val, isSet: true}
}

func (v NullableAuditQuestionsPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditQuestionsPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


