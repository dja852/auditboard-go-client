/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the CommentsPutPreviousValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentsPutPreviousValues{}

// CommentsPutPreviousValues struct for CommentsPutPreviousValues
type CommentsPutPreviousValues struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	// Note: This is a Foreign Key to `comments.id`.<fk table='comments' column='id'/>
	ParentCommentId *int32 `json:"parent_comment_id,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	OwnerUserId *int32 `json:"owner_user_id,omitempty"`
	Type *string `json:"type,omitempty"`
	Status *string `json:"status,omitempty"`
	MessageRaw *string `json:"message_raw,omitempty"`
	MessageHtml *string `json:"message_html,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	CommentableId *int32 `json:"commentable_id,omitempty"`
	CommentableType *string `json:"commentable_type,omitempty"`
	ReferenceMeta interface{} `json:"reference_meta,omitempty"`
	// Note: This is a Foreign Key to `attachments.id`.<fk table='attachments' column='id'/>
	OriginAttachmentId *int32 `json:"origin_attachment_id,omitempty"`
	// Note: This is a Foreign Key to `files.id`.<fk table='files' column='id'/>
	OriginFileId *int32 `json:"origin_file_id,omitempty"`
	Scopes interface{} `json:"scopes,omitempty"`
	ExternalIntegrationId *string `json:"external_integration_id,omitempty"`
	ExternalIntegrationAuthor interface{} `json:"external_integration_author,omitempty"`
	OriginatingPath *string `json:"originating_path,omitempty"`
}

// NewCommentsPutPreviousValues instantiates a new CommentsPutPreviousValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentsPutPreviousValues() *CommentsPutPreviousValues {
	this := CommentsPutPreviousValues{}
	var externalIntegrationId string = ""
	this.ExternalIntegrationId = &externalIntegrationId
	return &this
}

// NewCommentsPutPreviousValuesWithDefaults instantiates a new CommentsPutPreviousValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentsPutPreviousValuesWithDefaults() *CommentsPutPreviousValues {
	this := CommentsPutPreviousValues{}
	var externalIntegrationId string = ""
	this.ExternalIntegrationId = &externalIntegrationId
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CommentsPutPreviousValues) SetId(v int32) {
	o.Id = &v
}

// GetParentCommentId returns the ParentCommentId field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetParentCommentId() int32 {
	if o == nil || IsNil(o.ParentCommentId) {
		var ret int32
		return ret
	}
	return *o.ParentCommentId
}

// GetParentCommentIdOk returns a tuple with the ParentCommentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetParentCommentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ParentCommentId) {
		return nil, false
	}
	return o.ParentCommentId, true
}

// HasParentCommentId returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasParentCommentId() bool {
	if o != nil && !IsNil(o.ParentCommentId) {
		return true
	}

	return false
}

// SetParentCommentId gets a reference to the given int32 and assigns it to the ParentCommentId field.
func (o *CommentsPutPreviousValues) SetParentCommentId(v int32) {
	o.ParentCommentId = &v
}

// GetOwnerUserId returns the OwnerUserId field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetOwnerUserId() int32 {
	if o == nil || IsNil(o.OwnerUserId) {
		var ret int32
		return ret
	}
	return *o.OwnerUserId
}

// GetOwnerUserIdOk returns a tuple with the OwnerUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetOwnerUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OwnerUserId) {
		return nil, false
	}
	return o.OwnerUserId, true
}

// HasOwnerUserId returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasOwnerUserId() bool {
	if o != nil && !IsNil(o.OwnerUserId) {
		return true
	}

	return false
}

// SetOwnerUserId gets a reference to the given int32 and assigns it to the OwnerUserId field.
func (o *CommentsPutPreviousValues) SetOwnerUserId(v int32) {
	o.OwnerUserId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CommentsPutPreviousValues) SetType(v string) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CommentsPutPreviousValues) SetStatus(v string) {
	o.Status = &v
}

// GetMessageRaw returns the MessageRaw field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetMessageRaw() string {
	if o == nil || IsNil(o.MessageRaw) {
		var ret string
		return ret
	}
	return *o.MessageRaw
}

// GetMessageRawOk returns a tuple with the MessageRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetMessageRawOk() (*string, bool) {
	if o == nil || IsNil(o.MessageRaw) {
		return nil, false
	}
	return o.MessageRaw, true
}

// HasMessageRaw returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasMessageRaw() bool {
	if o != nil && !IsNil(o.MessageRaw) {
		return true
	}

	return false
}

// SetMessageRaw gets a reference to the given string and assigns it to the MessageRaw field.
func (o *CommentsPutPreviousValues) SetMessageRaw(v string) {
	o.MessageRaw = &v
}

// GetMessageHtml returns the MessageHtml field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetMessageHtml() string {
	if o == nil || IsNil(o.MessageHtml) {
		var ret string
		return ret
	}
	return *o.MessageHtml
}

// GetMessageHtmlOk returns a tuple with the MessageHtml field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetMessageHtmlOk() (*string, bool) {
	if o == nil || IsNil(o.MessageHtml) {
		return nil, false
	}
	return o.MessageHtml, true
}

// HasMessageHtml returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasMessageHtml() bool {
	if o != nil && !IsNil(o.MessageHtml) {
		return true
	}

	return false
}

// SetMessageHtml gets a reference to the given string and assigns it to the MessageHtml field.
func (o *CommentsPutPreviousValues) SetMessageHtml(v string) {
	o.MessageHtml = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *CommentsPutPreviousValues) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *CommentsPutPreviousValues) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *CommentsPutPreviousValues) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetCommentableId returns the CommentableId field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetCommentableId() int32 {
	if o == nil || IsNil(o.CommentableId) {
		var ret int32
		return ret
	}
	return *o.CommentableId
}

// GetCommentableIdOk returns a tuple with the CommentableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetCommentableIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CommentableId) {
		return nil, false
	}
	return o.CommentableId, true
}

// HasCommentableId returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasCommentableId() bool {
	if o != nil && !IsNil(o.CommentableId) {
		return true
	}

	return false
}

// SetCommentableId gets a reference to the given int32 and assigns it to the CommentableId field.
func (o *CommentsPutPreviousValues) SetCommentableId(v int32) {
	o.CommentableId = &v
}

// GetCommentableType returns the CommentableType field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetCommentableType() string {
	if o == nil || IsNil(o.CommentableType) {
		var ret string
		return ret
	}
	return *o.CommentableType
}

// GetCommentableTypeOk returns a tuple with the CommentableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetCommentableTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CommentableType) {
		return nil, false
	}
	return o.CommentableType, true
}

// HasCommentableType returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasCommentableType() bool {
	if o != nil && !IsNil(o.CommentableType) {
		return true
	}

	return false
}

// SetCommentableType gets a reference to the given string and assigns it to the CommentableType field.
func (o *CommentsPutPreviousValues) SetCommentableType(v string) {
	o.CommentableType = &v
}

// GetReferenceMeta returns the ReferenceMeta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommentsPutPreviousValues) GetReferenceMeta() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ReferenceMeta
}

// GetReferenceMetaOk returns a tuple with the ReferenceMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommentsPutPreviousValues) GetReferenceMetaOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ReferenceMeta) {
		return nil, false
	}
	return &o.ReferenceMeta, true
}

// HasReferenceMeta returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasReferenceMeta() bool {
	if o != nil && !IsNil(o.ReferenceMeta) {
		return true
	}

	return false
}

// SetReferenceMeta gets a reference to the given interface{} and assigns it to the ReferenceMeta field.
func (o *CommentsPutPreviousValues) SetReferenceMeta(v interface{}) {
	o.ReferenceMeta = v
}

// GetOriginAttachmentId returns the OriginAttachmentId field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetOriginAttachmentId() int32 {
	if o == nil || IsNil(o.OriginAttachmentId) {
		var ret int32
		return ret
	}
	return *o.OriginAttachmentId
}

// GetOriginAttachmentIdOk returns a tuple with the OriginAttachmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetOriginAttachmentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OriginAttachmentId) {
		return nil, false
	}
	return o.OriginAttachmentId, true
}

// HasOriginAttachmentId returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasOriginAttachmentId() bool {
	if o != nil && !IsNil(o.OriginAttachmentId) {
		return true
	}

	return false
}

// SetOriginAttachmentId gets a reference to the given int32 and assigns it to the OriginAttachmentId field.
func (o *CommentsPutPreviousValues) SetOriginAttachmentId(v int32) {
	o.OriginAttachmentId = &v
}

// GetOriginFileId returns the OriginFileId field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetOriginFileId() int32 {
	if o == nil || IsNil(o.OriginFileId) {
		var ret int32
		return ret
	}
	return *o.OriginFileId
}

// GetOriginFileIdOk returns a tuple with the OriginFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetOriginFileIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OriginFileId) {
		return nil, false
	}
	return o.OriginFileId, true
}

// HasOriginFileId returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasOriginFileId() bool {
	if o != nil && !IsNil(o.OriginFileId) {
		return true
	}

	return false
}

// SetOriginFileId gets a reference to the given int32 and assigns it to the OriginFileId field.
func (o *CommentsPutPreviousValues) SetOriginFileId(v int32) {
	o.OriginFileId = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommentsPutPreviousValues) GetScopes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommentsPutPreviousValues) GetScopesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return &o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given interface{} and assigns it to the Scopes field.
func (o *CommentsPutPreviousValues) SetScopes(v interface{}) {
	o.Scopes = v
}

// GetExternalIntegrationId returns the ExternalIntegrationId field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetExternalIntegrationId() string {
	if o == nil || IsNil(o.ExternalIntegrationId) {
		var ret string
		return ret
	}
	return *o.ExternalIntegrationId
}

// GetExternalIntegrationIdOk returns a tuple with the ExternalIntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetExternalIntegrationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalIntegrationId) {
		return nil, false
	}
	return o.ExternalIntegrationId, true
}

// HasExternalIntegrationId returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasExternalIntegrationId() bool {
	if o != nil && !IsNil(o.ExternalIntegrationId) {
		return true
	}

	return false
}

// SetExternalIntegrationId gets a reference to the given string and assigns it to the ExternalIntegrationId field.
func (o *CommentsPutPreviousValues) SetExternalIntegrationId(v string) {
	o.ExternalIntegrationId = &v
}

// GetExternalIntegrationAuthor returns the ExternalIntegrationAuthor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommentsPutPreviousValues) GetExternalIntegrationAuthor() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ExternalIntegrationAuthor
}

// GetExternalIntegrationAuthorOk returns a tuple with the ExternalIntegrationAuthor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommentsPutPreviousValues) GetExternalIntegrationAuthorOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ExternalIntegrationAuthor) {
		return nil, false
	}
	return &o.ExternalIntegrationAuthor, true
}

// HasExternalIntegrationAuthor returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasExternalIntegrationAuthor() bool {
	if o != nil && !IsNil(o.ExternalIntegrationAuthor) {
		return true
	}

	return false
}

// SetExternalIntegrationAuthor gets a reference to the given interface{} and assigns it to the ExternalIntegrationAuthor field.
func (o *CommentsPutPreviousValues) SetExternalIntegrationAuthor(v interface{}) {
	o.ExternalIntegrationAuthor = v
}

// GetOriginatingPath returns the OriginatingPath field value if set, zero value otherwise.
func (o *CommentsPutPreviousValues) GetOriginatingPath() string {
	if o == nil || IsNil(o.OriginatingPath) {
		var ret string
		return ret
	}
	return *o.OriginatingPath
}

// GetOriginatingPathOk returns a tuple with the OriginatingPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPutPreviousValues) GetOriginatingPathOk() (*string, bool) {
	if o == nil || IsNil(o.OriginatingPath) {
		return nil, false
	}
	return o.OriginatingPath, true
}

// HasOriginatingPath returns a boolean if a field has been set.
func (o *CommentsPutPreviousValues) HasOriginatingPath() bool {
	if o != nil && !IsNil(o.OriginatingPath) {
		return true
	}

	return false
}

// SetOriginatingPath gets a reference to the given string and assigns it to the OriginatingPath field.
func (o *CommentsPutPreviousValues) SetOriginatingPath(v string) {
	o.OriginatingPath = &v
}

func (o CommentsPutPreviousValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentsPutPreviousValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ParentCommentId) {
		toSerialize["parent_comment_id"] = o.ParentCommentId
	}
	if !IsNil(o.OwnerUserId) {
		toSerialize["owner_user_id"] = o.OwnerUserId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.MessageRaw) {
		toSerialize["message_raw"] = o.MessageRaw
	}
	if !IsNil(o.MessageHtml) {
		toSerialize["message_html"] = o.MessageHtml
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.CommentableId) {
		toSerialize["commentable_id"] = o.CommentableId
	}
	if !IsNil(o.CommentableType) {
		toSerialize["commentable_type"] = o.CommentableType
	}
	if o.ReferenceMeta != nil {
		toSerialize["reference_meta"] = o.ReferenceMeta
	}
	if !IsNil(o.OriginAttachmentId) {
		toSerialize["origin_attachment_id"] = o.OriginAttachmentId
	}
	if !IsNil(o.OriginFileId) {
		toSerialize["origin_file_id"] = o.OriginFileId
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.ExternalIntegrationId) {
		toSerialize["external_integration_id"] = o.ExternalIntegrationId
	}
	if o.ExternalIntegrationAuthor != nil {
		toSerialize["external_integration_author"] = o.ExternalIntegrationAuthor
	}
	if !IsNil(o.OriginatingPath) {
		toSerialize["originating_path"] = o.OriginatingPath
	}
	return toSerialize, nil
}

type NullableCommentsPutPreviousValues struct {
	value *CommentsPutPreviousValues
	isSet bool
}

func (v NullableCommentsPutPreviousValues) Get() *CommentsPutPreviousValues {
	return v.value
}

func (v *NullableCommentsPutPreviousValues) Set(val *CommentsPutPreviousValues) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentsPutPreviousValues) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentsPutPreviousValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentsPutPreviousValues(val *CommentsPutPreviousValues) *NullableCommentsPutPreviousValues {
	return &NullableCommentsPutPreviousValues{value: val, isSet: true}
}

func (v NullableCommentsPutPreviousValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentsPutPreviousValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


