/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the RolePermissionsPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RolePermissionsPut{}

// RolePermissionsPut struct for RolePermissionsPut
type RolePermissionsPut struct {
	RolePermission *RolePermissionsPutRolePermission `json:"role_permission,omitempty"`
	PreviousValues *RolePermissionsPutPreviousValues `json:"previous_values,omitempty"`
}

// NewRolePermissionsPut instantiates a new RolePermissionsPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolePermissionsPut() *RolePermissionsPut {
	this := RolePermissionsPut{}
	return &this
}

// NewRolePermissionsPutWithDefaults instantiates a new RolePermissionsPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolePermissionsPutWithDefaults() *RolePermissionsPut {
	this := RolePermissionsPut{}
	return &this
}

// GetRolePermission returns the RolePermission field value if set, zero value otherwise.
func (o *RolePermissionsPut) GetRolePermission() RolePermissionsPutRolePermission {
	if o == nil || IsNil(o.RolePermission) {
		var ret RolePermissionsPutRolePermission
		return ret
	}
	return *o.RolePermission
}

// GetRolePermissionOk returns a tuple with the RolePermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissionsPut) GetRolePermissionOk() (*RolePermissionsPutRolePermission, bool) {
	if o == nil || IsNil(o.RolePermission) {
		return nil, false
	}
	return o.RolePermission, true
}

// HasRolePermission returns a boolean if a field has been set.
func (o *RolePermissionsPut) HasRolePermission() bool {
	if o != nil && !IsNil(o.RolePermission) {
		return true
	}

	return false
}

// SetRolePermission gets a reference to the given RolePermissionsPutRolePermission and assigns it to the RolePermission field.
func (o *RolePermissionsPut) SetRolePermission(v RolePermissionsPutRolePermission) {
	o.RolePermission = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *RolePermissionsPut) GetPreviousValues() RolePermissionsPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret RolePermissionsPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissionsPut) GetPreviousValuesOk() (*RolePermissionsPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *RolePermissionsPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given RolePermissionsPutPreviousValues and assigns it to the PreviousValues field.
func (o *RolePermissionsPut) SetPreviousValues(v RolePermissionsPutPreviousValues) {
	o.PreviousValues = &v
}

func (o RolePermissionsPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RolePermissionsPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RolePermission) {
		toSerialize["role_permission"] = o.RolePermission
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableRolePermissionsPut struct {
	value *RolePermissionsPut
	isSet bool
}

func (v NullableRolePermissionsPut) Get() *RolePermissionsPut {
	return v.value
}

func (v *NullableRolePermissionsPut) Set(val *RolePermissionsPut) {
	v.value = val
	v.isSet = true
}

func (v NullableRolePermissionsPut) IsSet() bool {
	return v.isSet
}

func (v *NullableRolePermissionsPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolePermissionsPut(val *RolePermissionsPut) *NullableRolePermissionsPut {
	return &NullableRolePermissionsPut{value: val, isSet: true}
}

func (v NullableRolePermissionsPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolePermissionsPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


