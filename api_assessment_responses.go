/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AssessmentResponsesAPIService AssessmentResponsesAPI service
type AssessmentResponsesAPIService service

type ApiAssessmentResponsesAssessmentResponseIdDeleteRequest struct {
	ctx context.Context
	ApiService *AssessmentResponsesAPIService
	assessmentResponseId int64
}

func (r ApiAssessmentResponsesAssessmentResponseIdDeleteRequest) Execute() (*AssessmentResponses, *http.Response, error) {
	return r.ApiService.AssessmentResponsesAssessmentResponseIdDeleteExecute(r)
}

/*
AssessmentResponsesAssessmentResponseIdDelete Method for AssessmentResponsesAssessmentResponseIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assessmentResponseId Model id
 @return ApiAssessmentResponsesAssessmentResponseIdDeleteRequest
*/
func (a *AssessmentResponsesAPIService) AssessmentResponsesAssessmentResponseIdDelete(ctx context.Context, assessmentResponseId int64) ApiAssessmentResponsesAssessmentResponseIdDeleteRequest {
	return ApiAssessmentResponsesAssessmentResponseIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		assessmentResponseId: assessmentResponseId,
	}
}

// Execute executes the request
//  @return AssessmentResponses
func (a *AssessmentResponsesAPIService) AssessmentResponsesAssessmentResponseIdDeleteExecute(r ApiAssessmentResponsesAssessmentResponseIdDeleteRequest) (*AssessmentResponses, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AssessmentResponses
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssessmentResponsesAPIService.AssessmentResponsesAssessmentResponseIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assessment_responses/{assessment_response_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"assessment_response_id"+"}", url.PathEscape(parameterValueToString(r.assessmentResponseId, "assessmentResponseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssessmentResponsesAssessmentResponseIdGetRequest struct {
	ctx context.Context
	ApiService *AssessmentResponsesAPIService
	assessmentResponseId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAssessmentResponsesAssessmentResponseIdGetRequest) Include(include []string) ApiAssessmentResponsesAssessmentResponseIdGetRequest {
	r.include = &include
	return r
}

func (r ApiAssessmentResponsesAssessmentResponseIdGetRequest) Execute() (*AssessmentResponses, *http.Response, error) {
	return r.ApiService.AssessmentResponsesAssessmentResponseIdGetExecute(r)
}

/*
AssessmentResponsesAssessmentResponseIdGet Method for AssessmentResponsesAssessmentResponseIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assessmentResponseId Model id
 @return ApiAssessmentResponsesAssessmentResponseIdGetRequest
*/
func (a *AssessmentResponsesAPIService) AssessmentResponsesAssessmentResponseIdGet(ctx context.Context, assessmentResponseId int64) ApiAssessmentResponsesAssessmentResponseIdGetRequest {
	return ApiAssessmentResponsesAssessmentResponseIdGetRequest{
		ApiService: a,
		ctx: ctx,
		assessmentResponseId: assessmentResponseId,
	}
}

// Execute executes the request
//  @return AssessmentResponses
func (a *AssessmentResponsesAPIService) AssessmentResponsesAssessmentResponseIdGetExecute(r ApiAssessmentResponsesAssessmentResponseIdGetRequest) (*AssessmentResponses, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AssessmentResponses
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssessmentResponsesAPIService.AssessmentResponsesAssessmentResponseIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assessment_responses/{assessment_response_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"assessment_response_id"+"}", url.PathEscape(parameterValueToString(r.assessmentResponseId, "assessmentResponseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssessmentResponsesAssessmentResponseIdPutRequest struct {
	ctx context.Context
	ApiService *AssessmentResponsesAPIService
	assessmentResponseId int64
	assessmentResponsesPut *AssessmentResponsesPut
}

func (r ApiAssessmentResponsesAssessmentResponseIdPutRequest) AssessmentResponsesPut(assessmentResponsesPut AssessmentResponsesPut) ApiAssessmentResponsesAssessmentResponseIdPutRequest {
	r.assessmentResponsesPut = &assessmentResponsesPut
	return r
}

func (r ApiAssessmentResponsesAssessmentResponseIdPutRequest) Execute() (*AssessmentResponses, *http.Response, error) {
	return r.ApiService.AssessmentResponsesAssessmentResponseIdPutExecute(r)
}

/*
AssessmentResponsesAssessmentResponseIdPut Method for AssessmentResponsesAssessmentResponseIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assessmentResponseId Model id
 @return ApiAssessmentResponsesAssessmentResponseIdPutRequest
*/
func (a *AssessmentResponsesAPIService) AssessmentResponsesAssessmentResponseIdPut(ctx context.Context, assessmentResponseId int64) ApiAssessmentResponsesAssessmentResponseIdPutRequest {
	return ApiAssessmentResponsesAssessmentResponseIdPutRequest{
		ApiService: a,
		ctx: ctx,
		assessmentResponseId: assessmentResponseId,
	}
}

// Execute executes the request
//  @return AssessmentResponses
func (a *AssessmentResponsesAPIService) AssessmentResponsesAssessmentResponseIdPutExecute(r ApiAssessmentResponsesAssessmentResponseIdPutRequest) (*AssessmentResponses, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AssessmentResponses
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssessmentResponsesAPIService.AssessmentResponsesAssessmentResponseIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assessment_responses/{assessment_response_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"assessment_response_id"+"}", url.PathEscape(parameterValueToString(r.assessmentResponseId, "assessmentResponseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assessmentResponsesPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssessmentResponsesGetRequest struct {
	ctx context.Context
	ApiService *AssessmentResponsesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAssessmentResponsesGetRequest) Include(include []string) ApiAssessmentResponsesGetRequest {
	r.include = &include
	return r
}

func (r ApiAssessmentResponsesGetRequest) Execute() (*AssessmentResponsesGet200Response, *http.Response, error) {
	return r.ApiService.AssessmentResponsesGetExecute(r)
}

/*
AssessmentResponsesGet Method for AssessmentResponsesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAssessmentResponsesGetRequest
*/
func (a *AssessmentResponsesAPIService) AssessmentResponsesGet(ctx context.Context) ApiAssessmentResponsesGetRequest {
	return ApiAssessmentResponsesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AssessmentResponsesGet200Response
func (a *AssessmentResponsesAPIService) AssessmentResponsesGetExecute(r ApiAssessmentResponsesGetRequest) (*AssessmentResponsesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AssessmentResponsesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssessmentResponsesAPIService.AssessmentResponsesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assessment_responses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
