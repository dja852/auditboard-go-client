/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the RegionsGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionsGet200Response{}

// RegionsGet200Response struct for RegionsGet200Response
type RegionsGet200Response struct {
	Regions []Regions `json:"regions,omitempty"`
}

// NewRegionsGet200Response instantiates a new RegionsGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionsGet200Response() *RegionsGet200Response {
	this := RegionsGet200Response{}
	return &this
}

// NewRegionsGet200ResponseWithDefaults instantiates a new RegionsGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionsGet200ResponseWithDefaults() *RegionsGet200Response {
	this := RegionsGet200Response{}
	return &this
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *RegionsGet200Response) GetRegions() []Regions {
	if o == nil || IsNil(o.Regions) {
		var ret []Regions
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionsGet200Response) GetRegionsOk() ([]Regions, bool) {
	if o == nil || IsNil(o.Regions) {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *RegionsGet200Response) HasRegions() bool {
	if o != nil && !IsNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []Regions and assigns it to the Regions field.
func (o *RegionsGet200Response) SetRegions(v []Regions) {
	o.Regions = v
}

func (o RegionsGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionsGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	return toSerialize, nil
}

type NullableRegionsGet200Response struct {
	value *RegionsGet200Response
	isSet bool
}

func (v NullableRegionsGet200Response) Get() *RegionsGet200Response {
	return v.value
}

func (v *NullableRegionsGet200Response) Set(val *RegionsGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionsGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionsGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionsGet200Response(val *RegionsGet200Response) *NullableRegionsGet200Response {
	return &NullableRegionsGet200Response{value: val, isSet: true}
}

func (v NullableRegionsGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionsGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


