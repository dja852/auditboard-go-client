/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the AllowedUsersPutPreviousValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllowedUsersPutPreviousValues{}

// AllowedUsersPutPreviousValues struct for AllowedUsersPutPreviousValues
type AllowedUsersPutPreviousValues struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	UserableId *int32 `json:"userable_id,omitempty"`
	UserableType *string `json:"userable_type,omitempty"`
	Permission *string `json:"permission,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	UserId *int32 `json:"user_id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewAllowedUsersPutPreviousValues instantiates a new AllowedUsersPutPreviousValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowedUsersPutPreviousValues() *AllowedUsersPutPreviousValues {
	this := AllowedUsersPutPreviousValues{}
	return &this
}

// NewAllowedUsersPutPreviousValuesWithDefaults instantiates a new AllowedUsersPutPreviousValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowedUsersPutPreviousValuesWithDefaults() *AllowedUsersPutPreviousValues {
	this := AllowedUsersPutPreviousValues{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AllowedUsersPutPreviousValues) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedUsersPutPreviousValues) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AllowedUsersPutPreviousValues) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AllowedUsersPutPreviousValues) SetId(v int32) {
	o.Id = &v
}

// GetUserableId returns the UserableId field value if set, zero value otherwise.
func (o *AllowedUsersPutPreviousValues) GetUserableId() int32 {
	if o == nil || IsNil(o.UserableId) {
		var ret int32
		return ret
	}
	return *o.UserableId
}

// GetUserableIdOk returns a tuple with the UserableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedUsersPutPreviousValues) GetUserableIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserableId) {
		return nil, false
	}
	return o.UserableId, true
}

// HasUserableId returns a boolean if a field has been set.
func (o *AllowedUsersPutPreviousValues) HasUserableId() bool {
	if o != nil && !IsNil(o.UserableId) {
		return true
	}

	return false
}

// SetUserableId gets a reference to the given int32 and assigns it to the UserableId field.
func (o *AllowedUsersPutPreviousValues) SetUserableId(v int32) {
	o.UserableId = &v
}

// GetUserableType returns the UserableType field value if set, zero value otherwise.
func (o *AllowedUsersPutPreviousValues) GetUserableType() string {
	if o == nil || IsNil(o.UserableType) {
		var ret string
		return ret
	}
	return *o.UserableType
}

// GetUserableTypeOk returns a tuple with the UserableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedUsersPutPreviousValues) GetUserableTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UserableType) {
		return nil, false
	}
	return o.UserableType, true
}

// HasUserableType returns a boolean if a field has been set.
func (o *AllowedUsersPutPreviousValues) HasUserableType() bool {
	if o != nil && !IsNil(o.UserableType) {
		return true
	}

	return false
}

// SetUserableType gets a reference to the given string and assigns it to the UserableType field.
func (o *AllowedUsersPutPreviousValues) SetUserableType(v string) {
	o.UserableType = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *AllowedUsersPutPreviousValues) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedUsersPutPreviousValues) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *AllowedUsersPutPreviousValues) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *AllowedUsersPutPreviousValues) SetPermission(v string) {
	o.Permission = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *AllowedUsersPutPreviousValues) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedUsersPutPreviousValues) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *AllowedUsersPutPreviousValues) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *AllowedUsersPutPreviousValues) SetUserId(v int32) {
	o.UserId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AllowedUsersPutPreviousValues) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedUsersPutPreviousValues) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AllowedUsersPutPreviousValues) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *AllowedUsersPutPreviousValues) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AllowedUsersPutPreviousValues) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedUsersPutPreviousValues) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AllowedUsersPutPreviousValues) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *AllowedUsersPutPreviousValues) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o AllowedUsersPutPreviousValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllowedUsersPutPreviousValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UserableId) {
		toSerialize["userable_id"] = o.UserableId
	}
	if !IsNil(o.UserableType) {
		toSerialize["userable_type"] = o.UserableType
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableAllowedUsersPutPreviousValues struct {
	value *AllowedUsersPutPreviousValues
	isSet bool
}

func (v NullableAllowedUsersPutPreviousValues) Get() *AllowedUsersPutPreviousValues {
	return v.value
}

func (v *NullableAllowedUsersPutPreviousValues) Set(val *AllowedUsersPutPreviousValues) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowedUsersPutPreviousValues) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowedUsersPutPreviousValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowedUsersPutPreviousValues(val *AllowedUsersPutPreviousValues) *NullableAllowedUsersPutPreviousValues {
	return &NullableAllowedUsersPutPreviousValues{value: val, isSet: true}
}

func (v NullableAllowedUsersPutPreviousValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowedUsersPutPreviousValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


