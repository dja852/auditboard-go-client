/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IssueCategories type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueCategories{}

// IssueCategories struct for IssueCategories
type IssueCategories struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	Name string `json:"name"`
	Key *string `json:"key,omitempty"`
	SortOrder int32 `json:"sort_order"`
	FormTemplateId *int32 `json:"form_template_id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	AllowedIssuesourceableTypes interface{} `json:"allowed_issuesourceable_types"`
	IsReportable bool `json:"is_reportable"`
	PackagingIsStandard bool `json:"packaging_is_standard"`
	IssueRequiredFields interface{} `json:"issue_required_fields,omitempty"`
	ActionPlanRequiredFields interface{} `json:"action_plan_required_fields,omitempty"`
	Scopes interface{} `json:"scopes,omitempty"`
}

type _IssueCategories IssueCategories

// NewIssueCategories instantiates a new IssueCategories object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueCategories(name string, sortOrder int32, allowedIssuesourceableTypes interface{}, isReportable bool, packagingIsStandard bool) *IssueCategories {
	this := IssueCategories{}
	this.Name = name
	this.SortOrder = sortOrder
	this.AllowedIssuesourceableTypes = allowedIssuesourceableTypes
	this.IsReportable = isReportable
	this.PackagingIsStandard = packagingIsStandard
	return &this
}

// NewIssueCategoriesWithDefaults instantiates a new IssueCategories object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueCategoriesWithDefaults() *IssueCategories {
	this := IssueCategories{}
	var sortOrder int32 = 0
	this.SortOrder = sortOrder
	var isReportable bool = true
	this.IsReportable = isReportable
	var packagingIsStandard bool = false
	this.PackagingIsStandard = packagingIsStandard
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IssueCategories) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategories) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IssueCategories) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *IssueCategories) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *IssueCategories) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IssueCategories) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IssueCategories) SetName(v string) {
	o.Name = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *IssueCategories) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategories) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *IssueCategories) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *IssueCategories) SetKey(v string) {
	o.Key = &v
}

// GetSortOrder returns the SortOrder field value
func (o *IssueCategories) GetSortOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value
// and a boolean to check if the value has been set.
func (o *IssueCategories) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SortOrder, true
}

// SetSortOrder sets field value
func (o *IssueCategories) SetSortOrder(v int32) {
	o.SortOrder = v
}

// GetFormTemplateId returns the FormTemplateId field value if set, zero value otherwise.
func (o *IssueCategories) GetFormTemplateId() int32 {
	if o == nil || IsNil(o.FormTemplateId) {
		var ret int32
		return ret
	}
	return *o.FormTemplateId
}

// GetFormTemplateIdOk returns a tuple with the FormTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategories) GetFormTemplateIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FormTemplateId) {
		return nil, false
	}
	return o.FormTemplateId, true
}

// HasFormTemplateId returns a boolean if a field has been set.
func (o *IssueCategories) HasFormTemplateId() bool {
	if o != nil && !IsNil(o.FormTemplateId) {
		return true
	}

	return false
}

// SetFormTemplateId gets a reference to the given int32 and assigns it to the FormTemplateId field.
func (o *IssueCategories) SetFormTemplateId(v int32) {
	o.FormTemplateId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IssueCategories) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategories) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IssueCategories) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *IssueCategories) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IssueCategories) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategories) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IssueCategories) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *IssueCategories) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *IssueCategories) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategories) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *IssueCategories) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *IssueCategories) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetAllowedIssuesourceableTypes returns the AllowedIssuesourceableTypes field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *IssueCategories) GetAllowedIssuesourceableTypes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.AllowedIssuesourceableTypes
}

// GetAllowedIssuesourceableTypesOk returns a tuple with the AllowedIssuesourceableTypes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueCategories) GetAllowedIssuesourceableTypesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AllowedIssuesourceableTypes) {
		return nil, false
	}
	return &o.AllowedIssuesourceableTypes, true
}

// SetAllowedIssuesourceableTypes sets field value
func (o *IssueCategories) SetAllowedIssuesourceableTypes(v interface{}) {
	o.AllowedIssuesourceableTypes = v
}

// GetIsReportable returns the IsReportable field value
func (o *IssueCategories) GetIsReportable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsReportable
}

// GetIsReportableOk returns a tuple with the IsReportable field value
// and a boolean to check if the value has been set.
func (o *IssueCategories) GetIsReportableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsReportable, true
}

// SetIsReportable sets field value
func (o *IssueCategories) SetIsReportable(v bool) {
	o.IsReportable = v
}

// GetPackagingIsStandard returns the PackagingIsStandard field value
func (o *IssueCategories) GetPackagingIsStandard() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PackagingIsStandard
}

// GetPackagingIsStandardOk returns a tuple with the PackagingIsStandard field value
// and a boolean to check if the value has been set.
func (o *IssueCategories) GetPackagingIsStandardOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackagingIsStandard, true
}

// SetPackagingIsStandard sets field value
func (o *IssueCategories) SetPackagingIsStandard(v bool) {
	o.PackagingIsStandard = v
}

// GetIssueRequiredFields returns the IssueRequiredFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueCategories) GetIssueRequiredFields() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.IssueRequiredFields
}

// GetIssueRequiredFieldsOk returns a tuple with the IssueRequiredFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueCategories) GetIssueRequiredFieldsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IssueRequiredFields) {
		return nil, false
	}
	return &o.IssueRequiredFields, true
}

// HasIssueRequiredFields returns a boolean if a field has been set.
func (o *IssueCategories) HasIssueRequiredFields() bool {
	if o != nil && !IsNil(o.IssueRequiredFields) {
		return true
	}

	return false
}

// SetIssueRequiredFields gets a reference to the given interface{} and assigns it to the IssueRequiredFields field.
func (o *IssueCategories) SetIssueRequiredFields(v interface{}) {
	o.IssueRequiredFields = v
}

// GetActionPlanRequiredFields returns the ActionPlanRequiredFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueCategories) GetActionPlanRequiredFields() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ActionPlanRequiredFields
}

// GetActionPlanRequiredFieldsOk returns a tuple with the ActionPlanRequiredFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueCategories) GetActionPlanRequiredFieldsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ActionPlanRequiredFields) {
		return nil, false
	}
	return &o.ActionPlanRequiredFields, true
}

// HasActionPlanRequiredFields returns a boolean if a field has been set.
func (o *IssueCategories) HasActionPlanRequiredFields() bool {
	if o != nil && !IsNil(o.ActionPlanRequiredFields) {
		return true
	}

	return false
}

// SetActionPlanRequiredFields gets a reference to the given interface{} and assigns it to the ActionPlanRequiredFields field.
func (o *IssueCategories) SetActionPlanRequiredFields(v interface{}) {
	o.ActionPlanRequiredFields = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueCategories) GetScopes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueCategories) GetScopesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return &o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *IssueCategories) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given interface{} and assigns it to the Scopes field.
func (o *IssueCategories) SetScopes(v interface{}) {
	o.Scopes = v
}

func (o IssueCategories) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueCategories) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	toSerialize["sort_order"] = o.SortOrder
	if !IsNil(o.FormTemplateId) {
		toSerialize["form_template_id"] = o.FormTemplateId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if o.AllowedIssuesourceableTypes != nil {
		toSerialize["allowed_issuesourceable_types"] = o.AllowedIssuesourceableTypes
	}
	toSerialize["is_reportable"] = o.IsReportable
	toSerialize["packaging_is_standard"] = o.PackagingIsStandard
	if o.IssueRequiredFields != nil {
		toSerialize["issue_required_fields"] = o.IssueRequiredFields
	}
	if o.ActionPlanRequiredFields != nil {
		toSerialize["action_plan_required_fields"] = o.ActionPlanRequiredFields
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

func (o *IssueCategories) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"sort_order",
		"allowed_issuesourceable_types",
		"is_reportable",
		"packaging_is_standard",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIssueCategories := _IssueCategories{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIssueCategories)

	if err != nil {
		return err
	}

	*o = IssueCategories(varIssueCategories)

	return err
}

type NullableIssueCategories struct {
	value *IssueCategories
	isSet bool
}

func (v NullableIssueCategories) Get() *IssueCategories {
	return v.value
}

func (v *NullableIssueCategories) Set(val *IssueCategories) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueCategories) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueCategories) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueCategories(val *IssueCategories) *NullableIssueCategories {
	return &NullableIssueCategories{value: val, isSet: true}
}

func (v NullableIssueCategories) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueCategories) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


