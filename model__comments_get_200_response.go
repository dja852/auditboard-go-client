/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the CommentsGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentsGet200Response{}

// CommentsGet200Response struct for CommentsGet200Response
type CommentsGet200Response struct {
	Comments []Comments `json:"comments,omitempty"`
}

// NewCommentsGet200Response instantiates a new CommentsGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentsGet200Response() *CommentsGet200Response {
	this := CommentsGet200Response{}
	return &this
}

// NewCommentsGet200ResponseWithDefaults instantiates a new CommentsGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentsGet200ResponseWithDefaults() *CommentsGet200Response {
	this := CommentsGet200Response{}
	return &this
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *CommentsGet200Response) GetComments() []Comments {
	if o == nil || IsNil(o.Comments) {
		var ret []Comments
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsGet200Response) GetCommentsOk() ([]Comments, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *CommentsGet200Response) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []Comments and assigns it to the Comments field.
func (o *CommentsGet200Response) SetComments(v []Comments) {
	o.Comments = v
}

func (o CommentsGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentsGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	return toSerialize, nil
}

type NullableCommentsGet200Response struct {
	value *CommentsGet200Response
	isSet bool
}

func (v NullableCommentsGet200Response) Get() *CommentsGet200Response {
	return v.value
}

func (v *NullableCommentsGet200Response) Set(val *CommentsGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentsGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentsGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentsGet200Response(val *CommentsGet200Response) *NullableCommentsGet200Response {
	return &NullableCommentsGet200Response{value: val, isSet: true}
}

func (v NullableCommentsGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentsGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


