/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AuditSurveyTemplatesAPIService AuditSurveyTemplatesAPI service
type AuditSurveyTemplatesAPIService service

type ApiAuditSurveyTemplatesAuditSurveyTemplateIdDeleteRequest struct {
	ctx context.Context
	ApiService *AuditSurveyTemplatesAPIService
	auditSurveyTemplateId int64
}

func (r ApiAuditSurveyTemplatesAuditSurveyTemplateIdDeleteRequest) Execute() (*AuditSurveyTemplates, *http.Response, error) {
	return r.ApiService.AuditSurveyTemplatesAuditSurveyTemplateIdDeleteExecute(r)
}

/*
AuditSurveyTemplatesAuditSurveyTemplateIdDelete Method for AuditSurveyTemplatesAuditSurveyTemplateIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditSurveyTemplateId Model id
 @return ApiAuditSurveyTemplatesAuditSurveyTemplateIdDeleteRequest
*/
func (a *AuditSurveyTemplatesAPIService) AuditSurveyTemplatesAuditSurveyTemplateIdDelete(ctx context.Context, auditSurveyTemplateId int64) ApiAuditSurveyTemplatesAuditSurveyTemplateIdDeleteRequest {
	return ApiAuditSurveyTemplatesAuditSurveyTemplateIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		auditSurveyTemplateId: auditSurveyTemplateId,
	}
}

// Execute executes the request
//  @return AuditSurveyTemplates
func (a *AuditSurveyTemplatesAPIService) AuditSurveyTemplatesAuditSurveyTemplateIdDeleteExecute(r ApiAuditSurveyTemplatesAuditSurveyTemplateIdDeleteRequest) (*AuditSurveyTemplates, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditSurveyTemplates
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditSurveyTemplatesAPIService.AuditSurveyTemplatesAuditSurveyTemplateIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_survey_templates/{audit_survey_template_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_survey_template_id"+"}", url.PathEscape(parameterValueToString(r.auditSurveyTemplateId, "auditSurveyTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditSurveyTemplatesAuditSurveyTemplateIdGetRequest struct {
	ctx context.Context
	ApiService *AuditSurveyTemplatesAPIService
	auditSurveyTemplateId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditSurveyTemplatesAuditSurveyTemplateIdGetRequest) Include(include []string) ApiAuditSurveyTemplatesAuditSurveyTemplateIdGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditSurveyTemplatesAuditSurveyTemplateIdGetRequest) Execute() (*AuditSurveyTemplates, *http.Response, error) {
	return r.ApiService.AuditSurveyTemplatesAuditSurveyTemplateIdGetExecute(r)
}

/*
AuditSurveyTemplatesAuditSurveyTemplateIdGet Method for AuditSurveyTemplatesAuditSurveyTemplateIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditSurveyTemplateId Model id
 @return ApiAuditSurveyTemplatesAuditSurveyTemplateIdGetRequest
*/
func (a *AuditSurveyTemplatesAPIService) AuditSurveyTemplatesAuditSurveyTemplateIdGet(ctx context.Context, auditSurveyTemplateId int64) ApiAuditSurveyTemplatesAuditSurveyTemplateIdGetRequest {
	return ApiAuditSurveyTemplatesAuditSurveyTemplateIdGetRequest{
		ApiService: a,
		ctx: ctx,
		auditSurveyTemplateId: auditSurveyTemplateId,
	}
}

// Execute executes the request
//  @return AuditSurveyTemplates
func (a *AuditSurveyTemplatesAPIService) AuditSurveyTemplatesAuditSurveyTemplateIdGetExecute(r ApiAuditSurveyTemplatesAuditSurveyTemplateIdGetRequest) (*AuditSurveyTemplates, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditSurveyTemplates
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditSurveyTemplatesAPIService.AuditSurveyTemplatesAuditSurveyTemplateIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_survey_templates/{audit_survey_template_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_survey_template_id"+"}", url.PathEscape(parameterValueToString(r.auditSurveyTemplateId, "auditSurveyTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditSurveyTemplatesAuditSurveyTemplateIdPutRequest struct {
	ctx context.Context
	ApiService *AuditSurveyTemplatesAPIService
	auditSurveyTemplateId int64
	auditSurveyTemplatesPut *AuditSurveyTemplatesPut
}

func (r ApiAuditSurveyTemplatesAuditSurveyTemplateIdPutRequest) AuditSurveyTemplatesPut(auditSurveyTemplatesPut AuditSurveyTemplatesPut) ApiAuditSurveyTemplatesAuditSurveyTemplateIdPutRequest {
	r.auditSurveyTemplatesPut = &auditSurveyTemplatesPut
	return r
}

func (r ApiAuditSurveyTemplatesAuditSurveyTemplateIdPutRequest) Execute() (*AuditSurveyTemplates, *http.Response, error) {
	return r.ApiService.AuditSurveyTemplatesAuditSurveyTemplateIdPutExecute(r)
}

/*
AuditSurveyTemplatesAuditSurveyTemplateIdPut Method for AuditSurveyTemplatesAuditSurveyTemplateIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditSurveyTemplateId Model id
 @return ApiAuditSurveyTemplatesAuditSurveyTemplateIdPutRequest
*/
func (a *AuditSurveyTemplatesAPIService) AuditSurveyTemplatesAuditSurveyTemplateIdPut(ctx context.Context, auditSurveyTemplateId int64) ApiAuditSurveyTemplatesAuditSurveyTemplateIdPutRequest {
	return ApiAuditSurveyTemplatesAuditSurveyTemplateIdPutRequest{
		ApiService: a,
		ctx: ctx,
		auditSurveyTemplateId: auditSurveyTemplateId,
	}
}

// Execute executes the request
//  @return AuditSurveyTemplates
func (a *AuditSurveyTemplatesAPIService) AuditSurveyTemplatesAuditSurveyTemplateIdPutExecute(r ApiAuditSurveyTemplatesAuditSurveyTemplateIdPutRequest) (*AuditSurveyTemplates, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditSurveyTemplates
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditSurveyTemplatesAPIService.AuditSurveyTemplatesAuditSurveyTemplateIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_survey_templates/{audit_survey_template_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_survey_template_id"+"}", url.PathEscape(parameterValueToString(r.auditSurveyTemplateId, "auditSurveyTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditSurveyTemplatesPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditSurveyTemplatesGetRequest struct {
	ctx context.Context
	ApiService *AuditSurveyTemplatesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditSurveyTemplatesGetRequest) Include(include []string) ApiAuditSurveyTemplatesGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditSurveyTemplatesGetRequest) Execute() (*AuditSurveyTemplatesGet200Response, *http.Response, error) {
	return r.ApiService.AuditSurveyTemplatesGetExecute(r)
}

/*
AuditSurveyTemplatesGet Method for AuditSurveyTemplatesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditSurveyTemplatesGetRequest
*/
func (a *AuditSurveyTemplatesAPIService) AuditSurveyTemplatesGet(ctx context.Context) ApiAuditSurveyTemplatesGetRequest {
	return ApiAuditSurveyTemplatesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditSurveyTemplatesGet200Response
func (a *AuditSurveyTemplatesAPIService) AuditSurveyTemplatesGetExecute(r ApiAuditSurveyTemplatesGetRequest) (*AuditSurveyTemplatesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditSurveyTemplatesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditSurveyTemplatesAPIService.AuditSurveyTemplatesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_survey_templates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditSurveyTemplatesPostRequest struct {
	ctx context.Context
	ApiService *AuditSurveyTemplatesAPIService
	auditSurveyTemplatesPostRequest *AuditSurveyTemplatesPostRequest
}

func (r ApiAuditSurveyTemplatesPostRequest) AuditSurveyTemplatesPostRequest(auditSurveyTemplatesPostRequest AuditSurveyTemplatesPostRequest) ApiAuditSurveyTemplatesPostRequest {
	r.auditSurveyTemplatesPostRequest = &auditSurveyTemplatesPostRequest
	return r
}

func (r ApiAuditSurveyTemplatesPostRequest) Execute() (*AuditSurveyTemplatesGet200Response, *http.Response, error) {
	return r.ApiService.AuditSurveyTemplatesPostExecute(r)
}

/*
AuditSurveyTemplatesPost Method for AuditSurveyTemplatesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditSurveyTemplatesPostRequest
*/
func (a *AuditSurveyTemplatesAPIService) AuditSurveyTemplatesPost(ctx context.Context) ApiAuditSurveyTemplatesPostRequest {
	return ApiAuditSurveyTemplatesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditSurveyTemplatesGet200Response
func (a *AuditSurveyTemplatesAPIService) AuditSurveyTemplatesPostExecute(r ApiAuditSurveyTemplatesPostRequest) (*AuditSurveyTemplatesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditSurveyTemplatesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditSurveyTemplatesAPIService.AuditSurveyTemplatesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_survey_templates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditSurveyTemplatesPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
