/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the IssuesArchivesPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssuesArchivesPut{}

// IssuesArchivesPut struct for IssuesArchivesPut
type IssuesArchivesPut struct {
	IssuesArchive *IssuesArchivesPutIssuesArchive `json:"issues_archive,omitempty"`
	PreviousValues *IssuesArchivesPutPreviousValues `json:"previous_values,omitempty"`
}

// NewIssuesArchivesPut instantiates a new IssuesArchivesPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesArchivesPut() *IssuesArchivesPut {
	this := IssuesArchivesPut{}
	return &this
}

// NewIssuesArchivesPutWithDefaults instantiates a new IssuesArchivesPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesArchivesPutWithDefaults() *IssuesArchivesPut {
	this := IssuesArchivesPut{}
	return &this
}

// GetIssuesArchive returns the IssuesArchive field value if set, zero value otherwise.
func (o *IssuesArchivesPut) GetIssuesArchive() IssuesArchivesPutIssuesArchive {
	if o == nil || IsNil(o.IssuesArchive) {
		var ret IssuesArchivesPutIssuesArchive
		return ret
	}
	return *o.IssuesArchive
}

// GetIssuesArchiveOk returns a tuple with the IssuesArchive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesArchivesPut) GetIssuesArchiveOk() (*IssuesArchivesPutIssuesArchive, bool) {
	if o == nil || IsNil(o.IssuesArchive) {
		return nil, false
	}
	return o.IssuesArchive, true
}

// HasIssuesArchive returns a boolean if a field has been set.
func (o *IssuesArchivesPut) HasIssuesArchive() bool {
	if o != nil && !IsNil(o.IssuesArchive) {
		return true
	}

	return false
}

// SetIssuesArchive gets a reference to the given IssuesArchivesPutIssuesArchive and assigns it to the IssuesArchive field.
func (o *IssuesArchivesPut) SetIssuesArchive(v IssuesArchivesPutIssuesArchive) {
	o.IssuesArchive = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *IssuesArchivesPut) GetPreviousValues() IssuesArchivesPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret IssuesArchivesPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesArchivesPut) GetPreviousValuesOk() (*IssuesArchivesPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *IssuesArchivesPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given IssuesArchivesPutPreviousValues and assigns it to the PreviousValues field.
func (o *IssuesArchivesPut) SetPreviousValues(v IssuesArchivesPutPreviousValues) {
	o.PreviousValues = &v
}

func (o IssuesArchivesPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssuesArchivesPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IssuesArchive) {
		toSerialize["issues_archive"] = o.IssuesArchive
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableIssuesArchivesPut struct {
	value *IssuesArchivesPut
	isSet bool
}

func (v NullableIssuesArchivesPut) Get() *IssuesArchivesPut {
	return v.value
}

func (v *NullableIssuesArchivesPut) Set(val *IssuesArchivesPut) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesArchivesPut) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesArchivesPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesArchivesPut(val *IssuesArchivesPut) *NullableIssuesArchivesPut {
	return &NullableIssuesArchivesPut{value: val, isSet: true}
}

func (v NullableIssuesArchivesPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesArchivesPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


