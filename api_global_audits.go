/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// GlobalAuditsAPIService GlobalAuditsAPI service
type GlobalAuditsAPIService service

type ApiGlobalAuditsGetRequest struct {
	ctx context.Context
	ApiService *GlobalAuditsAPIService
	createdAtFilterOperator *time.Time
	objectType *[]string
	limit *int32
}

// Refer to the API filtering section &lt;a href&#x3D;\&quot;https://developer.auditboard.com/docs/api-filtering\&quot;&gt;here&lt;/a&gt; for more information about filter operators. This query parameter can be used to filter the results by created_at dates. Ex: &#x60;?created_at[$gt]&#x3D;[2022-01-19T18:11:51.107Z]&amp;created_at[$lt]&#x3D;[2022-03-11]&#x60;
func (r ApiGlobalAuditsGetRequest) CreatedAtFilterOperator(createdAtFilterOperator time.Time) ApiGlobalAuditsGetRequest {
	r.createdAtFilterOperator = &createdAtFilterOperator
	return r
}

// The object_type parameter will filter the response to contain only results that are of the object_type.
func (r ApiGlobalAuditsGetRequest) ObjectType(objectType []string) ApiGlobalAuditsGetRequest {
	r.objectType = &objectType
	return r
}

// Limits the returned result set
func (r ApiGlobalAuditsGetRequest) Limit(limit int32) ApiGlobalAuditsGetRequest {
	r.limit = &limit
	return r
}

func (r ApiGlobalAuditsGetRequest) Execute() (*GlobalAuditsGet200Response, *http.Response, error) {
	return r.ApiService.GlobalAuditsGetExecute(r)
}

/*
GlobalAuditsGet Method for GlobalAuditsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGlobalAuditsGetRequest
*/
func (a *GlobalAuditsAPIService) GlobalAuditsGet(ctx context.Context) ApiGlobalAuditsGetRequest {
	return ApiGlobalAuditsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GlobalAuditsGet200Response
func (a *GlobalAuditsAPIService) GlobalAuditsGetExecute(r ApiGlobalAuditsGetRequest) (*GlobalAuditsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GlobalAuditsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlobalAuditsAPIService.GlobalAuditsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/global_audits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.createdAtFilterOperator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at[$filter_operator]", r.createdAtFilterOperator, "form", "")
	}
	if r.objectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type", r.objectType, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGlobalAuditsGlobalAuditIdGetRequest struct {
	ctx context.Context
	ApiService *GlobalAuditsAPIService
	globalAuditId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiGlobalAuditsGlobalAuditIdGetRequest) Include(include []string) ApiGlobalAuditsGlobalAuditIdGetRequest {
	r.include = &include
	return r
}

func (r ApiGlobalAuditsGlobalAuditIdGetRequest) Execute() (*GlobalAudits, *http.Response, error) {
	return r.ApiService.GlobalAuditsGlobalAuditIdGetExecute(r)
}

/*
GlobalAuditsGlobalAuditIdGet Method for GlobalAuditsGlobalAuditIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param globalAuditId Model id
 @return ApiGlobalAuditsGlobalAuditIdGetRequest
*/
func (a *GlobalAuditsAPIService) GlobalAuditsGlobalAuditIdGet(ctx context.Context, globalAuditId int64) ApiGlobalAuditsGlobalAuditIdGetRequest {
	return ApiGlobalAuditsGlobalAuditIdGetRequest{
		ApiService: a,
		ctx: ctx,
		globalAuditId: globalAuditId,
	}
}

// Execute executes the request
//  @return GlobalAudits
func (a *GlobalAuditsAPIService) GlobalAuditsGlobalAuditIdGetExecute(r ApiGlobalAuditsGlobalAuditIdGetRequest) (*GlobalAudits, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GlobalAudits
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlobalAuditsAPIService.GlobalAuditsGlobalAuditIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/global_audits/{global_audit_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"global_audit_id"+"}", url.PathEscape(parameterValueToString(r.globalAuditId, "globalAuditId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
