/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the IssueCategoriesPutPreviousValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueCategoriesPutPreviousValues{}

// IssueCategoriesPutPreviousValues struct for IssueCategoriesPutPreviousValues
type IssueCategoriesPutPreviousValues struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Key *string `json:"key,omitempty"`
	SortOrder *int32 `json:"sort_order,omitempty"`
	FormTemplateId *int32 `json:"form_template_id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	AllowedIssuesourceableTypes interface{} `json:"allowed_issuesourceable_types,omitempty"`
	IsReportable *bool `json:"is_reportable,omitempty"`
	PackagingIsStandard *bool `json:"packaging_is_standard,omitempty"`
	IssueRequiredFields interface{} `json:"issue_required_fields,omitempty"`
	ActionPlanRequiredFields interface{} `json:"action_plan_required_fields,omitempty"`
	Scopes interface{} `json:"scopes,omitempty"`
}

// NewIssueCategoriesPutPreviousValues instantiates a new IssueCategoriesPutPreviousValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueCategoriesPutPreviousValues() *IssueCategoriesPutPreviousValues {
	this := IssueCategoriesPutPreviousValues{}
	var sortOrder int32 = 0
	this.SortOrder = &sortOrder
	var isReportable bool = true
	this.IsReportable = &isReportable
	var packagingIsStandard bool = false
	this.PackagingIsStandard = &packagingIsStandard
	return &this
}

// NewIssueCategoriesPutPreviousValuesWithDefaults instantiates a new IssueCategoriesPutPreviousValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueCategoriesPutPreviousValuesWithDefaults() *IssueCategoriesPutPreviousValues {
	this := IssueCategoriesPutPreviousValues{}
	var sortOrder int32 = 0
	this.SortOrder = &sortOrder
	var isReportable bool = true
	this.IsReportable = &isReportable
	var packagingIsStandard bool = false
	this.PackagingIsStandard = &packagingIsStandard
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IssueCategoriesPutPreviousValues) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoriesPutPreviousValues) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IssueCategoriesPutPreviousValues) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *IssueCategoriesPutPreviousValues) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IssueCategoriesPutPreviousValues) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoriesPutPreviousValues) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IssueCategoriesPutPreviousValues) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IssueCategoriesPutPreviousValues) SetName(v string) {
	o.Name = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *IssueCategoriesPutPreviousValues) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoriesPutPreviousValues) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *IssueCategoriesPutPreviousValues) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *IssueCategoriesPutPreviousValues) SetKey(v string) {
	o.Key = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *IssueCategoriesPutPreviousValues) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret int32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoriesPutPreviousValues) GetSortOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *IssueCategoriesPutPreviousValues) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given int32 and assigns it to the SortOrder field.
func (o *IssueCategoriesPutPreviousValues) SetSortOrder(v int32) {
	o.SortOrder = &v
}

// GetFormTemplateId returns the FormTemplateId field value if set, zero value otherwise.
func (o *IssueCategoriesPutPreviousValues) GetFormTemplateId() int32 {
	if o == nil || IsNil(o.FormTemplateId) {
		var ret int32
		return ret
	}
	return *o.FormTemplateId
}

// GetFormTemplateIdOk returns a tuple with the FormTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoriesPutPreviousValues) GetFormTemplateIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FormTemplateId) {
		return nil, false
	}
	return o.FormTemplateId, true
}

// HasFormTemplateId returns a boolean if a field has been set.
func (o *IssueCategoriesPutPreviousValues) HasFormTemplateId() bool {
	if o != nil && !IsNil(o.FormTemplateId) {
		return true
	}

	return false
}

// SetFormTemplateId gets a reference to the given int32 and assigns it to the FormTemplateId field.
func (o *IssueCategoriesPutPreviousValues) SetFormTemplateId(v int32) {
	o.FormTemplateId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IssueCategoriesPutPreviousValues) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoriesPutPreviousValues) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IssueCategoriesPutPreviousValues) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *IssueCategoriesPutPreviousValues) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IssueCategoriesPutPreviousValues) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoriesPutPreviousValues) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IssueCategoriesPutPreviousValues) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *IssueCategoriesPutPreviousValues) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *IssueCategoriesPutPreviousValues) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoriesPutPreviousValues) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *IssueCategoriesPutPreviousValues) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *IssueCategoriesPutPreviousValues) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetAllowedIssuesourceableTypes returns the AllowedIssuesourceableTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueCategoriesPutPreviousValues) GetAllowedIssuesourceableTypes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AllowedIssuesourceableTypes
}

// GetAllowedIssuesourceableTypesOk returns a tuple with the AllowedIssuesourceableTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueCategoriesPutPreviousValues) GetAllowedIssuesourceableTypesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AllowedIssuesourceableTypes) {
		return nil, false
	}
	return &o.AllowedIssuesourceableTypes, true
}

// HasAllowedIssuesourceableTypes returns a boolean if a field has been set.
func (o *IssueCategoriesPutPreviousValues) HasAllowedIssuesourceableTypes() bool {
	if o != nil && !IsNil(o.AllowedIssuesourceableTypes) {
		return true
	}

	return false
}

// SetAllowedIssuesourceableTypes gets a reference to the given interface{} and assigns it to the AllowedIssuesourceableTypes field.
func (o *IssueCategoriesPutPreviousValues) SetAllowedIssuesourceableTypes(v interface{}) {
	o.AllowedIssuesourceableTypes = v
}

// GetIsReportable returns the IsReportable field value if set, zero value otherwise.
func (o *IssueCategoriesPutPreviousValues) GetIsReportable() bool {
	if o == nil || IsNil(o.IsReportable) {
		var ret bool
		return ret
	}
	return *o.IsReportable
}

// GetIsReportableOk returns a tuple with the IsReportable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoriesPutPreviousValues) GetIsReportableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReportable) {
		return nil, false
	}
	return o.IsReportable, true
}

// HasIsReportable returns a boolean if a field has been set.
func (o *IssueCategoriesPutPreviousValues) HasIsReportable() bool {
	if o != nil && !IsNil(o.IsReportable) {
		return true
	}

	return false
}

// SetIsReportable gets a reference to the given bool and assigns it to the IsReportable field.
func (o *IssueCategoriesPutPreviousValues) SetIsReportable(v bool) {
	o.IsReportable = &v
}

// GetPackagingIsStandard returns the PackagingIsStandard field value if set, zero value otherwise.
func (o *IssueCategoriesPutPreviousValues) GetPackagingIsStandard() bool {
	if o == nil || IsNil(o.PackagingIsStandard) {
		var ret bool
		return ret
	}
	return *o.PackagingIsStandard
}

// GetPackagingIsStandardOk returns a tuple with the PackagingIsStandard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoriesPutPreviousValues) GetPackagingIsStandardOk() (*bool, bool) {
	if o == nil || IsNil(o.PackagingIsStandard) {
		return nil, false
	}
	return o.PackagingIsStandard, true
}

// HasPackagingIsStandard returns a boolean if a field has been set.
func (o *IssueCategoriesPutPreviousValues) HasPackagingIsStandard() bool {
	if o != nil && !IsNil(o.PackagingIsStandard) {
		return true
	}

	return false
}

// SetPackagingIsStandard gets a reference to the given bool and assigns it to the PackagingIsStandard field.
func (o *IssueCategoriesPutPreviousValues) SetPackagingIsStandard(v bool) {
	o.PackagingIsStandard = &v
}

// GetIssueRequiredFields returns the IssueRequiredFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueCategoriesPutPreviousValues) GetIssueRequiredFields() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.IssueRequiredFields
}

// GetIssueRequiredFieldsOk returns a tuple with the IssueRequiredFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueCategoriesPutPreviousValues) GetIssueRequiredFieldsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IssueRequiredFields) {
		return nil, false
	}
	return &o.IssueRequiredFields, true
}

// HasIssueRequiredFields returns a boolean if a field has been set.
func (o *IssueCategoriesPutPreviousValues) HasIssueRequiredFields() bool {
	if o != nil && !IsNil(o.IssueRequiredFields) {
		return true
	}

	return false
}

// SetIssueRequiredFields gets a reference to the given interface{} and assigns it to the IssueRequiredFields field.
func (o *IssueCategoriesPutPreviousValues) SetIssueRequiredFields(v interface{}) {
	o.IssueRequiredFields = v
}

// GetActionPlanRequiredFields returns the ActionPlanRequiredFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueCategoriesPutPreviousValues) GetActionPlanRequiredFields() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ActionPlanRequiredFields
}

// GetActionPlanRequiredFieldsOk returns a tuple with the ActionPlanRequiredFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueCategoriesPutPreviousValues) GetActionPlanRequiredFieldsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ActionPlanRequiredFields) {
		return nil, false
	}
	return &o.ActionPlanRequiredFields, true
}

// HasActionPlanRequiredFields returns a boolean if a field has been set.
func (o *IssueCategoriesPutPreviousValues) HasActionPlanRequiredFields() bool {
	if o != nil && !IsNil(o.ActionPlanRequiredFields) {
		return true
	}

	return false
}

// SetActionPlanRequiredFields gets a reference to the given interface{} and assigns it to the ActionPlanRequiredFields field.
func (o *IssueCategoriesPutPreviousValues) SetActionPlanRequiredFields(v interface{}) {
	o.ActionPlanRequiredFields = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueCategoriesPutPreviousValues) GetScopes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueCategoriesPutPreviousValues) GetScopesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return &o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *IssueCategoriesPutPreviousValues) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given interface{} and assigns it to the Scopes field.
func (o *IssueCategoriesPutPreviousValues) SetScopes(v interface{}) {
	o.Scopes = v
}

func (o IssueCategoriesPutPreviousValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueCategoriesPutPreviousValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.SortOrder) {
		toSerialize["sort_order"] = o.SortOrder
	}
	if !IsNil(o.FormTemplateId) {
		toSerialize["form_template_id"] = o.FormTemplateId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if o.AllowedIssuesourceableTypes != nil {
		toSerialize["allowed_issuesourceable_types"] = o.AllowedIssuesourceableTypes
	}
	if !IsNil(o.IsReportable) {
		toSerialize["is_reportable"] = o.IsReportable
	}
	if !IsNil(o.PackagingIsStandard) {
		toSerialize["packaging_is_standard"] = o.PackagingIsStandard
	}
	if o.IssueRequiredFields != nil {
		toSerialize["issue_required_fields"] = o.IssueRequiredFields
	}
	if o.ActionPlanRequiredFields != nil {
		toSerialize["action_plan_required_fields"] = o.ActionPlanRequiredFields
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

type NullableIssueCategoriesPutPreviousValues struct {
	value *IssueCategoriesPutPreviousValues
	isSet bool
}

func (v NullableIssueCategoriesPutPreviousValues) Get() *IssueCategoriesPutPreviousValues {
	return v.value
}

func (v *NullableIssueCategoriesPutPreviousValues) Set(val *IssueCategoriesPutPreviousValues) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueCategoriesPutPreviousValues) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueCategoriesPutPreviousValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueCategoriesPutPreviousValues(val *IssueCategoriesPutPreviousValues) *NullableIssueCategoriesPutPreviousValues {
	return &NullableIssueCategoriesPutPreviousValues{value: val, isSet: true}
}

func (v NullableIssueCategoriesPutPreviousValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueCategoriesPutPreviousValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


