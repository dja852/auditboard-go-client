/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// NotificationMessagesAPIService NotificationMessagesAPI service
type NotificationMessagesAPIService service

type ApiNotificationMessagesGetRequest struct {
	ctx context.Context
	ApiService *NotificationMessagesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiNotificationMessagesGetRequest) Include(include []string) ApiNotificationMessagesGetRequest {
	r.include = &include
	return r
}

func (r ApiNotificationMessagesGetRequest) Execute() (*NotificationMessagesGet200Response, *http.Response, error) {
	return r.ApiService.NotificationMessagesGetExecute(r)
}

/*
NotificationMessagesGet Method for NotificationMessagesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiNotificationMessagesGetRequest
*/
func (a *NotificationMessagesAPIService) NotificationMessagesGet(ctx context.Context) ApiNotificationMessagesGetRequest {
	return ApiNotificationMessagesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NotificationMessagesGet200Response
func (a *NotificationMessagesAPIService) NotificationMessagesGetExecute(r ApiNotificationMessagesGetRequest) (*NotificationMessagesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NotificationMessagesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationMessagesAPIService.NotificationMessagesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notification_messages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNotificationMessagesNotificationMessageIdDeleteRequest struct {
	ctx context.Context
	ApiService *NotificationMessagesAPIService
	notificationMessageId int64
}

func (r ApiNotificationMessagesNotificationMessageIdDeleteRequest) Execute() (*NotificationMessages, *http.Response, error) {
	return r.ApiService.NotificationMessagesNotificationMessageIdDeleteExecute(r)
}

/*
NotificationMessagesNotificationMessageIdDelete Method for NotificationMessagesNotificationMessageIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notificationMessageId Model id
 @return ApiNotificationMessagesNotificationMessageIdDeleteRequest
*/
func (a *NotificationMessagesAPIService) NotificationMessagesNotificationMessageIdDelete(ctx context.Context, notificationMessageId int64) ApiNotificationMessagesNotificationMessageIdDeleteRequest {
	return ApiNotificationMessagesNotificationMessageIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		notificationMessageId: notificationMessageId,
	}
}

// Execute executes the request
//  @return NotificationMessages
func (a *NotificationMessagesAPIService) NotificationMessagesNotificationMessageIdDeleteExecute(r ApiNotificationMessagesNotificationMessageIdDeleteRequest) (*NotificationMessages, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NotificationMessages
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationMessagesAPIService.NotificationMessagesNotificationMessageIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notification_messages/{notification_message_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notification_message_id"+"}", url.PathEscape(parameterValueToString(r.notificationMessageId, "notificationMessageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNotificationMessagesNotificationMessageIdGetRequest struct {
	ctx context.Context
	ApiService *NotificationMessagesAPIService
	notificationMessageId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiNotificationMessagesNotificationMessageIdGetRequest) Include(include []string) ApiNotificationMessagesNotificationMessageIdGetRequest {
	r.include = &include
	return r
}

func (r ApiNotificationMessagesNotificationMessageIdGetRequest) Execute() (*NotificationMessages, *http.Response, error) {
	return r.ApiService.NotificationMessagesNotificationMessageIdGetExecute(r)
}

/*
NotificationMessagesNotificationMessageIdGet Method for NotificationMessagesNotificationMessageIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notificationMessageId Model id
 @return ApiNotificationMessagesNotificationMessageIdGetRequest
*/
func (a *NotificationMessagesAPIService) NotificationMessagesNotificationMessageIdGet(ctx context.Context, notificationMessageId int64) ApiNotificationMessagesNotificationMessageIdGetRequest {
	return ApiNotificationMessagesNotificationMessageIdGetRequest{
		ApiService: a,
		ctx: ctx,
		notificationMessageId: notificationMessageId,
	}
}

// Execute executes the request
//  @return NotificationMessages
func (a *NotificationMessagesAPIService) NotificationMessagesNotificationMessageIdGetExecute(r ApiNotificationMessagesNotificationMessageIdGetRequest) (*NotificationMessages, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NotificationMessages
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationMessagesAPIService.NotificationMessagesNotificationMessageIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notification_messages/{notification_message_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notification_message_id"+"}", url.PathEscape(parameterValueToString(r.notificationMessageId, "notificationMessageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
