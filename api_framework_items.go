/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// FrameworkItemsAPIService FrameworkItemsAPI service
type FrameworkItemsAPIService service

type ApiFrameworkItemsFrameworkItemIdDeleteRequest struct {
	ctx context.Context
	ApiService *FrameworkItemsAPIService
	frameworkItemId int64
}

func (r ApiFrameworkItemsFrameworkItemIdDeleteRequest) Execute() (*FrameworkItems, *http.Response, error) {
	return r.ApiService.FrameworkItemsFrameworkItemIdDeleteExecute(r)
}

/*
FrameworkItemsFrameworkItemIdDelete Method for FrameworkItemsFrameworkItemIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param frameworkItemId Model id
 @return ApiFrameworkItemsFrameworkItemIdDeleteRequest
*/
func (a *FrameworkItemsAPIService) FrameworkItemsFrameworkItemIdDelete(ctx context.Context, frameworkItemId int64) ApiFrameworkItemsFrameworkItemIdDeleteRequest {
	return ApiFrameworkItemsFrameworkItemIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		frameworkItemId: frameworkItemId,
	}
}

// Execute executes the request
//  @return FrameworkItems
func (a *FrameworkItemsAPIService) FrameworkItemsFrameworkItemIdDeleteExecute(r ApiFrameworkItemsFrameworkItemIdDeleteRequest) (*FrameworkItems, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrameworkItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FrameworkItemsAPIService.FrameworkItemsFrameworkItemIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/framework_items/{framework_item_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"framework_item_id"+"}", url.PathEscape(parameterValueToString(r.frameworkItemId, "frameworkItemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFrameworkItemsFrameworkItemIdGetRequest struct {
	ctx context.Context
	ApiService *FrameworkItemsAPIService
	frameworkItemId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiFrameworkItemsFrameworkItemIdGetRequest) Include(include []string) ApiFrameworkItemsFrameworkItemIdGetRequest {
	r.include = &include
	return r
}

func (r ApiFrameworkItemsFrameworkItemIdGetRequest) Execute() (*FrameworkItems, *http.Response, error) {
	return r.ApiService.FrameworkItemsFrameworkItemIdGetExecute(r)
}

/*
FrameworkItemsFrameworkItemIdGet Method for FrameworkItemsFrameworkItemIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param frameworkItemId Model id
 @return ApiFrameworkItemsFrameworkItemIdGetRequest
*/
func (a *FrameworkItemsAPIService) FrameworkItemsFrameworkItemIdGet(ctx context.Context, frameworkItemId int64) ApiFrameworkItemsFrameworkItemIdGetRequest {
	return ApiFrameworkItemsFrameworkItemIdGetRequest{
		ApiService: a,
		ctx: ctx,
		frameworkItemId: frameworkItemId,
	}
}

// Execute executes the request
//  @return FrameworkItems
func (a *FrameworkItemsAPIService) FrameworkItemsFrameworkItemIdGetExecute(r ApiFrameworkItemsFrameworkItemIdGetRequest) (*FrameworkItems, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrameworkItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FrameworkItemsAPIService.FrameworkItemsFrameworkItemIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/framework_items/{framework_item_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"framework_item_id"+"}", url.PathEscape(parameterValueToString(r.frameworkItemId, "frameworkItemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFrameworkItemsFrameworkItemIdPutRequest struct {
	ctx context.Context
	ApiService *FrameworkItemsAPIService
	frameworkItemId int64
	frameworkItemsPut *FrameworkItemsPut
}

func (r ApiFrameworkItemsFrameworkItemIdPutRequest) FrameworkItemsPut(frameworkItemsPut FrameworkItemsPut) ApiFrameworkItemsFrameworkItemIdPutRequest {
	r.frameworkItemsPut = &frameworkItemsPut
	return r
}

func (r ApiFrameworkItemsFrameworkItemIdPutRequest) Execute() (*FrameworkItems, *http.Response, error) {
	return r.ApiService.FrameworkItemsFrameworkItemIdPutExecute(r)
}

/*
FrameworkItemsFrameworkItemIdPut Method for FrameworkItemsFrameworkItemIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param frameworkItemId Model id
 @return ApiFrameworkItemsFrameworkItemIdPutRequest
*/
func (a *FrameworkItemsAPIService) FrameworkItemsFrameworkItemIdPut(ctx context.Context, frameworkItemId int64) ApiFrameworkItemsFrameworkItemIdPutRequest {
	return ApiFrameworkItemsFrameworkItemIdPutRequest{
		ApiService: a,
		ctx: ctx,
		frameworkItemId: frameworkItemId,
	}
}

// Execute executes the request
//  @return FrameworkItems
func (a *FrameworkItemsAPIService) FrameworkItemsFrameworkItemIdPutExecute(r ApiFrameworkItemsFrameworkItemIdPutRequest) (*FrameworkItems, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrameworkItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FrameworkItemsAPIService.FrameworkItemsFrameworkItemIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/framework_items/{framework_item_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"framework_item_id"+"}", url.PathEscape(parameterValueToString(r.frameworkItemId, "frameworkItemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.frameworkItemsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFrameworkItemsGetRequest struct {
	ctx context.Context
	ApiService *FrameworkItemsAPIService
	frameworkId *int32
}

// id of the framework to find
func (r ApiFrameworkItemsGetRequest) FrameworkId(frameworkId int32) ApiFrameworkItemsGetRequest {
	r.frameworkId = &frameworkId
	return r
}

func (r ApiFrameworkItemsGetRequest) Execute() (*FrameworkItemsGet200Response, *http.Response, error) {
	return r.ApiService.FrameworkItemsGetExecute(r)
}

/*
FrameworkItemsGet Method for FrameworkItemsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFrameworkItemsGetRequest
*/
func (a *FrameworkItemsAPIService) FrameworkItemsGet(ctx context.Context) ApiFrameworkItemsGetRequest {
	return ApiFrameworkItemsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FrameworkItemsGet200Response
func (a *FrameworkItemsAPIService) FrameworkItemsGetExecute(r ApiFrameworkItemsGetRequest) (*FrameworkItemsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrameworkItemsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FrameworkItemsAPIService.FrameworkItemsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/framework_items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.frameworkId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "framework_id", r.frameworkId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFrameworkItemsPostRequest struct {
	ctx context.Context
	ApiService *FrameworkItemsAPIService
	frameworkItemsPostRequest *FrameworkItemsPostRequest
}

func (r ApiFrameworkItemsPostRequest) FrameworkItemsPostRequest(frameworkItemsPostRequest FrameworkItemsPostRequest) ApiFrameworkItemsPostRequest {
	r.frameworkItemsPostRequest = &frameworkItemsPostRequest
	return r
}

func (r ApiFrameworkItemsPostRequest) Execute() (*FrameworkItemsGet200Response, *http.Response, error) {
	return r.ApiService.FrameworkItemsPostExecute(r)
}

/*
FrameworkItemsPost Method for FrameworkItemsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFrameworkItemsPostRequest
*/
func (a *FrameworkItemsAPIService) FrameworkItemsPost(ctx context.Context) ApiFrameworkItemsPostRequest {
	return ApiFrameworkItemsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FrameworkItemsGet200Response
func (a *FrameworkItemsAPIService) FrameworkItemsPostExecute(r ApiFrameworkItemsPostRequest) (*FrameworkItemsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrameworkItemsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FrameworkItemsAPIService.FrameworkItemsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/framework_items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.frameworkItemsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
