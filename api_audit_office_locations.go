/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AuditOfficeLocationsAPIService AuditOfficeLocationsAPI service
type AuditOfficeLocationsAPIService service

type ApiAuditOfficeLocationsAuditOfficeLocationIdDeleteRequest struct {
	ctx context.Context
	ApiService *AuditOfficeLocationsAPIService
	auditOfficeLocationId int64
}

func (r ApiAuditOfficeLocationsAuditOfficeLocationIdDeleteRequest) Execute() (*AuditOfficeLocations, *http.Response, error) {
	return r.ApiService.AuditOfficeLocationsAuditOfficeLocationIdDeleteExecute(r)
}

/*
AuditOfficeLocationsAuditOfficeLocationIdDelete Method for AuditOfficeLocationsAuditOfficeLocationIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditOfficeLocationId Model id
 @return ApiAuditOfficeLocationsAuditOfficeLocationIdDeleteRequest
*/
func (a *AuditOfficeLocationsAPIService) AuditOfficeLocationsAuditOfficeLocationIdDelete(ctx context.Context, auditOfficeLocationId int64) ApiAuditOfficeLocationsAuditOfficeLocationIdDeleteRequest {
	return ApiAuditOfficeLocationsAuditOfficeLocationIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		auditOfficeLocationId: auditOfficeLocationId,
	}
}

// Execute executes the request
//  @return AuditOfficeLocations
func (a *AuditOfficeLocationsAPIService) AuditOfficeLocationsAuditOfficeLocationIdDeleteExecute(r ApiAuditOfficeLocationsAuditOfficeLocationIdDeleteRequest) (*AuditOfficeLocations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditOfficeLocations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditOfficeLocationsAPIService.AuditOfficeLocationsAuditOfficeLocationIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_office_locations/{audit_office_location_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_office_location_id"+"}", url.PathEscape(parameterValueToString(r.auditOfficeLocationId, "auditOfficeLocationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditOfficeLocationsAuditOfficeLocationIdGetRequest struct {
	ctx context.Context
	ApiService *AuditOfficeLocationsAPIService
	auditOfficeLocationId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditOfficeLocationsAuditOfficeLocationIdGetRequest) Include(include []string) ApiAuditOfficeLocationsAuditOfficeLocationIdGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditOfficeLocationsAuditOfficeLocationIdGetRequest) Execute() (*AuditOfficeLocations, *http.Response, error) {
	return r.ApiService.AuditOfficeLocationsAuditOfficeLocationIdGetExecute(r)
}

/*
AuditOfficeLocationsAuditOfficeLocationIdGet Method for AuditOfficeLocationsAuditOfficeLocationIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditOfficeLocationId Model id
 @return ApiAuditOfficeLocationsAuditOfficeLocationIdGetRequest
*/
func (a *AuditOfficeLocationsAPIService) AuditOfficeLocationsAuditOfficeLocationIdGet(ctx context.Context, auditOfficeLocationId int64) ApiAuditOfficeLocationsAuditOfficeLocationIdGetRequest {
	return ApiAuditOfficeLocationsAuditOfficeLocationIdGetRequest{
		ApiService: a,
		ctx: ctx,
		auditOfficeLocationId: auditOfficeLocationId,
	}
}

// Execute executes the request
//  @return AuditOfficeLocations
func (a *AuditOfficeLocationsAPIService) AuditOfficeLocationsAuditOfficeLocationIdGetExecute(r ApiAuditOfficeLocationsAuditOfficeLocationIdGetRequest) (*AuditOfficeLocations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditOfficeLocations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditOfficeLocationsAPIService.AuditOfficeLocationsAuditOfficeLocationIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_office_locations/{audit_office_location_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_office_location_id"+"}", url.PathEscape(parameterValueToString(r.auditOfficeLocationId, "auditOfficeLocationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditOfficeLocationsAuditOfficeLocationIdPutRequest struct {
	ctx context.Context
	ApiService *AuditOfficeLocationsAPIService
	auditOfficeLocationId int64
	auditOfficeLocationsPut *AuditOfficeLocationsPut
}

func (r ApiAuditOfficeLocationsAuditOfficeLocationIdPutRequest) AuditOfficeLocationsPut(auditOfficeLocationsPut AuditOfficeLocationsPut) ApiAuditOfficeLocationsAuditOfficeLocationIdPutRequest {
	r.auditOfficeLocationsPut = &auditOfficeLocationsPut
	return r
}

func (r ApiAuditOfficeLocationsAuditOfficeLocationIdPutRequest) Execute() (*AuditOfficeLocations, *http.Response, error) {
	return r.ApiService.AuditOfficeLocationsAuditOfficeLocationIdPutExecute(r)
}

/*
AuditOfficeLocationsAuditOfficeLocationIdPut Method for AuditOfficeLocationsAuditOfficeLocationIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditOfficeLocationId Model id
 @return ApiAuditOfficeLocationsAuditOfficeLocationIdPutRequest
*/
func (a *AuditOfficeLocationsAPIService) AuditOfficeLocationsAuditOfficeLocationIdPut(ctx context.Context, auditOfficeLocationId int64) ApiAuditOfficeLocationsAuditOfficeLocationIdPutRequest {
	return ApiAuditOfficeLocationsAuditOfficeLocationIdPutRequest{
		ApiService: a,
		ctx: ctx,
		auditOfficeLocationId: auditOfficeLocationId,
	}
}

// Execute executes the request
//  @return AuditOfficeLocations
func (a *AuditOfficeLocationsAPIService) AuditOfficeLocationsAuditOfficeLocationIdPutExecute(r ApiAuditOfficeLocationsAuditOfficeLocationIdPutRequest) (*AuditOfficeLocations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditOfficeLocations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditOfficeLocationsAPIService.AuditOfficeLocationsAuditOfficeLocationIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_office_locations/{audit_office_location_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_office_location_id"+"}", url.PathEscape(parameterValueToString(r.auditOfficeLocationId, "auditOfficeLocationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditOfficeLocationsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditOfficeLocationsGetRequest struct {
	ctx context.Context
	ApiService *AuditOfficeLocationsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditOfficeLocationsGetRequest) Include(include []string) ApiAuditOfficeLocationsGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditOfficeLocationsGetRequest) Execute() (*AuditOfficeLocationsGet200Response, *http.Response, error) {
	return r.ApiService.AuditOfficeLocationsGetExecute(r)
}

/*
AuditOfficeLocationsGet Method for AuditOfficeLocationsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditOfficeLocationsGetRequest
*/
func (a *AuditOfficeLocationsAPIService) AuditOfficeLocationsGet(ctx context.Context) ApiAuditOfficeLocationsGetRequest {
	return ApiAuditOfficeLocationsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditOfficeLocationsGet200Response
func (a *AuditOfficeLocationsAPIService) AuditOfficeLocationsGetExecute(r ApiAuditOfficeLocationsGetRequest) (*AuditOfficeLocationsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditOfficeLocationsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditOfficeLocationsAPIService.AuditOfficeLocationsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_office_locations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditOfficeLocationsPostRequest struct {
	ctx context.Context
	ApiService *AuditOfficeLocationsAPIService
	auditOfficeLocationsPostRequest *AuditOfficeLocationsPostRequest
}

func (r ApiAuditOfficeLocationsPostRequest) AuditOfficeLocationsPostRequest(auditOfficeLocationsPostRequest AuditOfficeLocationsPostRequest) ApiAuditOfficeLocationsPostRequest {
	r.auditOfficeLocationsPostRequest = &auditOfficeLocationsPostRequest
	return r
}

func (r ApiAuditOfficeLocationsPostRequest) Execute() (*AuditOfficeLocationsGet200Response, *http.Response, error) {
	return r.ApiService.AuditOfficeLocationsPostExecute(r)
}

/*
AuditOfficeLocationsPost Method for AuditOfficeLocationsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditOfficeLocationsPostRequest
*/
func (a *AuditOfficeLocationsAPIService) AuditOfficeLocationsPost(ctx context.Context) ApiAuditOfficeLocationsPostRequest {
	return ApiAuditOfficeLocationsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditOfficeLocationsGet200Response
func (a *AuditOfficeLocationsAPIService) AuditOfficeLocationsPostExecute(r ApiAuditOfficeLocationsPostRequest) (*AuditOfficeLocationsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditOfficeLocationsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditOfficeLocationsAPIService.AuditOfficeLocationsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_office_locations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditOfficeLocationsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
