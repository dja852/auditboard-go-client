/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the ControlsGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsGet200Response{}

// ControlsGet200Response struct for ControlsGet200Response
type ControlsGet200Response struct {
	Controls []Controls `json:"controls,omitempty"`
}

// NewControlsGet200Response instantiates a new ControlsGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsGet200Response() *ControlsGet200Response {
	this := ControlsGet200Response{}
	return &this
}

// NewControlsGet200ResponseWithDefaults instantiates a new ControlsGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsGet200ResponseWithDefaults() *ControlsGet200Response {
	this := ControlsGet200Response{}
	return &this
}

// GetControls returns the Controls field value if set, zero value otherwise.
func (o *ControlsGet200Response) GetControls() []Controls {
	if o == nil || IsNil(o.Controls) {
		var ret []Controls
		return ret
	}
	return o.Controls
}

// GetControlsOk returns a tuple with the Controls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsGet200Response) GetControlsOk() ([]Controls, bool) {
	if o == nil || IsNil(o.Controls) {
		return nil, false
	}
	return o.Controls, true
}

// HasControls returns a boolean if a field has been set.
func (o *ControlsGet200Response) HasControls() bool {
	if o != nil && !IsNil(o.Controls) {
		return true
	}

	return false
}

// SetControls gets a reference to the given []Controls and assigns it to the Controls field.
func (o *ControlsGet200Response) SetControls(v []Controls) {
	o.Controls = v
}

func (o ControlsGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Controls) {
		toSerialize["controls"] = o.Controls
	}
	return toSerialize, nil
}

type NullableControlsGet200Response struct {
	value *ControlsGet200Response
	isSet bool
}

func (v NullableControlsGet200Response) Get() *ControlsGet200Response {
	return v.value
}

func (v *NullableControlsGet200Response) Set(val *ControlsGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsGet200Response(val *ControlsGet200Response) *NullableControlsGet200Response {
	return &NullableControlsGet200Response{value: val, isSet: true}
}

func (v NullableControlsGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


