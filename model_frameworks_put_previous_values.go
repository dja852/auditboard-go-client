/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the FrameworksPutPreviousValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameworksPutPreviousValues{}

// FrameworksPutPreviousValues struct for FrameworksPutPreviousValues
type FrameworksPutPreviousValues struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	SortOrder *int32 `json:"sort_order,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	FormTemplateId *int32 `json:"form_template_id,omitempty"`
	ContentServiceId *int32 `json:"content_service_id,omitempty"`
	ShortName *string `json:"short_name,omitempty"`
	ContentSource *string `json:"content_source,omitempty"`
	IsCcf *bool `json:"is_ccf,omitempty"`
	RequirementLevel *int32 `json:"requirement_level,omitempty"`
	// Note: This is a Foreign Key to `framework_categories.id`.<fk table='framework_categories' column='id'/>
	FrameworkCategoryId *int32 `json:"framework_category_id,omitempty"`
	Status *string `json:"status,omitempty"`
	ScopeDescription *string `json:"scope_description,omitempty"`
	Version *string `json:"version,omitempty"`
	ImplementationDate *string `json:"implementation_date,omitempty"`
	ImplementationStatus *string `json:"implementation_status,omitempty"`
	ImplementationTargetDate *string `json:"implementation_target_date,omitempty"`
	LastAuditDate *string `json:"last_audit_date,omitempty"`
	NextAuditDate *string `json:"next_audit_date,omitempty"`
	EffectiveDate *string `json:"effective_date,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	OwnerUserId *int32 `json:"owner_user_id,omitempty"`
	Scopes interface{} `json:"scopes,omitempty"`
	XcTotals interface{} `json:"xc_totals,omitempty"`
	RatingType *string `json:"rating_type,omitempty"`
	LicenseRequired *bool `json:"license_required,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	LicenseApprovedBy *int32 `json:"license_approved_by,omitempty"`
	LicenseApprovedOn *string `json:"license_approved_on,omitempty"`
}

// NewFrameworksPutPreviousValues instantiates a new FrameworksPutPreviousValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameworksPutPreviousValues() *FrameworksPutPreviousValues {
	this := FrameworksPutPreviousValues{}
	var sortOrder int32 = 0
	this.SortOrder = &sortOrder
	var requirementLevel int32 = 0
	this.RequirementLevel = &requirementLevel
	var status string = "Active"
	this.Status = &status
	var licenseRequired bool = false
	this.LicenseRequired = &licenseRequired
	return &this
}

// NewFrameworksPutPreviousValuesWithDefaults instantiates a new FrameworksPutPreviousValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameworksPutPreviousValuesWithDefaults() *FrameworksPutPreviousValues {
	this := FrameworksPutPreviousValues{}
	var sortOrder int32 = 0
	this.SortOrder = &sortOrder
	var requirementLevel int32 = 0
	this.RequirementLevel = &requirementLevel
	var status string = "Active"
	this.Status = &status
	var licenseRequired bool = false
	this.LicenseRequired = &licenseRequired
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *FrameworksPutPreviousValues) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FrameworksPutPreviousValues) SetName(v string) {
	o.Name = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret int32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetSortOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given int32 and assigns it to the SortOrder field.
func (o *FrameworksPutPreviousValues) SetSortOrder(v int32) {
	o.SortOrder = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *FrameworksPutPreviousValues) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *FrameworksPutPreviousValues) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *FrameworksPutPreviousValues) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetFormTemplateId returns the FormTemplateId field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetFormTemplateId() int32 {
	if o == nil || IsNil(o.FormTemplateId) {
		var ret int32
		return ret
	}
	return *o.FormTemplateId
}

// GetFormTemplateIdOk returns a tuple with the FormTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetFormTemplateIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FormTemplateId) {
		return nil, false
	}
	return o.FormTemplateId, true
}

// HasFormTemplateId returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasFormTemplateId() bool {
	if o != nil && !IsNil(o.FormTemplateId) {
		return true
	}

	return false
}

// SetFormTemplateId gets a reference to the given int32 and assigns it to the FormTemplateId field.
func (o *FrameworksPutPreviousValues) SetFormTemplateId(v int32) {
	o.FormTemplateId = &v
}

// GetContentServiceId returns the ContentServiceId field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetContentServiceId() int32 {
	if o == nil || IsNil(o.ContentServiceId) {
		var ret int32
		return ret
	}
	return *o.ContentServiceId
}

// GetContentServiceIdOk returns a tuple with the ContentServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetContentServiceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ContentServiceId) {
		return nil, false
	}
	return o.ContentServiceId, true
}

// HasContentServiceId returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasContentServiceId() bool {
	if o != nil && !IsNil(o.ContentServiceId) {
		return true
	}

	return false
}

// SetContentServiceId gets a reference to the given int32 and assigns it to the ContentServiceId field.
func (o *FrameworksPutPreviousValues) SetContentServiceId(v int32) {
	o.ContentServiceId = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *FrameworksPutPreviousValues) SetShortName(v string) {
	o.ShortName = &v
}

// GetContentSource returns the ContentSource field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetContentSource() string {
	if o == nil || IsNil(o.ContentSource) {
		var ret string
		return ret
	}
	return *o.ContentSource
}

// GetContentSourceOk returns a tuple with the ContentSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetContentSourceOk() (*string, bool) {
	if o == nil || IsNil(o.ContentSource) {
		return nil, false
	}
	return o.ContentSource, true
}

// HasContentSource returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasContentSource() bool {
	if o != nil && !IsNil(o.ContentSource) {
		return true
	}

	return false
}

// SetContentSource gets a reference to the given string and assigns it to the ContentSource field.
func (o *FrameworksPutPreviousValues) SetContentSource(v string) {
	o.ContentSource = &v
}

// GetIsCcf returns the IsCcf field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetIsCcf() bool {
	if o == nil || IsNil(o.IsCcf) {
		var ret bool
		return ret
	}
	return *o.IsCcf
}

// GetIsCcfOk returns a tuple with the IsCcf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetIsCcfOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCcf) {
		return nil, false
	}
	return o.IsCcf, true
}

// HasIsCcf returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasIsCcf() bool {
	if o != nil && !IsNil(o.IsCcf) {
		return true
	}

	return false
}

// SetIsCcf gets a reference to the given bool and assigns it to the IsCcf field.
func (o *FrameworksPutPreviousValues) SetIsCcf(v bool) {
	o.IsCcf = &v
}

// GetRequirementLevel returns the RequirementLevel field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetRequirementLevel() int32 {
	if o == nil || IsNil(o.RequirementLevel) {
		var ret int32
		return ret
	}
	return *o.RequirementLevel
}

// GetRequirementLevelOk returns a tuple with the RequirementLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetRequirementLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.RequirementLevel) {
		return nil, false
	}
	return o.RequirementLevel, true
}

// HasRequirementLevel returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasRequirementLevel() bool {
	if o != nil && !IsNil(o.RequirementLevel) {
		return true
	}

	return false
}

// SetRequirementLevel gets a reference to the given int32 and assigns it to the RequirementLevel field.
func (o *FrameworksPutPreviousValues) SetRequirementLevel(v int32) {
	o.RequirementLevel = &v
}

// GetFrameworkCategoryId returns the FrameworkCategoryId field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetFrameworkCategoryId() int32 {
	if o == nil || IsNil(o.FrameworkCategoryId) {
		var ret int32
		return ret
	}
	return *o.FrameworkCategoryId
}

// GetFrameworkCategoryIdOk returns a tuple with the FrameworkCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetFrameworkCategoryIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FrameworkCategoryId) {
		return nil, false
	}
	return o.FrameworkCategoryId, true
}

// HasFrameworkCategoryId returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasFrameworkCategoryId() bool {
	if o != nil && !IsNil(o.FrameworkCategoryId) {
		return true
	}

	return false
}

// SetFrameworkCategoryId gets a reference to the given int32 and assigns it to the FrameworkCategoryId field.
func (o *FrameworksPutPreviousValues) SetFrameworkCategoryId(v int32) {
	o.FrameworkCategoryId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FrameworksPutPreviousValues) SetStatus(v string) {
	o.Status = &v
}

// GetScopeDescription returns the ScopeDescription field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetScopeDescription() string {
	if o == nil || IsNil(o.ScopeDescription) {
		var ret string
		return ret
	}
	return *o.ScopeDescription
}

// GetScopeDescriptionOk returns a tuple with the ScopeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetScopeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeDescription) {
		return nil, false
	}
	return o.ScopeDescription, true
}

// HasScopeDescription returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasScopeDescription() bool {
	if o != nil && !IsNil(o.ScopeDescription) {
		return true
	}

	return false
}

// SetScopeDescription gets a reference to the given string and assigns it to the ScopeDescription field.
func (o *FrameworksPutPreviousValues) SetScopeDescription(v string) {
	o.ScopeDescription = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *FrameworksPutPreviousValues) SetVersion(v string) {
	o.Version = &v
}

// GetImplementationDate returns the ImplementationDate field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetImplementationDate() string {
	if o == nil || IsNil(o.ImplementationDate) {
		var ret string
		return ret
	}
	return *o.ImplementationDate
}

// GetImplementationDateOk returns a tuple with the ImplementationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetImplementationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ImplementationDate) {
		return nil, false
	}
	return o.ImplementationDate, true
}

// HasImplementationDate returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasImplementationDate() bool {
	if o != nil && !IsNil(o.ImplementationDate) {
		return true
	}

	return false
}

// SetImplementationDate gets a reference to the given string and assigns it to the ImplementationDate field.
func (o *FrameworksPutPreviousValues) SetImplementationDate(v string) {
	o.ImplementationDate = &v
}

// GetImplementationStatus returns the ImplementationStatus field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetImplementationStatus() string {
	if o == nil || IsNil(o.ImplementationStatus) {
		var ret string
		return ret
	}
	return *o.ImplementationStatus
}

// GetImplementationStatusOk returns a tuple with the ImplementationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetImplementationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ImplementationStatus) {
		return nil, false
	}
	return o.ImplementationStatus, true
}

// HasImplementationStatus returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasImplementationStatus() bool {
	if o != nil && !IsNil(o.ImplementationStatus) {
		return true
	}

	return false
}

// SetImplementationStatus gets a reference to the given string and assigns it to the ImplementationStatus field.
func (o *FrameworksPutPreviousValues) SetImplementationStatus(v string) {
	o.ImplementationStatus = &v
}

// GetImplementationTargetDate returns the ImplementationTargetDate field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetImplementationTargetDate() string {
	if o == nil || IsNil(o.ImplementationTargetDate) {
		var ret string
		return ret
	}
	return *o.ImplementationTargetDate
}

// GetImplementationTargetDateOk returns a tuple with the ImplementationTargetDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetImplementationTargetDateOk() (*string, bool) {
	if o == nil || IsNil(o.ImplementationTargetDate) {
		return nil, false
	}
	return o.ImplementationTargetDate, true
}

// HasImplementationTargetDate returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasImplementationTargetDate() bool {
	if o != nil && !IsNil(o.ImplementationTargetDate) {
		return true
	}

	return false
}

// SetImplementationTargetDate gets a reference to the given string and assigns it to the ImplementationTargetDate field.
func (o *FrameworksPutPreviousValues) SetImplementationTargetDate(v string) {
	o.ImplementationTargetDate = &v
}

// GetLastAuditDate returns the LastAuditDate field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetLastAuditDate() string {
	if o == nil || IsNil(o.LastAuditDate) {
		var ret string
		return ret
	}
	return *o.LastAuditDate
}

// GetLastAuditDateOk returns a tuple with the LastAuditDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetLastAuditDateOk() (*string, bool) {
	if o == nil || IsNil(o.LastAuditDate) {
		return nil, false
	}
	return o.LastAuditDate, true
}

// HasLastAuditDate returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasLastAuditDate() bool {
	if o != nil && !IsNil(o.LastAuditDate) {
		return true
	}

	return false
}

// SetLastAuditDate gets a reference to the given string and assigns it to the LastAuditDate field.
func (o *FrameworksPutPreviousValues) SetLastAuditDate(v string) {
	o.LastAuditDate = &v
}

// GetNextAuditDate returns the NextAuditDate field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetNextAuditDate() string {
	if o == nil || IsNil(o.NextAuditDate) {
		var ret string
		return ret
	}
	return *o.NextAuditDate
}

// GetNextAuditDateOk returns a tuple with the NextAuditDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetNextAuditDateOk() (*string, bool) {
	if o == nil || IsNil(o.NextAuditDate) {
		return nil, false
	}
	return o.NextAuditDate, true
}

// HasNextAuditDate returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasNextAuditDate() bool {
	if o != nil && !IsNil(o.NextAuditDate) {
		return true
	}

	return false
}

// SetNextAuditDate gets a reference to the given string and assigns it to the NextAuditDate field.
func (o *FrameworksPutPreviousValues) SetNextAuditDate(v string) {
	o.NextAuditDate = &v
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetEffectiveDate() string {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret string
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetEffectiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given string and assigns it to the EffectiveDate field.
func (o *FrameworksPutPreviousValues) SetEffectiveDate(v string) {
	o.EffectiveDate = &v
}

// GetOwnerUserId returns the OwnerUserId field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetOwnerUserId() int32 {
	if o == nil || IsNil(o.OwnerUserId) {
		var ret int32
		return ret
	}
	return *o.OwnerUserId
}

// GetOwnerUserIdOk returns a tuple with the OwnerUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetOwnerUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OwnerUserId) {
		return nil, false
	}
	return o.OwnerUserId, true
}

// HasOwnerUserId returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasOwnerUserId() bool {
	if o != nil && !IsNil(o.OwnerUserId) {
		return true
	}

	return false
}

// SetOwnerUserId gets a reference to the given int32 and assigns it to the OwnerUserId field.
func (o *FrameworksPutPreviousValues) SetOwnerUserId(v int32) {
	o.OwnerUserId = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FrameworksPutPreviousValues) GetScopes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FrameworksPutPreviousValues) GetScopesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return &o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given interface{} and assigns it to the Scopes field.
func (o *FrameworksPutPreviousValues) SetScopes(v interface{}) {
	o.Scopes = v
}

// GetXcTotals returns the XcTotals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FrameworksPutPreviousValues) GetXcTotals() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.XcTotals
}

// GetXcTotalsOk returns a tuple with the XcTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FrameworksPutPreviousValues) GetXcTotalsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.XcTotals) {
		return nil, false
	}
	return &o.XcTotals, true
}

// HasXcTotals returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasXcTotals() bool {
	if o != nil && !IsNil(o.XcTotals) {
		return true
	}

	return false
}

// SetXcTotals gets a reference to the given interface{} and assigns it to the XcTotals field.
func (o *FrameworksPutPreviousValues) SetXcTotals(v interface{}) {
	o.XcTotals = v
}

// GetRatingType returns the RatingType field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetRatingType() string {
	if o == nil || IsNil(o.RatingType) {
		var ret string
		return ret
	}
	return *o.RatingType
}

// GetRatingTypeOk returns a tuple with the RatingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetRatingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RatingType) {
		return nil, false
	}
	return o.RatingType, true
}

// HasRatingType returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasRatingType() bool {
	if o != nil && !IsNil(o.RatingType) {
		return true
	}

	return false
}

// SetRatingType gets a reference to the given string and assigns it to the RatingType field.
func (o *FrameworksPutPreviousValues) SetRatingType(v string) {
	o.RatingType = &v
}

// GetLicenseRequired returns the LicenseRequired field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetLicenseRequired() bool {
	if o == nil || IsNil(o.LicenseRequired) {
		var ret bool
		return ret
	}
	return *o.LicenseRequired
}

// GetLicenseRequiredOk returns a tuple with the LicenseRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetLicenseRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.LicenseRequired) {
		return nil, false
	}
	return o.LicenseRequired, true
}

// HasLicenseRequired returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasLicenseRequired() bool {
	if o != nil && !IsNil(o.LicenseRequired) {
		return true
	}

	return false
}

// SetLicenseRequired gets a reference to the given bool and assigns it to the LicenseRequired field.
func (o *FrameworksPutPreviousValues) SetLicenseRequired(v bool) {
	o.LicenseRequired = &v
}

// GetLicenseApprovedBy returns the LicenseApprovedBy field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetLicenseApprovedBy() int32 {
	if o == nil || IsNil(o.LicenseApprovedBy) {
		var ret int32
		return ret
	}
	return *o.LicenseApprovedBy
}

// GetLicenseApprovedByOk returns a tuple with the LicenseApprovedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetLicenseApprovedByOk() (*int32, bool) {
	if o == nil || IsNil(o.LicenseApprovedBy) {
		return nil, false
	}
	return o.LicenseApprovedBy, true
}

// HasLicenseApprovedBy returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasLicenseApprovedBy() bool {
	if o != nil && !IsNil(o.LicenseApprovedBy) {
		return true
	}

	return false
}

// SetLicenseApprovedBy gets a reference to the given int32 and assigns it to the LicenseApprovedBy field.
func (o *FrameworksPutPreviousValues) SetLicenseApprovedBy(v int32) {
	o.LicenseApprovedBy = &v
}

// GetLicenseApprovedOn returns the LicenseApprovedOn field value if set, zero value otherwise.
func (o *FrameworksPutPreviousValues) GetLicenseApprovedOn() string {
	if o == nil || IsNil(o.LicenseApprovedOn) {
		var ret string
		return ret
	}
	return *o.LicenseApprovedOn
}

// GetLicenseApprovedOnOk returns a tuple with the LicenseApprovedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPutPreviousValues) GetLicenseApprovedOnOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseApprovedOn) {
		return nil, false
	}
	return o.LicenseApprovedOn, true
}

// HasLicenseApprovedOn returns a boolean if a field has been set.
func (o *FrameworksPutPreviousValues) HasLicenseApprovedOn() bool {
	if o != nil && !IsNil(o.LicenseApprovedOn) {
		return true
	}

	return false
}

// SetLicenseApprovedOn gets a reference to the given string and assigns it to the LicenseApprovedOn field.
func (o *FrameworksPutPreviousValues) SetLicenseApprovedOn(v string) {
	o.LicenseApprovedOn = &v
}

func (o FrameworksPutPreviousValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameworksPutPreviousValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SortOrder) {
		toSerialize["sort_order"] = o.SortOrder
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.FormTemplateId) {
		toSerialize["form_template_id"] = o.FormTemplateId
	}
	if !IsNil(o.ContentServiceId) {
		toSerialize["content_service_id"] = o.ContentServiceId
	}
	if !IsNil(o.ShortName) {
		toSerialize["short_name"] = o.ShortName
	}
	if !IsNil(o.ContentSource) {
		toSerialize["content_source"] = o.ContentSource
	}
	if !IsNil(o.IsCcf) {
		toSerialize["is_ccf"] = o.IsCcf
	}
	if !IsNil(o.RequirementLevel) {
		toSerialize["requirement_level"] = o.RequirementLevel
	}
	if !IsNil(o.FrameworkCategoryId) {
		toSerialize["framework_category_id"] = o.FrameworkCategoryId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ScopeDescription) {
		toSerialize["scope_description"] = o.ScopeDescription
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.ImplementationDate) {
		toSerialize["implementation_date"] = o.ImplementationDate
	}
	if !IsNil(o.ImplementationStatus) {
		toSerialize["implementation_status"] = o.ImplementationStatus
	}
	if !IsNil(o.ImplementationTargetDate) {
		toSerialize["implementation_target_date"] = o.ImplementationTargetDate
	}
	if !IsNil(o.LastAuditDate) {
		toSerialize["last_audit_date"] = o.LastAuditDate
	}
	if !IsNil(o.NextAuditDate) {
		toSerialize["next_audit_date"] = o.NextAuditDate
	}
	if !IsNil(o.EffectiveDate) {
		toSerialize["effective_date"] = o.EffectiveDate
	}
	if !IsNil(o.OwnerUserId) {
		toSerialize["owner_user_id"] = o.OwnerUserId
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	if o.XcTotals != nil {
		toSerialize["xc_totals"] = o.XcTotals
	}
	if !IsNil(o.RatingType) {
		toSerialize["rating_type"] = o.RatingType
	}
	if !IsNil(o.LicenseRequired) {
		toSerialize["license_required"] = o.LicenseRequired
	}
	if !IsNil(o.LicenseApprovedBy) {
		toSerialize["license_approved_by"] = o.LicenseApprovedBy
	}
	if !IsNil(o.LicenseApprovedOn) {
		toSerialize["license_approved_on"] = o.LicenseApprovedOn
	}
	return toSerialize, nil
}

type NullableFrameworksPutPreviousValues struct {
	value *FrameworksPutPreviousValues
	isSet bool
}

func (v NullableFrameworksPutPreviousValues) Get() *FrameworksPutPreviousValues {
	return v.value
}

func (v *NullableFrameworksPutPreviousValues) Set(val *FrameworksPutPreviousValues) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameworksPutPreviousValues) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameworksPutPreviousValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameworksPutPreviousValues(val *FrameworksPutPreviousValues) *NullableFrameworksPutPreviousValues {
	return &NullableFrameworksPutPreviousValues{value: val, isSet: true}
}

func (v NullableFrameworksPutPreviousValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameworksPutPreviousValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


