/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the ControlsDataPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsDataPut{}

// ControlsDataPut struct for ControlsDataPut
type ControlsDataPut struct {
	ControlsDatum *ControlsDataPutControlsDatum `json:"controls_datum,omitempty"`
	PreviousValues *ControlsDataPutPreviousValues `json:"previous_values,omitempty"`
}

// NewControlsDataPut instantiates a new ControlsDataPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsDataPut() *ControlsDataPut {
	this := ControlsDataPut{}
	return &this
}

// NewControlsDataPutWithDefaults instantiates a new ControlsDataPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsDataPutWithDefaults() *ControlsDataPut {
	this := ControlsDataPut{}
	return &this
}

// GetControlsDatum returns the ControlsDatum field value if set, zero value otherwise.
func (o *ControlsDataPut) GetControlsDatum() ControlsDataPutControlsDatum {
	if o == nil || IsNil(o.ControlsDatum) {
		var ret ControlsDataPutControlsDatum
		return ret
	}
	return *o.ControlsDatum
}

// GetControlsDatumOk returns a tuple with the ControlsDatum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataPut) GetControlsDatumOk() (*ControlsDataPutControlsDatum, bool) {
	if o == nil || IsNil(o.ControlsDatum) {
		return nil, false
	}
	return o.ControlsDatum, true
}

// HasControlsDatum returns a boolean if a field has been set.
func (o *ControlsDataPut) HasControlsDatum() bool {
	if o != nil && !IsNil(o.ControlsDatum) {
		return true
	}

	return false
}

// SetControlsDatum gets a reference to the given ControlsDataPutControlsDatum and assigns it to the ControlsDatum field.
func (o *ControlsDataPut) SetControlsDatum(v ControlsDataPutControlsDatum) {
	o.ControlsDatum = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *ControlsDataPut) GetPreviousValues() ControlsDataPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret ControlsDataPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataPut) GetPreviousValuesOk() (*ControlsDataPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *ControlsDataPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given ControlsDataPutPreviousValues and assigns it to the PreviousValues field.
func (o *ControlsDataPut) SetPreviousValues(v ControlsDataPutPreviousValues) {
	o.PreviousValues = &v
}

func (o ControlsDataPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsDataPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ControlsDatum) {
		toSerialize["controls_datum"] = o.ControlsDatum
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableControlsDataPut struct {
	value *ControlsDataPut
	isSet bool
}

func (v NullableControlsDataPut) Get() *ControlsDataPut {
	return v.value
}

func (v *NullableControlsDataPut) Set(val *ControlsDataPut) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsDataPut) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsDataPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsDataPut(val *ControlsDataPut) *NullableControlsDataPut {
	return &NullableControlsDataPut{value: val, isSet: true}
}

func (v NullableControlsDataPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsDataPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


