/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the NotificationMessagesPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationMessagesPut{}

// NotificationMessagesPut struct for NotificationMessagesPut
type NotificationMessagesPut struct {
	NotificationMessage *NotificationMessagesPutNotificationMessage `json:"notification_message,omitempty"`
	PreviousValues *NotificationMessagesPutPreviousValues `json:"previous_values,omitempty"`
}

// NewNotificationMessagesPut instantiates a new NotificationMessagesPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationMessagesPut() *NotificationMessagesPut {
	this := NotificationMessagesPut{}
	return &this
}

// NewNotificationMessagesPutWithDefaults instantiates a new NotificationMessagesPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationMessagesPutWithDefaults() *NotificationMessagesPut {
	this := NotificationMessagesPut{}
	return &this
}

// GetNotificationMessage returns the NotificationMessage field value if set, zero value otherwise.
func (o *NotificationMessagesPut) GetNotificationMessage() NotificationMessagesPutNotificationMessage {
	if o == nil || IsNil(o.NotificationMessage) {
		var ret NotificationMessagesPutNotificationMessage
		return ret
	}
	return *o.NotificationMessage
}

// GetNotificationMessageOk returns a tuple with the NotificationMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessagesPut) GetNotificationMessageOk() (*NotificationMessagesPutNotificationMessage, bool) {
	if o == nil || IsNil(o.NotificationMessage) {
		return nil, false
	}
	return o.NotificationMessage, true
}

// HasNotificationMessage returns a boolean if a field has been set.
func (o *NotificationMessagesPut) HasNotificationMessage() bool {
	if o != nil && !IsNil(o.NotificationMessage) {
		return true
	}

	return false
}

// SetNotificationMessage gets a reference to the given NotificationMessagesPutNotificationMessage and assigns it to the NotificationMessage field.
func (o *NotificationMessagesPut) SetNotificationMessage(v NotificationMessagesPutNotificationMessage) {
	o.NotificationMessage = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *NotificationMessagesPut) GetPreviousValues() NotificationMessagesPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret NotificationMessagesPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessagesPut) GetPreviousValuesOk() (*NotificationMessagesPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *NotificationMessagesPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given NotificationMessagesPutPreviousValues and assigns it to the PreviousValues field.
func (o *NotificationMessagesPut) SetPreviousValues(v NotificationMessagesPutPreviousValues) {
	o.PreviousValues = &v
}

func (o NotificationMessagesPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationMessagesPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotificationMessage) {
		toSerialize["notification_message"] = o.NotificationMessage
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableNotificationMessagesPut struct {
	value *NotificationMessagesPut
	isSet bool
}

func (v NullableNotificationMessagesPut) Get() *NotificationMessagesPut {
	return v.value
}

func (v *NullableNotificationMessagesPut) Set(val *NotificationMessagesPut) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationMessagesPut) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationMessagesPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationMessagesPut(val *NotificationMessagesPut) *NullableNotificationMessagesPut {
	return &NullableNotificationMessagesPut{value: val, isSet: true}
}

func (v NullableNotificationMessagesPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationMessagesPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


