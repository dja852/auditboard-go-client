/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EsgTopicsAPIService EsgTopicsAPI service
type EsgTopicsAPIService service

type ApiEsgTopicsEsgTopicIdDeleteRequest struct {
	ctx context.Context
	ApiService *EsgTopicsAPIService
	esgTopicId int64
}

func (r ApiEsgTopicsEsgTopicIdDeleteRequest) Execute() (*EsgTopics, *http.Response, error) {
	return r.ApiService.EsgTopicsEsgTopicIdDeleteExecute(r)
}

/*
EsgTopicsEsgTopicIdDelete Method for EsgTopicsEsgTopicIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgTopicId Model id
 @return ApiEsgTopicsEsgTopicIdDeleteRequest
*/
func (a *EsgTopicsAPIService) EsgTopicsEsgTopicIdDelete(ctx context.Context, esgTopicId int64) ApiEsgTopicsEsgTopicIdDeleteRequest {
	return ApiEsgTopicsEsgTopicIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		esgTopicId: esgTopicId,
	}
}

// Execute executes the request
//  @return EsgTopics
func (a *EsgTopicsAPIService) EsgTopicsEsgTopicIdDeleteExecute(r ApiEsgTopicsEsgTopicIdDeleteRequest) (*EsgTopics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgTopics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgTopicsAPIService.EsgTopicsEsgTopicIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_topics/{esg_topic_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_topic_id"+"}", url.PathEscape(parameterValueToString(r.esgTopicId, "esgTopicId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgTopicsEsgTopicIdGetRequest struct {
	ctx context.Context
	ApiService *EsgTopicsAPIService
	esgTopicId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiEsgTopicsEsgTopicIdGetRequest) Include(include []string) ApiEsgTopicsEsgTopicIdGetRequest {
	r.include = &include
	return r
}

func (r ApiEsgTopicsEsgTopicIdGetRequest) Execute() (*EsgTopics, *http.Response, error) {
	return r.ApiService.EsgTopicsEsgTopicIdGetExecute(r)
}

/*
EsgTopicsEsgTopicIdGet Method for EsgTopicsEsgTopicIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgTopicId Model id
 @return ApiEsgTopicsEsgTopicIdGetRequest
*/
func (a *EsgTopicsAPIService) EsgTopicsEsgTopicIdGet(ctx context.Context, esgTopicId int64) ApiEsgTopicsEsgTopicIdGetRequest {
	return ApiEsgTopicsEsgTopicIdGetRequest{
		ApiService: a,
		ctx: ctx,
		esgTopicId: esgTopicId,
	}
}

// Execute executes the request
//  @return EsgTopics
func (a *EsgTopicsAPIService) EsgTopicsEsgTopicIdGetExecute(r ApiEsgTopicsEsgTopicIdGetRequest) (*EsgTopics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgTopics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgTopicsAPIService.EsgTopicsEsgTopicIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_topics/{esg_topic_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_topic_id"+"}", url.PathEscape(parameterValueToString(r.esgTopicId, "esgTopicId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgTopicsEsgTopicIdPutRequest struct {
	ctx context.Context
	ApiService *EsgTopicsAPIService
	esgTopicId int64
	esgTopicsPut *EsgTopicsPut
}

func (r ApiEsgTopicsEsgTopicIdPutRequest) EsgTopicsPut(esgTopicsPut EsgTopicsPut) ApiEsgTopicsEsgTopicIdPutRequest {
	r.esgTopicsPut = &esgTopicsPut
	return r
}

func (r ApiEsgTopicsEsgTopicIdPutRequest) Execute() (*EsgTopics, *http.Response, error) {
	return r.ApiService.EsgTopicsEsgTopicIdPutExecute(r)
}

/*
EsgTopicsEsgTopicIdPut Method for EsgTopicsEsgTopicIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgTopicId Model id
 @return ApiEsgTopicsEsgTopicIdPutRequest
*/
func (a *EsgTopicsAPIService) EsgTopicsEsgTopicIdPut(ctx context.Context, esgTopicId int64) ApiEsgTopicsEsgTopicIdPutRequest {
	return ApiEsgTopicsEsgTopicIdPutRequest{
		ApiService: a,
		ctx: ctx,
		esgTopicId: esgTopicId,
	}
}

// Execute executes the request
//  @return EsgTopics
func (a *EsgTopicsAPIService) EsgTopicsEsgTopicIdPutExecute(r ApiEsgTopicsEsgTopicIdPutRequest) (*EsgTopics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgTopics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgTopicsAPIService.EsgTopicsEsgTopicIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_topics/{esg_topic_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_topic_id"+"}", url.PathEscape(parameterValueToString(r.esgTopicId, "esgTopicId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esgTopicsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgTopicsGetRequest struct {
	ctx context.Context
	ApiService *EsgTopicsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiEsgTopicsGetRequest) Include(include []string) ApiEsgTopicsGetRequest {
	r.include = &include
	return r
}

func (r ApiEsgTopicsGetRequest) Execute() (*EsgTopicsGet200Response, *http.Response, error) {
	return r.ApiService.EsgTopicsGetExecute(r)
}

/*
EsgTopicsGet Method for EsgTopicsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEsgTopicsGetRequest
*/
func (a *EsgTopicsAPIService) EsgTopicsGet(ctx context.Context) ApiEsgTopicsGetRequest {
	return ApiEsgTopicsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EsgTopicsGet200Response
func (a *EsgTopicsAPIService) EsgTopicsGetExecute(r ApiEsgTopicsGetRequest) (*EsgTopicsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgTopicsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgTopicsAPIService.EsgTopicsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_topics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgTopicsPostRequest struct {
	ctx context.Context
	ApiService *EsgTopicsAPIService
	esgTopicsPostRequest *EsgTopicsPostRequest
}

func (r ApiEsgTopicsPostRequest) EsgTopicsPostRequest(esgTopicsPostRequest EsgTopicsPostRequest) ApiEsgTopicsPostRequest {
	r.esgTopicsPostRequest = &esgTopicsPostRequest
	return r
}

func (r ApiEsgTopicsPostRequest) Execute() (*EsgTopicsGet200Response, *http.Response, error) {
	return r.ApiService.EsgTopicsPostExecute(r)
}

/*
EsgTopicsPost Method for EsgTopicsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEsgTopicsPostRequest
*/
func (a *EsgTopicsAPIService) EsgTopicsPost(ctx context.Context) ApiEsgTopicsPostRequest {
	return ApiEsgTopicsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EsgTopicsGet200Response
func (a *EsgTopicsAPIService) EsgTopicsPostExecute(r ApiEsgTopicsPostRequest) (*EsgTopicsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgTopicsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgTopicsAPIService.EsgTopicsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_topics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esgTopicsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
