/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the TaskItemsPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskItemsPut{}

// TaskItemsPut struct for TaskItemsPut
type TaskItemsPut struct {
	TaskItem *TaskItemsPutTaskItem `json:"task_item,omitempty"`
	PreviousValues *TaskItemsPutPreviousValues `json:"previous_values,omitempty"`
}

// NewTaskItemsPut instantiates a new TaskItemsPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskItemsPut() *TaskItemsPut {
	this := TaskItemsPut{}
	return &this
}

// NewTaskItemsPutWithDefaults instantiates a new TaskItemsPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskItemsPutWithDefaults() *TaskItemsPut {
	this := TaskItemsPut{}
	return &this
}

// GetTaskItem returns the TaskItem field value if set, zero value otherwise.
func (o *TaskItemsPut) GetTaskItem() TaskItemsPutTaskItem {
	if o == nil || IsNil(o.TaskItem) {
		var ret TaskItemsPutTaskItem
		return ret
	}
	return *o.TaskItem
}

// GetTaskItemOk returns a tuple with the TaskItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskItemsPut) GetTaskItemOk() (*TaskItemsPutTaskItem, bool) {
	if o == nil || IsNil(o.TaskItem) {
		return nil, false
	}
	return o.TaskItem, true
}

// HasTaskItem returns a boolean if a field has been set.
func (o *TaskItemsPut) HasTaskItem() bool {
	if o != nil && !IsNil(o.TaskItem) {
		return true
	}

	return false
}

// SetTaskItem gets a reference to the given TaskItemsPutTaskItem and assigns it to the TaskItem field.
func (o *TaskItemsPut) SetTaskItem(v TaskItemsPutTaskItem) {
	o.TaskItem = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *TaskItemsPut) GetPreviousValues() TaskItemsPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret TaskItemsPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskItemsPut) GetPreviousValuesOk() (*TaskItemsPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *TaskItemsPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given TaskItemsPutPreviousValues and assigns it to the PreviousValues field.
func (o *TaskItemsPut) SetPreviousValues(v TaskItemsPutPreviousValues) {
	o.PreviousValues = &v
}

func (o TaskItemsPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskItemsPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaskItem) {
		toSerialize["task_item"] = o.TaskItem
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableTaskItemsPut struct {
	value *TaskItemsPut
	isSet bool
}

func (v NullableTaskItemsPut) Get() *TaskItemsPut {
	return v.value
}

func (v *NullableTaskItemsPut) Set(val *TaskItemsPut) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskItemsPut) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskItemsPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskItemsPut(val *TaskItemsPut) *NullableTaskItemsPut {
	return &NullableTaskItemsPut{value: val, isSet: true}
}

func (v NullableTaskItemsPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskItemsPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


