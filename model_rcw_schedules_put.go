/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the RcwSchedulesPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RcwSchedulesPut{}

// RcwSchedulesPut struct for RcwSchedulesPut
type RcwSchedulesPut struct {
	RcwSchedule *RcwRequestCategoriesPutRcwRequestCategory `json:"rcw_schedule,omitempty"`
	PreviousValues *RcwRequestCategoriesPutPreviousValues `json:"previous_values,omitempty"`
}

// NewRcwSchedulesPut instantiates a new RcwSchedulesPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRcwSchedulesPut() *RcwSchedulesPut {
	this := RcwSchedulesPut{}
	return &this
}

// NewRcwSchedulesPutWithDefaults instantiates a new RcwSchedulesPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRcwSchedulesPutWithDefaults() *RcwSchedulesPut {
	this := RcwSchedulesPut{}
	return &this
}

// GetRcwSchedule returns the RcwSchedule field value if set, zero value otherwise.
func (o *RcwSchedulesPut) GetRcwSchedule() RcwRequestCategoriesPutRcwRequestCategory {
	if o == nil || IsNil(o.RcwSchedule) {
		var ret RcwRequestCategoriesPutRcwRequestCategory
		return ret
	}
	return *o.RcwSchedule
}

// GetRcwScheduleOk returns a tuple with the RcwSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwSchedulesPut) GetRcwScheduleOk() (*RcwRequestCategoriesPutRcwRequestCategory, bool) {
	if o == nil || IsNil(o.RcwSchedule) {
		return nil, false
	}
	return o.RcwSchedule, true
}

// HasRcwSchedule returns a boolean if a field has been set.
func (o *RcwSchedulesPut) HasRcwSchedule() bool {
	if o != nil && !IsNil(o.RcwSchedule) {
		return true
	}

	return false
}

// SetRcwSchedule gets a reference to the given RcwRequestCategoriesPutRcwRequestCategory and assigns it to the RcwSchedule field.
func (o *RcwSchedulesPut) SetRcwSchedule(v RcwRequestCategoriesPutRcwRequestCategory) {
	o.RcwSchedule = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *RcwSchedulesPut) GetPreviousValues() RcwRequestCategoriesPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret RcwRequestCategoriesPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwSchedulesPut) GetPreviousValuesOk() (*RcwRequestCategoriesPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *RcwSchedulesPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given RcwRequestCategoriesPutPreviousValues and assigns it to the PreviousValues field.
func (o *RcwSchedulesPut) SetPreviousValues(v RcwRequestCategoriesPutPreviousValues) {
	o.PreviousValues = &v
}

func (o RcwSchedulesPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RcwSchedulesPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RcwSchedule) {
		toSerialize["rcw_schedule"] = o.RcwSchedule
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableRcwSchedulesPut struct {
	value *RcwSchedulesPut
	isSet bool
}

func (v NullableRcwSchedulesPut) Get() *RcwSchedulesPut {
	return v.value
}

func (v *NullableRcwSchedulesPut) Set(val *RcwSchedulesPut) {
	v.value = val
	v.isSet = true
}

func (v NullableRcwSchedulesPut) IsSet() bool {
	return v.isSet
}

func (v *NullableRcwSchedulesPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRcwSchedulesPut(val *RcwSchedulesPut) *NullableRcwSchedulesPut {
	return &NullableRcwSchedulesPut{value: val, isSet: true}
}

func (v NullableRcwSchedulesPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRcwSchedulesPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


