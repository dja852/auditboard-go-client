/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the ControlsDataArchivesPutControlsDataArchive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsDataArchivesPutControlsDataArchive{}

// ControlsDataArchivesPutControlsDataArchive struct for ControlsDataArchivesPutControlsDataArchive
type ControlsDataArchivesPutControlsDataArchive struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	// Note: This is a Foreign Key to `controls_data.id`.<fk table='controls_data' column='id'/>
	ControlsDatumId int32 `json:"controls_datum_id"`
	// Note: This is a Foreign Key to `archives.id`.<fk table='archives' column='id'/>
	ArchiveId int32 `json:"archive_id"`
	ArchiveData string `json:"archive_data"`
	ControlsDatumDescription *string `json:"controls_datum_description,omitempty"`
	EntityName *string `json:"entity_name,omitempty"`
	ControlName *string `json:"control_name,omitempty"`
	ControlUid *string `json:"control_uid,omitempty"`
	EntityCode *string `json:"entity_code,omitempty"`
	RegionCode *string `json:"region_code,omitempty"`
	RegionName *string `json:"region_name,omitempty"`
	ProcessUid *string `json:"process_uid,omitempty"`
	ProcessName *string `json:"process_name,omitempty"`
	SubprocessUid *string `json:"subprocess_uid,omitempty"`
	SubprocessName *string `json:"subprocess_name,omitempty"`
	RegionId *int32 `json:"region_id,omitempty"`
	EntityId *int32 `json:"entity_id,omitempty"`
	SubprocessId *int32 `json:"subprocess_id,omitempty"`
	ProcessId *int32 `json:"process_id,omitempty"`
	ControlId *int32 `json:"control_id,omitempty"`
	FieldData interface{} `json:"field_data,omitempty"`
}

type _ControlsDataArchivesPutControlsDataArchive ControlsDataArchivesPutControlsDataArchive

// NewControlsDataArchivesPutControlsDataArchive instantiates a new ControlsDataArchivesPutControlsDataArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsDataArchivesPutControlsDataArchive(controlsDatumId int32, archiveId int32, archiveData string) *ControlsDataArchivesPutControlsDataArchive {
	this := ControlsDataArchivesPutControlsDataArchive{}
	this.ControlsDatumId = controlsDatumId
	this.ArchiveId = archiveId
	this.ArchiveData = archiveData
	return &this
}

// NewControlsDataArchivesPutControlsDataArchiveWithDefaults instantiates a new ControlsDataArchivesPutControlsDataArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsDataArchivesPutControlsDataArchiveWithDefaults() *ControlsDataArchivesPutControlsDataArchive {
	this := ControlsDataArchivesPutControlsDataArchive{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetId(v int32) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetControlsDatumId returns the ControlsDatumId field value
func (o *ControlsDataArchivesPutControlsDataArchive) GetControlsDatumId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ControlsDatumId
}

// GetControlsDatumIdOk returns a tuple with the ControlsDatumId field value
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetControlsDatumIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ControlsDatumId, true
}

// SetControlsDatumId sets field value
func (o *ControlsDataArchivesPutControlsDataArchive) SetControlsDatumId(v int32) {
	o.ControlsDatumId = v
}

// GetArchiveId returns the ArchiveId field value
func (o *ControlsDataArchivesPutControlsDataArchive) GetArchiveId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ArchiveId
}

// GetArchiveIdOk returns a tuple with the ArchiveId field value
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetArchiveIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchiveId, true
}

// SetArchiveId sets field value
func (o *ControlsDataArchivesPutControlsDataArchive) SetArchiveId(v int32) {
	o.ArchiveId = v
}

// GetArchiveData returns the ArchiveData field value
func (o *ControlsDataArchivesPutControlsDataArchive) GetArchiveData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArchiveData
}

// GetArchiveDataOk returns a tuple with the ArchiveData field value
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetArchiveDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchiveData, true
}

// SetArchiveData sets field value
func (o *ControlsDataArchivesPutControlsDataArchive) SetArchiveData(v string) {
	o.ArchiveData = v
}

// GetControlsDatumDescription returns the ControlsDatumDescription field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetControlsDatumDescription() string {
	if o == nil || IsNil(o.ControlsDatumDescription) {
		var ret string
		return ret
	}
	return *o.ControlsDatumDescription
}

// GetControlsDatumDescriptionOk returns a tuple with the ControlsDatumDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetControlsDatumDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ControlsDatumDescription) {
		return nil, false
	}
	return o.ControlsDatumDescription, true
}

// HasControlsDatumDescription returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasControlsDatumDescription() bool {
	if o != nil && !IsNil(o.ControlsDatumDescription) {
		return true
	}

	return false
}

// SetControlsDatumDescription gets a reference to the given string and assigns it to the ControlsDatumDescription field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetControlsDatumDescription(v string) {
	o.ControlsDatumDescription = &v
}

// GetEntityName returns the EntityName field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetEntityName() string {
	if o == nil || IsNil(o.EntityName) {
		var ret string
		return ret
	}
	return *o.EntityName
}

// GetEntityNameOk returns a tuple with the EntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetEntityNameOk() (*string, bool) {
	if o == nil || IsNil(o.EntityName) {
		return nil, false
	}
	return o.EntityName, true
}

// HasEntityName returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasEntityName() bool {
	if o != nil && !IsNil(o.EntityName) {
		return true
	}

	return false
}

// SetEntityName gets a reference to the given string and assigns it to the EntityName field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetEntityName(v string) {
	o.EntityName = &v
}

// GetControlName returns the ControlName field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetControlName() string {
	if o == nil || IsNil(o.ControlName) {
		var ret string
		return ret
	}
	return *o.ControlName
}

// GetControlNameOk returns a tuple with the ControlName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetControlNameOk() (*string, bool) {
	if o == nil || IsNil(o.ControlName) {
		return nil, false
	}
	return o.ControlName, true
}

// HasControlName returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasControlName() bool {
	if o != nil && !IsNil(o.ControlName) {
		return true
	}

	return false
}

// SetControlName gets a reference to the given string and assigns it to the ControlName field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetControlName(v string) {
	o.ControlName = &v
}

// GetControlUid returns the ControlUid field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetControlUid() string {
	if o == nil || IsNil(o.ControlUid) {
		var ret string
		return ret
	}
	return *o.ControlUid
}

// GetControlUidOk returns a tuple with the ControlUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetControlUidOk() (*string, bool) {
	if o == nil || IsNil(o.ControlUid) {
		return nil, false
	}
	return o.ControlUid, true
}

// HasControlUid returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasControlUid() bool {
	if o != nil && !IsNil(o.ControlUid) {
		return true
	}

	return false
}

// SetControlUid gets a reference to the given string and assigns it to the ControlUid field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetControlUid(v string) {
	o.ControlUid = &v
}

// GetEntityCode returns the EntityCode field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetEntityCode() string {
	if o == nil || IsNil(o.EntityCode) {
		var ret string
		return ret
	}
	return *o.EntityCode
}

// GetEntityCodeOk returns a tuple with the EntityCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetEntityCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityCode) {
		return nil, false
	}
	return o.EntityCode, true
}

// HasEntityCode returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasEntityCode() bool {
	if o != nil && !IsNil(o.EntityCode) {
		return true
	}

	return false
}

// SetEntityCode gets a reference to the given string and assigns it to the EntityCode field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetEntityCode(v string) {
	o.EntityCode = &v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetRegionCode() string {
	if o == nil || IsNil(o.RegionCode) {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCode) {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasRegionCode() bool {
	if o != nil && !IsNil(o.RegionCode) {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetRegionName returns the RegionName field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetRegionName() string {
	if o == nil || IsNil(o.RegionName) {
		var ret string
		return ret
	}
	return *o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetRegionNameOk() (*string, bool) {
	if o == nil || IsNil(o.RegionName) {
		return nil, false
	}
	return o.RegionName, true
}

// HasRegionName returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasRegionName() bool {
	if o != nil && !IsNil(o.RegionName) {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given string and assigns it to the RegionName field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetRegionName(v string) {
	o.RegionName = &v
}

// GetProcessUid returns the ProcessUid field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetProcessUid() string {
	if o == nil || IsNil(o.ProcessUid) {
		var ret string
		return ret
	}
	return *o.ProcessUid
}

// GetProcessUidOk returns a tuple with the ProcessUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetProcessUidOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessUid) {
		return nil, false
	}
	return o.ProcessUid, true
}

// HasProcessUid returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasProcessUid() bool {
	if o != nil && !IsNil(o.ProcessUid) {
		return true
	}

	return false
}

// SetProcessUid gets a reference to the given string and assigns it to the ProcessUid field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetProcessUid(v string) {
	o.ProcessUid = &v
}

// GetProcessName returns the ProcessName field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetProcessName() string {
	if o == nil || IsNil(o.ProcessName) {
		var ret string
		return ret
	}
	return *o.ProcessName
}

// GetProcessNameOk returns a tuple with the ProcessName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetProcessNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessName) {
		return nil, false
	}
	return o.ProcessName, true
}

// HasProcessName returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasProcessName() bool {
	if o != nil && !IsNil(o.ProcessName) {
		return true
	}

	return false
}

// SetProcessName gets a reference to the given string and assigns it to the ProcessName field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetProcessName(v string) {
	o.ProcessName = &v
}

// GetSubprocessUid returns the SubprocessUid field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetSubprocessUid() string {
	if o == nil || IsNil(o.SubprocessUid) {
		var ret string
		return ret
	}
	return *o.SubprocessUid
}

// GetSubprocessUidOk returns a tuple with the SubprocessUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetSubprocessUidOk() (*string, bool) {
	if o == nil || IsNil(o.SubprocessUid) {
		return nil, false
	}
	return o.SubprocessUid, true
}

// HasSubprocessUid returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasSubprocessUid() bool {
	if o != nil && !IsNil(o.SubprocessUid) {
		return true
	}

	return false
}

// SetSubprocessUid gets a reference to the given string and assigns it to the SubprocessUid field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetSubprocessUid(v string) {
	o.SubprocessUid = &v
}

// GetSubprocessName returns the SubprocessName field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetSubprocessName() string {
	if o == nil || IsNil(o.SubprocessName) {
		var ret string
		return ret
	}
	return *o.SubprocessName
}

// GetSubprocessNameOk returns a tuple with the SubprocessName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetSubprocessNameOk() (*string, bool) {
	if o == nil || IsNil(o.SubprocessName) {
		return nil, false
	}
	return o.SubprocessName, true
}

// HasSubprocessName returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasSubprocessName() bool {
	if o != nil && !IsNil(o.SubprocessName) {
		return true
	}

	return false
}

// SetSubprocessName gets a reference to the given string and assigns it to the SubprocessName field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetSubprocessName(v string) {
	o.SubprocessName = &v
}

// GetRegionId returns the RegionId field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetRegionId() int32 {
	if o == nil || IsNil(o.RegionId) {
		var ret int32
		return ret
	}
	return *o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetRegionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RegionId) {
		return nil, false
	}
	return o.RegionId, true
}

// HasRegionId returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasRegionId() bool {
	if o != nil && !IsNil(o.RegionId) {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given int32 and assigns it to the RegionId field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetRegionId(v int32) {
	o.RegionId = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetEntityId() int32 {
	if o == nil || IsNil(o.EntityId) {
		var ret int32
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetEntityIdOk() (*int32, bool) {
	if o == nil || IsNil(o.EntityId) {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasEntityId() bool {
	if o != nil && !IsNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given int32 and assigns it to the EntityId field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetEntityId(v int32) {
	o.EntityId = &v
}

// GetSubprocessId returns the SubprocessId field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetSubprocessId() int32 {
	if o == nil || IsNil(o.SubprocessId) {
		var ret int32
		return ret
	}
	return *o.SubprocessId
}

// GetSubprocessIdOk returns a tuple with the SubprocessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetSubprocessIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubprocessId) {
		return nil, false
	}
	return o.SubprocessId, true
}

// HasSubprocessId returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasSubprocessId() bool {
	if o != nil && !IsNil(o.SubprocessId) {
		return true
	}

	return false
}

// SetSubprocessId gets a reference to the given int32 and assigns it to the SubprocessId field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetSubprocessId(v int32) {
	o.SubprocessId = &v
}

// GetProcessId returns the ProcessId field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetProcessId() int32 {
	if o == nil || IsNil(o.ProcessId) {
		var ret int32
		return ret
	}
	return *o.ProcessId
}

// GetProcessIdOk returns a tuple with the ProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetProcessIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProcessId) {
		return nil, false
	}
	return o.ProcessId, true
}

// HasProcessId returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasProcessId() bool {
	if o != nil && !IsNil(o.ProcessId) {
		return true
	}

	return false
}

// SetProcessId gets a reference to the given int32 and assigns it to the ProcessId field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetProcessId(v int32) {
	o.ProcessId = &v
}

// GetControlId returns the ControlId field value if set, zero value otherwise.
func (o *ControlsDataArchivesPutControlsDataArchive) GetControlId() int32 {
	if o == nil || IsNil(o.ControlId) {
		var ret int32
		return ret
	}
	return *o.ControlId
}

// GetControlIdOk returns a tuple with the ControlId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) GetControlIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ControlId) {
		return nil, false
	}
	return o.ControlId, true
}

// HasControlId returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasControlId() bool {
	if o != nil && !IsNil(o.ControlId) {
		return true
	}

	return false
}

// SetControlId gets a reference to the given int32 and assigns it to the ControlId field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetControlId(v int32) {
	o.ControlId = &v
}

// GetFieldData returns the FieldData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ControlsDataArchivesPutControlsDataArchive) GetFieldData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FieldData
}

// GetFieldDataOk returns a tuple with the FieldData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControlsDataArchivesPutControlsDataArchive) GetFieldDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FieldData) {
		return nil, false
	}
	return &o.FieldData, true
}

// HasFieldData returns a boolean if a field has been set.
func (o *ControlsDataArchivesPutControlsDataArchive) HasFieldData() bool {
	if o != nil && !IsNil(o.FieldData) {
		return true
	}

	return false
}

// SetFieldData gets a reference to the given interface{} and assigns it to the FieldData field.
func (o *ControlsDataArchivesPutControlsDataArchive) SetFieldData(v interface{}) {
	o.FieldData = v
}

func (o ControlsDataArchivesPutControlsDataArchive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsDataArchivesPutControlsDataArchive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	toSerialize["controls_datum_id"] = o.ControlsDatumId
	toSerialize["archive_id"] = o.ArchiveId
	toSerialize["archive_data"] = o.ArchiveData
	if !IsNil(o.ControlsDatumDescription) {
		toSerialize["controls_datum_description"] = o.ControlsDatumDescription
	}
	if !IsNil(o.EntityName) {
		toSerialize["entity_name"] = o.EntityName
	}
	if !IsNil(o.ControlName) {
		toSerialize["control_name"] = o.ControlName
	}
	if !IsNil(o.ControlUid) {
		toSerialize["control_uid"] = o.ControlUid
	}
	if !IsNil(o.EntityCode) {
		toSerialize["entity_code"] = o.EntityCode
	}
	if !IsNil(o.RegionCode) {
		toSerialize["region_code"] = o.RegionCode
	}
	if !IsNil(o.RegionName) {
		toSerialize["region_name"] = o.RegionName
	}
	if !IsNil(o.ProcessUid) {
		toSerialize["process_uid"] = o.ProcessUid
	}
	if !IsNil(o.ProcessName) {
		toSerialize["process_name"] = o.ProcessName
	}
	if !IsNil(o.SubprocessUid) {
		toSerialize["subprocess_uid"] = o.SubprocessUid
	}
	if !IsNil(o.SubprocessName) {
		toSerialize["subprocess_name"] = o.SubprocessName
	}
	if !IsNil(o.RegionId) {
		toSerialize["region_id"] = o.RegionId
	}
	if !IsNil(o.EntityId) {
		toSerialize["entity_id"] = o.EntityId
	}
	if !IsNil(o.SubprocessId) {
		toSerialize["subprocess_id"] = o.SubprocessId
	}
	if !IsNil(o.ProcessId) {
		toSerialize["process_id"] = o.ProcessId
	}
	if !IsNil(o.ControlId) {
		toSerialize["control_id"] = o.ControlId
	}
	if o.FieldData != nil {
		toSerialize["field_data"] = o.FieldData
	}
	return toSerialize, nil
}

type NullableControlsDataArchivesPutControlsDataArchive struct {
	value *ControlsDataArchivesPutControlsDataArchive
	isSet bool
}

func (v NullableControlsDataArchivesPutControlsDataArchive) Get() *ControlsDataArchivesPutControlsDataArchive {
	return v.value
}

func (v *NullableControlsDataArchivesPutControlsDataArchive) Set(val *ControlsDataArchivesPutControlsDataArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsDataArchivesPutControlsDataArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsDataArchivesPutControlsDataArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsDataArchivesPutControlsDataArchive(val *ControlsDataArchivesPutControlsDataArchive) *NullableControlsDataArchivesPutControlsDataArchive {
	return &NullableControlsDataArchivesPutControlsDataArchive{value: val, isSet: true}
}

func (v NullableControlsDataArchivesPutControlsDataArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsDataArchivesPutControlsDataArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


