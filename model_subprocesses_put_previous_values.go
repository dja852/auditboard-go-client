/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the SubprocessesPutPreviousValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubprocessesPutPreviousValues{}

// SubprocessesPutPreviousValues struct for SubprocessesPutPreviousValues
type SubprocessesPutPreviousValues struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	Uid *string `json:"uid,omitempty"`
	Name *string `json:"name,omitempty"`
	// Note: This is a Foreign Key to `processes.id`.<fk table='processes' column='id'/>
	ProcessId *int32 `json:"process_id,omitempty"`
	IdCode *string `json:"id_code,omitempty"`
}

// NewSubprocessesPutPreviousValues instantiates a new SubprocessesPutPreviousValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubprocessesPutPreviousValues() *SubprocessesPutPreviousValues {
	this := SubprocessesPutPreviousValues{}
	return &this
}

// NewSubprocessesPutPreviousValuesWithDefaults instantiates a new SubprocessesPutPreviousValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubprocessesPutPreviousValuesWithDefaults() *SubprocessesPutPreviousValues {
	this := SubprocessesPutPreviousValues{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubprocessesPutPreviousValues) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesPutPreviousValues) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubprocessesPutPreviousValues) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SubprocessesPutPreviousValues) SetId(v int32) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SubprocessesPutPreviousValues) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesPutPreviousValues) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SubprocessesPutPreviousValues) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *SubprocessesPutPreviousValues) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SubprocessesPutPreviousValues) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesPutPreviousValues) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SubprocessesPutPreviousValues) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *SubprocessesPutPreviousValues) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *SubprocessesPutPreviousValues) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesPutPreviousValues) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *SubprocessesPutPreviousValues) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *SubprocessesPutPreviousValues) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *SubprocessesPutPreviousValues) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesPutPreviousValues) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *SubprocessesPutPreviousValues) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *SubprocessesPutPreviousValues) SetUid(v string) {
	o.Uid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubprocessesPutPreviousValues) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesPutPreviousValues) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubprocessesPutPreviousValues) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SubprocessesPutPreviousValues) SetName(v string) {
	o.Name = &v
}

// GetProcessId returns the ProcessId field value if set, zero value otherwise.
func (o *SubprocessesPutPreviousValues) GetProcessId() int32 {
	if o == nil || IsNil(o.ProcessId) {
		var ret int32
		return ret
	}
	return *o.ProcessId
}

// GetProcessIdOk returns a tuple with the ProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesPutPreviousValues) GetProcessIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProcessId) {
		return nil, false
	}
	return o.ProcessId, true
}

// HasProcessId returns a boolean if a field has been set.
func (o *SubprocessesPutPreviousValues) HasProcessId() bool {
	if o != nil && !IsNil(o.ProcessId) {
		return true
	}

	return false
}

// SetProcessId gets a reference to the given int32 and assigns it to the ProcessId field.
func (o *SubprocessesPutPreviousValues) SetProcessId(v int32) {
	o.ProcessId = &v
}

// GetIdCode returns the IdCode field value if set, zero value otherwise.
func (o *SubprocessesPutPreviousValues) GetIdCode() string {
	if o == nil || IsNil(o.IdCode) {
		var ret string
		return ret
	}
	return *o.IdCode
}

// GetIdCodeOk returns a tuple with the IdCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesPutPreviousValues) GetIdCodeOk() (*string, bool) {
	if o == nil || IsNil(o.IdCode) {
		return nil, false
	}
	return o.IdCode, true
}

// HasIdCode returns a boolean if a field has been set.
func (o *SubprocessesPutPreviousValues) HasIdCode() bool {
	if o != nil && !IsNil(o.IdCode) {
		return true
	}

	return false
}

// SetIdCode gets a reference to the given string and assigns it to the IdCode field.
func (o *SubprocessesPutPreviousValues) SetIdCode(v string) {
	o.IdCode = &v
}

func (o SubprocessesPutPreviousValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubprocessesPutPreviousValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProcessId) {
		toSerialize["process_id"] = o.ProcessId
	}
	if !IsNil(o.IdCode) {
		toSerialize["id_code"] = o.IdCode
	}
	return toSerialize, nil
}

type NullableSubprocessesPutPreviousValues struct {
	value *SubprocessesPutPreviousValues
	isSet bool
}

func (v NullableSubprocessesPutPreviousValues) Get() *SubprocessesPutPreviousValues {
	return v.value
}

func (v *NullableSubprocessesPutPreviousValues) Set(val *SubprocessesPutPreviousValues) {
	v.value = val
	v.isSet = true
}

func (v NullableSubprocessesPutPreviousValues) IsSet() bool {
	return v.isSet
}

func (v *NullableSubprocessesPutPreviousValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubprocessesPutPreviousValues(val *SubprocessesPutPreviousValues) *NullableSubprocessesPutPreviousValues {
	return &NullableSubprocessesPutPreviousValues{value: val, isSet: true}
}

func (v NullableSubprocessesPutPreviousValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubprocessesPutPreviousValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


