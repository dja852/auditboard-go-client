/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PolicyPublishedVersionsAPIService PolicyPublishedVersionsAPI service
type PolicyPublishedVersionsAPIService service

type ApiPolicyPublishedVersionsGetRequest struct {
	ctx context.Context
	ApiService *PolicyPublishedVersionsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiPolicyPublishedVersionsGetRequest) Include(include []string) ApiPolicyPublishedVersionsGetRequest {
	r.include = &include
	return r
}

func (r ApiPolicyPublishedVersionsGetRequest) Execute() (*PolicyPublishedVersionsGet200Response, *http.Response, error) {
	return r.ApiService.PolicyPublishedVersionsGetExecute(r)
}

/*
PolicyPublishedVersionsGet Method for PolicyPublishedVersionsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPolicyPublishedVersionsGetRequest
*/
func (a *PolicyPublishedVersionsAPIService) PolicyPublishedVersionsGet(ctx context.Context) ApiPolicyPublishedVersionsGetRequest {
	return ApiPolicyPublishedVersionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PolicyPublishedVersionsGet200Response
func (a *PolicyPublishedVersionsAPIService) PolicyPublishedVersionsGetExecute(r ApiPolicyPublishedVersionsGetRequest) (*PolicyPublishedVersionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyPublishedVersionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyPublishedVersionsAPIService.PolicyPublishedVersionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policy_published_versions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPolicyPublishedVersionsPolicyPublishedVersionIdDeleteRequest struct {
	ctx context.Context
	ApiService *PolicyPublishedVersionsAPIService
	policyPublishedVersionId int64
}

func (r ApiPolicyPublishedVersionsPolicyPublishedVersionIdDeleteRequest) Execute() (*PolicyPublishedVersions, *http.Response, error) {
	return r.ApiService.PolicyPublishedVersionsPolicyPublishedVersionIdDeleteExecute(r)
}

/*
PolicyPublishedVersionsPolicyPublishedVersionIdDelete Method for PolicyPublishedVersionsPolicyPublishedVersionIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param policyPublishedVersionId Model id
 @return ApiPolicyPublishedVersionsPolicyPublishedVersionIdDeleteRequest
*/
func (a *PolicyPublishedVersionsAPIService) PolicyPublishedVersionsPolicyPublishedVersionIdDelete(ctx context.Context, policyPublishedVersionId int64) ApiPolicyPublishedVersionsPolicyPublishedVersionIdDeleteRequest {
	return ApiPolicyPublishedVersionsPolicyPublishedVersionIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		policyPublishedVersionId: policyPublishedVersionId,
	}
}

// Execute executes the request
//  @return PolicyPublishedVersions
func (a *PolicyPublishedVersionsAPIService) PolicyPublishedVersionsPolicyPublishedVersionIdDeleteExecute(r ApiPolicyPublishedVersionsPolicyPublishedVersionIdDeleteRequest) (*PolicyPublishedVersions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyPublishedVersions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyPublishedVersionsAPIService.PolicyPublishedVersionsPolicyPublishedVersionIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policy_published_versions/{policy_published_version_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"policy_published_version_id"+"}", url.PathEscape(parameterValueToString(r.policyPublishedVersionId, "policyPublishedVersionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPolicyPublishedVersionsPolicyPublishedVersionIdGetRequest struct {
	ctx context.Context
	ApiService *PolicyPublishedVersionsAPIService
	policyPublishedVersionId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiPolicyPublishedVersionsPolicyPublishedVersionIdGetRequest) Include(include []string) ApiPolicyPublishedVersionsPolicyPublishedVersionIdGetRequest {
	r.include = &include
	return r
}

func (r ApiPolicyPublishedVersionsPolicyPublishedVersionIdGetRequest) Execute() (*PolicyPublishedVersions, *http.Response, error) {
	return r.ApiService.PolicyPublishedVersionsPolicyPublishedVersionIdGetExecute(r)
}

/*
PolicyPublishedVersionsPolicyPublishedVersionIdGet Method for PolicyPublishedVersionsPolicyPublishedVersionIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param policyPublishedVersionId Model id
 @return ApiPolicyPublishedVersionsPolicyPublishedVersionIdGetRequest
*/
func (a *PolicyPublishedVersionsAPIService) PolicyPublishedVersionsPolicyPublishedVersionIdGet(ctx context.Context, policyPublishedVersionId int64) ApiPolicyPublishedVersionsPolicyPublishedVersionIdGetRequest {
	return ApiPolicyPublishedVersionsPolicyPublishedVersionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		policyPublishedVersionId: policyPublishedVersionId,
	}
}

// Execute executes the request
//  @return PolicyPublishedVersions
func (a *PolicyPublishedVersionsAPIService) PolicyPublishedVersionsPolicyPublishedVersionIdGetExecute(r ApiPolicyPublishedVersionsPolicyPublishedVersionIdGetRequest) (*PolicyPublishedVersions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyPublishedVersions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyPublishedVersionsAPIService.PolicyPublishedVersionsPolicyPublishedVersionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policy_published_versions/{policy_published_version_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"policy_published_version_id"+"}", url.PathEscape(parameterValueToString(r.policyPublishedVersionId, "policyPublishedVersionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPolicyPublishedVersionsPolicyPublishedVersionIdPutRequest struct {
	ctx context.Context
	ApiService *PolicyPublishedVersionsAPIService
	policyPublishedVersionId int64
	body *interface{}
}

func (r ApiPolicyPublishedVersionsPolicyPublishedVersionIdPutRequest) Body(body interface{}) ApiPolicyPublishedVersionsPolicyPublishedVersionIdPutRequest {
	r.body = &body
	return r
}

func (r ApiPolicyPublishedVersionsPolicyPublishedVersionIdPutRequest) Execute() (*PolicyPublishedVersions, *http.Response, error) {
	return r.ApiService.PolicyPublishedVersionsPolicyPublishedVersionIdPutExecute(r)
}

/*
PolicyPublishedVersionsPolicyPublishedVersionIdPut Method for PolicyPublishedVersionsPolicyPublishedVersionIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param policyPublishedVersionId Model id
 @return ApiPolicyPublishedVersionsPolicyPublishedVersionIdPutRequest
*/
func (a *PolicyPublishedVersionsAPIService) PolicyPublishedVersionsPolicyPublishedVersionIdPut(ctx context.Context, policyPublishedVersionId int64) ApiPolicyPublishedVersionsPolicyPublishedVersionIdPutRequest {
	return ApiPolicyPublishedVersionsPolicyPublishedVersionIdPutRequest{
		ApiService: a,
		ctx: ctx,
		policyPublishedVersionId: policyPublishedVersionId,
	}
}

// Execute executes the request
//  @return PolicyPublishedVersions
func (a *PolicyPublishedVersionsAPIService) PolicyPublishedVersionsPolicyPublishedVersionIdPutExecute(r ApiPolicyPublishedVersionsPolicyPublishedVersionIdPutRequest) (*PolicyPublishedVersions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyPublishedVersions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyPublishedVersionsAPIService.PolicyPublishedVersionsPolicyPublishedVersionIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policy_published_versions/{policy_published_version_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"policy_published_version_id"+"}", url.PathEscape(parameterValueToString(r.policyPublishedVersionId, "policyPublishedVersionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPolicyPublishedVersionsPostRequest struct {
	ctx context.Context
	ApiService *PolicyPublishedVersionsAPIService
	policyPublishedVersionsPostRequest *PolicyPublishedVersionsPostRequest
}

func (r ApiPolicyPublishedVersionsPostRequest) PolicyPublishedVersionsPostRequest(policyPublishedVersionsPostRequest PolicyPublishedVersionsPostRequest) ApiPolicyPublishedVersionsPostRequest {
	r.policyPublishedVersionsPostRequest = &policyPublishedVersionsPostRequest
	return r
}

func (r ApiPolicyPublishedVersionsPostRequest) Execute() (*PolicyPublishedVersionsGet200Response, *http.Response, error) {
	return r.ApiService.PolicyPublishedVersionsPostExecute(r)
}

/*
PolicyPublishedVersionsPost Method for PolicyPublishedVersionsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPolicyPublishedVersionsPostRequest
*/
func (a *PolicyPublishedVersionsAPIService) PolicyPublishedVersionsPost(ctx context.Context) ApiPolicyPublishedVersionsPostRequest {
	return ApiPolicyPublishedVersionsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PolicyPublishedVersionsGet200Response
func (a *PolicyPublishedVersionsAPIService) PolicyPublishedVersionsPostExecute(r ApiPolicyPublishedVersionsPostRequest) (*PolicyPublishedVersionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyPublishedVersionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyPublishedVersionsAPIService.PolicyPublishedVersionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policy_published_versions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyPublishedVersionsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
