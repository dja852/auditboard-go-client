/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AssessmentsAPIService AssessmentsAPI service
type AssessmentsAPIService service

type ApiAssessmentsAssessmentIdAddRisksToAssessmentPostRequest struct {
	ctx context.Context
	ApiService *AssessmentsAPIService
	assessmentId int64
	assessmentsAssessmentIdAddRisksToAssessmentPostRequest *AssessmentsAssessmentIdAddRisksToAssessmentPostRequest
}

func (r ApiAssessmentsAssessmentIdAddRisksToAssessmentPostRequest) AssessmentsAssessmentIdAddRisksToAssessmentPostRequest(assessmentsAssessmentIdAddRisksToAssessmentPostRequest AssessmentsAssessmentIdAddRisksToAssessmentPostRequest) ApiAssessmentsAssessmentIdAddRisksToAssessmentPostRequest {
	r.assessmentsAssessmentIdAddRisksToAssessmentPostRequest = &assessmentsAssessmentIdAddRisksToAssessmentPostRequest
	return r
}

func (r ApiAssessmentsAssessmentIdAddRisksToAssessmentPostRequest) Execute() (*AssessmentsAssessmentIdAddRisksToAssessmentPost200Response, *http.Response, error) {
	return r.ApiService.AssessmentsAssessmentIdAddRisksToAssessmentPostExecute(r)
}

/*
AssessmentsAssessmentIdAddRisksToAssessmentPost Method for AssessmentsAssessmentIdAddRisksToAssessmentPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assessmentId The id of the assessment where the risk(s) will be added.
 @return ApiAssessmentsAssessmentIdAddRisksToAssessmentPostRequest
*/
func (a *AssessmentsAPIService) AssessmentsAssessmentIdAddRisksToAssessmentPost(ctx context.Context, assessmentId int64) ApiAssessmentsAssessmentIdAddRisksToAssessmentPostRequest {
	return ApiAssessmentsAssessmentIdAddRisksToAssessmentPostRequest{
		ApiService: a,
		ctx: ctx,
		assessmentId: assessmentId,
	}
}

// Execute executes the request
//  @return AssessmentsAssessmentIdAddRisksToAssessmentPost200Response
func (a *AssessmentsAPIService) AssessmentsAssessmentIdAddRisksToAssessmentPostExecute(r ApiAssessmentsAssessmentIdAddRisksToAssessmentPostRequest) (*AssessmentsAssessmentIdAddRisksToAssessmentPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AssessmentsAssessmentIdAddRisksToAssessmentPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssessmentsAPIService.AssessmentsAssessmentIdAddRisksToAssessmentPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assessments/{assessment_id}/add_risks_to_assessment"
	localVarPath = strings.Replace(localVarPath, "{"+"assessment_id"+"}", url.PathEscape(parameterValueToString(r.assessmentId, "assessmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assessmentsAssessmentIdAddRisksToAssessmentPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssessmentsAssessmentIdGetRequest struct {
	ctx context.Context
	ApiService *AssessmentsAPIService
	assessmentId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAssessmentsAssessmentIdGetRequest) Include(include []string) ApiAssessmentsAssessmentIdGetRequest {
	r.include = &include
	return r
}

func (r ApiAssessmentsAssessmentIdGetRequest) Execute() (*Assessments, *http.Response, error) {
	return r.ApiService.AssessmentsAssessmentIdGetExecute(r)
}

/*
AssessmentsAssessmentIdGet Method for AssessmentsAssessmentIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assessmentId Model id
 @return ApiAssessmentsAssessmentIdGetRequest
*/
func (a *AssessmentsAPIService) AssessmentsAssessmentIdGet(ctx context.Context, assessmentId int64) ApiAssessmentsAssessmentIdGetRequest {
	return ApiAssessmentsAssessmentIdGetRequest{
		ApiService: a,
		ctx: ctx,
		assessmentId: assessmentId,
	}
}

// Execute executes the request
//  @return Assessments
func (a *AssessmentsAPIService) AssessmentsAssessmentIdGetExecute(r ApiAssessmentsAssessmentIdGetRequest) (*Assessments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Assessments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssessmentsAPIService.AssessmentsAssessmentIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assessments/{assessment_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"assessment_id"+"}", url.PathEscape(parameterValueToString(r.assessmentId, "assessmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssessmentsAssessmentIdPutRequest struct {
	ctx context.Context
	ApiService *AssessmentsAPIService
	assessmentId int64
	body *interface{}
}

func (r ApiAssessmentsAssessmentIdPutRequest) Body(body interface{}) ApiAssessmentsAssessmentIdPutRequest {
	r.body = &body
	return r
}

func (r ApiAssessmentsAssessmentIdPutRequest) Execute() (*Assessments, *http.Response, error) {
	return r.ApiService.AssessmentsAssessmentIdPutExecute(r)
}

/*
AssessmentsAssessmentIdPut Method for AssessmentsAssessmentIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assessmentId Model id
 @return ApiAssessmentsAssessmentIdPutRequest
*/
func (a *AssessmentsAPIService) AssessmentsAssessmentIdPut(ctx context.Context, assessmentId int64) ApiAssessmentsAssessmentIdPutRequest {
	return ApiAssessmentsAssessmentIdPutRequest{
		ApiService: a,
		ctx: ctx,
		assessmentId: assessmentId,
	}
}

// Execute executes the request
//  @return Assessments
func (a *AssessmentsAPIService) AssessmentsAssessmentIdPutExecute(r ApiAssessmentsAssessmentIdPutRequest) (*Assessments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Assessments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssessmentsAPIService.AssessmentsAssessmentIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assessments/{assessment_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"assessment_id"+"}", url.PathEscape(parameterValueToString(r.assessmentId, "assessmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssessmentsGetRequest struct {
	ctx context.Context
	ApiService *AssessmentsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAssessmentsGetRequest) Include(include []string) ApiAssessmentsGetRequest {
	r.include = &include
	return r
}

func (r ApiAssessmentsGetRequest) Execute() (*AssessmentsGet200Response, *http.Response, error) {
	return r.ApiService.AssessmentsGetExecute(r)
}

/*
AssessmentsGet Method for AssessmentsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAssessmentsGetRequest
*/
func (a *AssessmentsAPIService) AssessmentsGet(ctx context.Context) ApiAssessmentsGetRequest {
	return ApiAssessmentsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AssessmentsGet200Response
func (a *AssessmentsAPIService) AssessmentsGetExecute(r ApiAssessmentsGetRequest) (*AssessmentsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AssessmentsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssessmentsAPIService.AssessmentsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assessments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssessmentsPostRequest struct {
	ctx context.Context
	ApiService *AssessmentsAPIService
	assessmentsPostRequest *AssessmentsPostRequest
}

func (r ApiAssessmentsPostRequest) AssessmentsPostRequest(assessmentsPostRequest AssessmentsPostRequest) ApiAssessmentsPostRequest {
	r.assessmentsPostRequest = &assessmentsPostRequest
	return r
}

func (r ApiAssessmentsPostRequest) Execute() (*AssessmentsGet200Response, *http.Response, error) {
	return r.ApiService.AssessmentsPostExecute(r)
}

/*
AssessmentsPost Method for AssessmentsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAssessmentsPostRequest
*/
func (a *AssessmentsAPIService) AssessmentsPost(ctx context.Context) ApiAssessmentsPostRequest {
	return ApiAssessmentsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AssessmentsGet200Response
func (a *AssessmentsAPIService) AssessmentsPostExecute(r ApiAssessmentsPostRequest) (*AssessmentsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AssessmentsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssessmentsAPIService.AssessmentsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assessments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assessmentsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
