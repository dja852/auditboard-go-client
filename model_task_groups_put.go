/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the TaskGroupsPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskGroupsPut{}

// TaskGroupsPut struct for TaskGroupsPut
type TaskGroupsPut struct {
	TaskGroup *TaskGroupsPutTaskGroup `json:"task_group,omitempty"`
	PreviousValues *TaskGroupsPutPreviousValues `json:"previous_values,omitempty"`
}

// NewTaskGroupsPut instantiates a new TaskGroupsPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskGroupsPut() *TaskGroupsPut {
	this := TaskGroupsPut{}
	return &this
}

// NewTaskGroupsPutWithDefaults instantiates a new TaskGroupsPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskGroupsPutWithDefaults() *TaskGroupsPut {
	this := TaskGroupsPut{}
	return &this
}

// GetTaskGroup returns the TaskGroup field value if set, zero value otherwise.
func (o *TaskGroupsPut) GetTaskGroup() TaskGroupsPutTaskGroup {
	if o == nil || IsNil(o.TaskGroup) {
		var ret TaskGroupsPutTaskGroup
		return ret
	}
	return *o.TaskGroup
}

// GetTaskGroupOk returns a tuple with the TaskGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPut) GetTaskGroupOk() (*TaskGroupsPutTaskGroup, bool) {
	if o == nil || IsNil(o.TaskGroup) {
		return nil, false
	}
	return o.TaskGroup, true
}

// HasTaskGroup returns a boolean if a field has been set.
func (o *TaskGroupsPut) HasTaskGroup() bool {
	if o != nil && !IsNil(o.TaskGroup) {
		return true
	}

	return false
}

// SetTaskGroup gets a reference to the given TaskGroupsPutTaskGroup and assigns it to the TaskGroup field.
func (o *TaskGroupsPut) SetTaskGroup(v TaskGroupsPutTaskGroup) {
	o.TaskGroup = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *TaskGroupsPut) GetPreviousValues() TaskGroupsPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret TaskGroupsPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPut) GetPreviousValuesOk() (*TaskGroupsPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *TaskGroupsPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given TaskGroupsPutPreviousValues and assigns it to the PreviousValues field.
func (o *TaskGroupsPut) SetPreviousValues(v TaskGroupsPutPreviousValues) {
	o.PreviousValues = &v
}

func (o TaskGroupsPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskGroupsPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaskGroup) {
		toSerialize["task_group"] = o.TaskGroup
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableTaskGroupsPut struct {
	value *TaskGroupsPut
	isSet bool
}

func (v NullableTaskGroupsPut) Get() *TaskGroupsPut {
	return v.value
}

func (v *NullableTaskGroupsPut) Set(val *TaskGroupsPut) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskGroupsPut) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskGroupsPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskGroupsPut(val *TaskGroupsPut) *NullableTaskGroupsPut {
	return &NullableTaskGroupsPut{value: val, isSet: true}
}

func (v NullableTaskGroupsPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskGroupsPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


