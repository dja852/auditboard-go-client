/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProcessesDataAPIService ProcessesDataAPI service
type ProcessesDataAPIService service

type ApiProcessesDataGetRequest struct {
	ctx context.Context
	ApiService *ProcessesDataAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiProcessesDataGetRequest) Include(include []string) ApiProcessesDataGetRequest {
	r.include = &include
	return r
}

func (r ApiProcessesDataGetRequest) Execute() (*ProcessesDataGet200Response, *http.Response, error) {
	return r.ApiService.ProcessesDataGetExecute(r)
}

/*
ProcessesDataGet Method for ProcessesDataGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProcessesDataGetRequest
*/
func (a *ProcessesDataAPIService) ProcessesDataGet(ctx context.Context) ApiProcessesDataGetRequest {
	return ApiProcessesDataGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProcessesDataGet200Response
func (a *ProcessesDataAPIService) ProcessesDataGetExecute(r ApiProcessesDataGetRequest) (*ProcessesDataGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProcessesDataGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesDataAPIService.ProcessesDataGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/processes_data"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProcessesDataPostRequest struct {
	ctx context.Context
	ApiService *ProcessesDataAPIService
	processesDataPostRequest *ProcessesDataPostRequest
}

func (r ApiProcessesDataPostRequest) ProcessesDataPostRequest(processesDataPostRequest ProcessesDataPostRequest) ApiProcessesDataPostRequest {
	r.processesDataPostRequest = &processesDataPostRequest
	return r
}

func (r ApiProcessesDataPostRequest) Execute() (*ProcessesDataGet200Response, *http.Response, error) {
	return r.ApiService.ProcessesDataPostExecute(r)
}

/*
ProcessesDataPost Method for ProcessesDataPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProcessesDataPostRequest
*/
func (a *ProcessesDataAPIService) ProcessesDataPost(ctx context.Context) ApiProcessesDataPostRequest {
	return ApiProcessesDataPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProcessesDataGet200Response
func (a *ProcessesDataAPIService) ProcessesDataPostExecute(r ApiProcessesDataPostRequest) (*ProcessesDataGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProcessesDataGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesDataAPIService.ProcessesDataPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/processes_data"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.processesDataPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProcessesDataProcessesDatumIdDeleteRequest struct {
	ctx context.Context
	ApiService *ProcessesDataAPIService
	processesDatumId int64
}

func (r ApiProcessesDataProcessesDatumIdDeleteRequest) Execute() (*ProcessesData, *http.Response, error) {
	return r.ApiService.ProcessesDataProcessesDatumIdDeleteExecute(r)
}

/*
ProcessesDataProcessesDatumIdDelete Method for ProcessesDataProcessesDatumIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param processesDatumId Model id
 @return ApiProcessesDataProcessesDatumIdDeleteRequest
*/
func (a *ProcessesDataAPIService) ProcessesDataProcessesDatumIdDelete(ctx context.Context, processesDatumId int64) ApiProcessesDataProcessesDatumIdDeleteRequest {
	return ApiProcessesDataProcessesDatumIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		processesDatumId: processesDatumId,
	}
}

// Execute executes the request
//  @return ProcessesData
func (a *ProcessesDataAPIService) ProcessesDataProcessesDatumIdDeleteExecute(r ApiProcessesDataProcessesDatumIdDeleteRequest) (*ProcessesData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProcessesData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesDataAPIService.ProcessesDataProcessesDatumIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/processes_data/{processes_datum_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"processes_datum_id"+"}", url.PathEscape(parameterValueToString(r.processesDatumId, "processesDatumId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProcessesDataProcessesDatumIdGetRequest struct {
	ctx context.Context
	ApiService *ProcessesDataAPIService
	processesDatumId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiProcessesDataProcessesDatumIdGetRequest) Include(include []string) ApiProcessesDataProcessesDatumIdGetRequest {
	r.include = &include
	return r
}

func (r ApiProcessesDataProcessesDatumIdGetRequest) Execute() (*ProcessesData, *http.Response, error) {
	return r.ApiService.ProcessesDataProcessesDatumIdGetExecute(r)
}

/*
ProcessesDataProcessesDatumIdGet Method for ProcessesDataProcessesDatumIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param processesDatumId Model id
 @return ApiProcessesDataProcessesDatumIdGetRequest
*/
func (a *ProcessesDataAPIService) ProcessesDataProcessesDatumIdGet(ctx context.Context, processesDatumId int64) ApiProcessesDataProcessesDatumIdGetRequest {
	return ApiProcessesDataProcessesDatumIdGetRequest{
		ApiService: a,
		ctx: ctx,
		processesDatumId: processesDatumId,
	}
}

// Execute executes the request
//  @return ProcessesData
func (a *ProcessesDataAPIService) ProcessesDataProcessesDatumIdGetExecute(r ApiProcessesDataProcessesDatumIdGetRequest) (*ProcessesData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProcessesData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesDataAPIService.ProcessesDataProcessesDatumIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/processes_data/{processes_datum_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"processes_datum_id"+"}", url.PathEscape(parameterValueToString(r.processesDatumId, "processesDatumId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProcessesDataProcessesDatumIdPutRequest struct {
	ctx context.Context
	ApiService *ProcessesDataAPIService
	processesDatumId int64
	processesDataPut *ProcessesDataPut
}

func (r ApiProcessesDataProcessesDatumIdPutRequest) ProcessesDataPut(processesDataPut ProcessesDataPut) ApiProcessesDataProcessesDatumIdPutRequest {
	r.processesDataPut = &processesDataPut
	return r
}

func (r ApiProcessesDataProcessesDatumIdPutRequest) Execute() (*ProcessesData, *http.Response, error) {
	return r.ApiService.ProcessesDataProcessesDatumIdPutExecute(r)
}

/*
ProcessesDataProcessesDatumIdPut Method for ProcessesDataProcessesDatumIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param processesDatumId Model id
 @return ApiProcessesDataProcessesDatumIdPutRequest
*/
func (a *ProcessesDataAPIService) ProcessesDataProcessesDatumIdPut(ctx context.Context, processesDatumId int64) ApiProcessesDataProcessesDatumIdPutRequest {
	return ApiProcessesDataProcessesDatumIdPutRequest{
		ApiService: a,
		ctx: ctx,
		processesDatumId: processesDatumId,
	}
}

// Execute executes the request
//  @return ProcessesData
func (a *ProcessesDataAPIService) ProcessesDataProcessesDatumIdPutExecute(r ApiProcessesDataProcessesDatumIdPutRequest) (*ProcessesData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProcessesData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesDataAPIService.ProcessesDataProcessesDatumIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/processes_data/{processes_datum_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"processes_datum_id"+"}", url.PathEscape(parameterValueToString(r.processesDatumId, "processesDatumId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.processesDataPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
