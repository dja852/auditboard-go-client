/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the EmailLogs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailLogs{}

// EmailLogs struct for EmailLogs
type EmailLogs struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	ToUserId *int32 `json:"to_user_id,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	FromUserId *int32 `json:"from_user_id,omitempty"`
	IntendedRecipient *string `json:"intended_recipient,omitempty"`
	ActualRecipient *string `json:"actual_recipient,omitempty"`
	EmailType *string `json:"email_type,omitempty"`
	EmailCategory *string `json:"email_category,omitempty"`
	Status *string `json:"status,omitempty"`
	Reason *string `json:"reason,omitempty"`
	ReasonType *string `json:"reason_type,omitempty"`
	EmailBody *string `json:"email_body,omitempty"`
	EmailHeaders interface{} `json:"email_headers,omitempty"`
	EmailSubject *string `json:"email_subject,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	// Note: This is a Foreign Key to `ops_audit_items.id`.<fk table='ops_audit_items' column='id'/>
	OpsAuditItemId *int32 `json:"ops_audit_item_id,omitempty"`
	// Note: This is a Foreign Key to `task_items.id`.<fk table='task_items' column='id'/>
	TaskItemId *int32 `json:"task_item_id,omitempty"`
	// Note: This is a Foreign Key to `issues.id`.<fk table='issues' column='id'/>
	IssueId *int32 `json:"issue_id,omitempty"`
	// Note: This is a Foreign Key to `comments.id`.<fk table='comments' column='id'/>
	CommentId *int32 `json:"comment_id,omitempty"`
	// Note: This is a Foreign Key to `tests.id`.<fk table='tests' column='id'/>
	TestId *int32 `json:"test_id,omitempty"`
	// Note: This is a Foreign Key to `controls_data.id`.<fk table='controls_data' column='id'/>
	ControlsDatumId *int32 `json:"controls_datum_id,omitempty"`
	// Note: This is a Foreign Key to `action_plans.id`.<fk table='action_plans' column='id'/>
	ActionPlanId *int32 `json:"action_plan_id,omitempty"`
}

// NewEmailLogs instantiates a new EmailLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailLogs() *EmailLogs {
	this := EmailLogs{}
	return &this
}

// NewEmailLogsWithDefaults instantiates a new EmailLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailLogsWithDefaults() *EmailLogs {
	this := EmailLogs{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmailLogs) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmailLogs) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *EmailLogs) SetId(v int32) {
	o.Id = &v
}

// GetToUserId returns the ToUserId field value if set, zero value otherwise.
func (o *EmailLogs) GetToUserId() int32 {
	if o == nil || IsNil(o.ToUserId) {
		var ret int32
		return ret
	}
	return *o.ToUserId
}

// GetToUserIdOk returns a tuple with the ToUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetToUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ToUserId) {
		return nil, false
	}
	return o.ToUserId, true
}

// HasToUserId returns a boolean if a field has been set.
func (o *EmailLogs) HasToUserId() bool {
	if o != nil && !IsNil(o.ToUserId) {
		return true
	}

	return false
}

// SetToUserId gets a reference to the given int32 and assigns it to the ToUserId field.
func (o *EmailLogs) SetToUserId(v int32) {
	o.ToUserId = &v
}

// GetFromUserId returns the FromUserId field value if set, zero value otherwise.
func (o *EmailLogs) GetFromUserId() int32 {
	if o == nil || IsNil(o.FromUserId) {
		var ret int32
		return ret
	}
	return *o.FromUserId
}

// GetFromUserIdOk returns a tuple with the FromUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetFromUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FromUserId) {
		return nil, false
	}
	return o.FromUserId, true
}

// HasFromUserId returns a boolean if a field has been set.
func (o *EmailLogs) HasFromUserId() bool {
	if o != nil && !IsNil(o.FromUserId) {
		return true
	}

	return false
}

// SetFromUserId gets a reference to the given int32 and assigns it to the FromUserId field.
func (o *EmailLogs) SetFromUserId(v int32) {
	o.FromUserId = &v
}

// GetIntendedRecipient returns the IntendedRecipient field value if set, zero value otherwise.
func (o *EmailLogs) GetIntendedRecipient() string {
	if o == nil || IsNil(o.IntendedRecipient) {
		var ret string
		return ret
	}
	return *o.IntendedRecipient
}

// GetIntendedRecipientOk returns a tuple with the IntendedRecipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetIntendedRecipientOk() (*string, bool) {
	if o == nil || IsNil(o.IntendedRecipient) {
		return nil, false
	}
	return o.IntendedRecipient, true
}

// HasIntendedRecipient returns a boolean if a field has been set.
func (o *EmailLogs) HasIntendedRecipient() bool {
	if o != nil && !IsNil(o.IntendedRecipient) {
		return true
	}

	return false
}

// SetIntendedRecipient gets a reference to the given string and assigns it to the IntendedRecipient field.
func (o *EmailLogs) SetIntendedRecipient(v string) {
	o.IntendedRecipient = &v
}

// GetActualRecipient returns the ActualRecipient field value if set, zero value otherwise.
func (o *EmailLogs) GetActualRecipient() string {
	if o == nil || IsNil(o.ActualRecipient) {
		var ret string
		return ret
	}
	return *o.ActualRecipient
}

// GetActualRecipientOk returns a tuple with the ActualRecipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetActualRecipientOk() (*string, bool) {
	if o == nil || IsNil(o.ActualRecipient) {
		return nil, false
	}
	return o.ActualRecipient, true
}

// HasActualRecipient returns a boolean if a field has been set.
func (o *EmailLogs) HasActualRecipient() bool {
	if o != nil && !IsNil(o.ActualRecipient) {
		return true
	}

	return false
}

// SetActualRecipient gets a reference to the given string and assigns it to the ActualRecipient field.
func (o *EmailLogs) SetActualRecipient(v string) {
	o.ActualRecipient = &v
}

// GetEmailType returns the EmailType field value if set, zero value otherwise.
func (o *EmailLogs) GetEmailType() string {
	if o == nil || IsNil(o.EmailType) {
		var ret string
		return ret
	}
	return *o.EmailType
}

// GetEmailTypeOk returns a tuple with the EmailType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetEmailTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EmailType) {
		return nil, false
	}
	return o.EmailType, true
}

// HasEmailType returns a boolean if a field has been set.
func (o *EmailLogs) HasEmailType() bool {
	if o != nil && !IsNil(o.EmailType) {
		return true
	}

	return false
}

// SetEmailType gets a reference to the given string and assigns it to the EmailType field.
func (o *EmailLogs) SetEmailType(v string) {
	o.EmailType = &v
}

// GetEmailCategory returns the EmailCategory field value if set, zero value otherwise.
func (o *EmailLogs) GetEmailCategory() string {
	if o == nil || IsNil(o.EmailCategory) {
		var ret string
		return ret
	}
	return *o.EmailCategory
}

// GetEmailCategoryOk returns a tuple with the EmailCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetEmailCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.EmailCategory) {
		return nil, false
	}
	return o.EmailCategory, true
}

// HasEmailCategory returns a boolean if a field has been set.
func (o *EmailLogs) HasEmailCategory() bool {
	if o != nil && !IsNil(o.EmailCategory) {
		return true
	}

	return false
}

// SetEmailCategory gets a reference to the given string and assigns it to the EmailCategory field.
func (o *EmailLogs) SetEmailCategory(v string) {
	o.EmailCategory = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EmailLogs) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EmailLogs) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EmailLogs) SetStatus(v string) {
	o.Status = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *EmailLogs) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *EmailLogs) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *EmailLogs) SetReason(v string) {
	o.Reason = &v
}

// GetReasonType returns the ReasonType field value if set, zero value otherwise.
func (o *EmailLogs) GetReasonType() string {
	if o == nil || IsNil(o.ReasonType) {
		var ret string
		return ret
	}
	return *o.ReasonType
}

// GetReasonTypeOk returns a tuple with the ReasonType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetReasonTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonType) {
		return nil, false
	}
	return o.ReasonType, true
}

// HasReasonType returns a boolean if a field has been set.
func (o *EmailLogs) HasReasonType() bool {
	if o != nil && !IsNil(o.ReasonType) {
		return true
	}

	return false
}

// SetReasonType gets a reference to the given string and assigns it to the ReasonType field.
func (o *EmailLogs) SetReasonType(v string) {
	o.ReasonType = &v
}

// GetEmailBody returns the EmailBody field value if set, zero value otherwise.
func (o *EmailLogs) GetEmailBody() string {
	if o == nil || IsNil(o.EmailBody) {
		var ret string
		return ret
	}
	return *o.EmailBody
}

// GetEmailBodyOk returns a tuple with the EmailBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetEmailBodyOk() (*string, bool) {
	if o == nil || IsNil(o.EmailBody) {
		return nil, false
	}
	return o.EmailBody, true
}

// HasEmailBody returns a boolean if a field has been set.
func (o *EmailLogs) HasEmailBody() bool {
	if o != nil && !IsNil(o.EmailBody) {
		return true
	}

	return false
}

// SetEmailBody gets a reference to the given string and assigns it to the EmailBody field.
func (o *EmailLogs) SetEmailBody(v string) {
	o.EmailBody = &v
}

// GetEmailHeaders returns the EmailHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailLogs) GetEmailHeaders() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EmailHeaders
}

// GetEmailHeadersOk returns a tuple with the EmailHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailLogs) GetEmailHeadersOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EmailHeaders) {
		return nil, false
	}
	return &o.EmailHeaders, true
}

// HasEmailHeaders returns a boolean if a field has been set.
func (o *EmailLogs) HasEmailHeaders() bool {
	if o != nil && !IsNil(o.EmailHeaders) {
		return true
	}

	return false
}

// SetEmailHeaders gets a reference to the given interface{} and assigns it to the EmailHeaders field.
func (o *EmailLogs) SetEmailHeaders(v interface{}) {
	o.EmailHeaders = v
}

// GetEmailSubject returns the EmailSubject field value if set, zero value otherwise.
func (o *EmailLogs) GetEmailSubject() string {
	if o == nil || IsNil(o.EmailSubject) {
		var ret string
		return ret
	}
	return *o.EmailSubject
}

// GetEmailSubjectOk returns a tuple with the EmailSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetEmailSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.EmailSubject) {
		return nil, false
	}
	return o.EmailSubject, true
}

// HasEmailSubject returns a boolean if a field has been set.
func (o *EmailLogs) HasEmailSubject() bool {
	if o != nil && !IsNil(o.EmailSubject) {
		return true
	}

	return false
}

// SetEmailSubject gets a reference to the given string and assigns it to the EmailSubject field.
func (o *EmailLogs) SetEmailSubject(v string) {
	o.EmailSubject = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *EmailLogs) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *EmailLogs) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *EmailLogs) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *EmailLogs) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *EmailLogs) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *EmailLogs) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *EmailLogs) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *EmailLogs) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *EmailLogs) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetOpsAuditItemId returns the OpsAuditItemId field value if set, zero value otherwise.
func (o *EmailLogs) GetOpsAuditItemId() int32 {
	if o == nil || IsNil(o.OpsAuditItemId) {
		var ret int32
		return ret
	}
	return *o.OpsAuditItemId
}

// GetOpsAuditItemIdOk returns a tuple with the OpsAuditItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetOpsAuditItemIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OpsAuditItemId) {
		return nil, false
	}
	return o.OpsAuditItemId, true
}

// HasOpsAuditItemId returns a boolean if a field has been set.
func (o *EmailLogs) HasOpsAuditItemId() bool {
	if o != nil && !IsNil(o.OpsAuditItemId) {
		return true
	}

	return false
}

// SetOpsAuditItemId gets a reference to the given int32 and assigns it to the OpsAuditItemId field.
func (o *EmailLogs) SetOpsAuditItemId(v int32) {
	o.OpsAuditItemId = &v
}

// GetTaskItemId returns the TaskItemId field value if set, zero value otherwise.
func (o *EmailLogs) GetTaskItemId() int32 {
	if o == nil || IsNil(o.TaskItemId) {
		var ret int32
		return ret
	}
	return *o.TaskItemId
}

// GetTaskItemIdOk returns a tuple with the TaskItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetTaskItemIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TaskItemId) {
		return nil, false
	}
	return o.TaskItemId, true
}

// HasTaskItemId returns a boolean if a field has been set.
func (o *EmailLogs) HasTaskItemId() bool {
	if o != nil && !IsNil(o.TaskItemId) {
		return true
	}

	return false
}

// SetTaskItemId gets a reference to the given int32 and assigns it to the TaskItemId field.
func (o *EmailLogs) SetTaskItemId(v int32) {
	o.TaskItemId = &v
}

// GetIssueId returns the IssueId field value if set, zero value otherwise.
func (o *EmailLogs) GetIssueId() int32 {
	if o == nil || IsNil(o.IssueId) {
		var ret int32
		return ret
	}
	return *o.IssueId
}

// GetIssueIdOk returns a tuple with the IssueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetIssueIdOk() (*int32, bool) {
	if o == nil || IsNil(o.IssueId) {
		return nil, false
	}
	return o.IssueId, true
}

// HasIssueId returns a boolean if a field has been set.
func (o *EmailLogs) HasIssueId() bool {
	if o != nil && !IsNil(o.IssueId) {
		return true
	}

	return false
}

// SetIssueId gets a reference to the given int32 and assigns it to the IssueId field.
func (o *EmailLogs) SetIssueId(v int32) {
	o.IssueId = &v
}

// GetCommentId returns the CommentId field value if set, zero value otherwise.
func (o *EmailLogs) GetCommentId() int32 {
	if o == nil || IsNil(o.CommentId) {
		var ret int32
		return ret
	}
	return *o.CommentId
}

// GetCommentIdOk returns a tuple with the CommentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetCommentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CommentId) {
		return nil, false
	}
	return o.CommentId, true
}

// HasCommentId returns a boolean if a field has been set.
func (o *EmailLogs) HasCommentId() bool {
	if o != nil && !IsNil(o.CommentId) {
		return true
	}

	return false
}

// SetCommentId gets a reference to the given int32 and assigns it to the CommentId field.
func (o *EmailLogs) SetCommentId(v int32) {
	o.CommentId = &v
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *EmailLogs) GetTestId() int32 {
	if o == nil || IsNil(o.TestId) {
		var ret int32
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetTestIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TestId) {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *EmailLogs) HasTestId() bool {
	if o != nil && !IsNil(o.TestId) {
		return true
	}

	return false
}

// SetTestId gets a reference to the given int32 and assigns it to the TestId field.
func (o *EmailLogs) SetTestId(v int32) {
	o.TestId = &v
}

// GetControlsDatumId returns the ControlsDatumId field value if set, zero value otherwise.
func (o *EmailLogs) GetControlsDatumId() int32 {
	if o == nil || IsNil(o.ControlsDatumId) {
		var ret int32
		return ret
	}
	return *o.ControlsDatumId
}

// GetControlsDatumIdOk returns a tuple with the ControlsDatumId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetControlsDatumIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ControlsDatumId) {
		return nil, false
	}
	return o.ControlsDatumId, true
}

// HasControlsDatumId returns a boolean if a field has been set.
func (o *EmailLogs) HasControlsDatumId() bool {
	if o != nil && !IsNil(o.ControlsDatumId) {
		return true
	}

	return false
}

// SetControlsDatumId gets a reference to the given int32 and assigns it to the ControlsDatumId field.
func (o *EmailLogs) SetControlsDatumId(v int32) {
	o.ControlsDatumId = &v
}

// GetActionPlanId returns the ActionPlanId field value if set, zero value otherwise.
func (o *EmailLogs) GetActionPlanId() int32 {
	if o == nil || IsNil(o.ActionPlanId) {
		var ret int32
		return ret
	}
	return *o.ActionPlanId
}

// GetActionPlanIdOk returns a tuple with the ActionPlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogs) GetActionPlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionPlanId) {
		return nil, false
	}
	return o.ActionPlanId, true
}

// HasActionPlanId returns a boolean if a field has been set.
func (o *EmailLogs) HasActionPlanId() bool {
	if o != nil && !IsNil(o.ActionPlanId) {
		return true
	}

	return false
}

// SetActionPlanId gets a reference to the given int32 and assigns it to the ActionPlanId field.
func (o *EmailLogs) SetActionPlanId(v int32) {
	o.ActionPlanId = &v
}

func (o EmailLogs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailLogs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ToUserId) {
		toSerialize["to_user_id"] = o.ToUserId
	}
	if !IsNil(o.FromUserId) {
		toSerialize["from_user_id"] = o.FromUserId
	}
	if !IsNil(o.IntendedRecipient) {
		toSerialize["intended_recipient"] = o.IntendedRecipient
	}
	if !IsNil(o.ActualRecipient) {
		toSerialize["actual_recipient"] = o.ActualRecipient
	}
	if !IsNil(o.EmailType) {
		toSerialize["email_type"] = o.EmailType
	}
	if !IsNil(o.EmailCategory) {
		toSerialize["email_category"] = o.EmailCategory
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.ReasonType) {
		toSerialize["reason_type"] = o.ReasonType
	}
	if !IsNil(o.EmailBody) {
		toSerialize["email_body"] = o.EmailBody
	}
	if o.EmailHeaders != nil {
		toSerialize["email_headers"] = o.EmailHeaders
	}
	if !IsNil(o.EmailSubject) {
		toSerialize["email_subject"] = o.EmailSubject
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.OpsAuditItemId) {
		toSerialize["ops_audit_item_id"] = o.OpsAuditItemId
	}
	if !IsNil(o.TaskItemId) {
		toSerialize["task_item_id"] = o.TaskItemId
	}
	if !IsNil(o.IssueId) {
		toSerialize["issue_id"] = o.IssueId
	}
	if !IsNil(o.CommentId) {
		toSerialize["comment_id"] = o.CommentId
	}
	if !IsNil(o.TestId) {
		toSerialize["test_id"] = o.TestId
	}
	if !IsNil(o.ControlsDatumId) {
		toSerialize["controls_datum_id"] = o.ControlsDatumId
	}
	if !IsNil(o.ActionPlanId) {
		toSerialize["action_plan_id"] = o.ActionPlanId
	}
	return toSerialize, nil
}

type NullableEmailLogs struct {
	value *EmailLogs
	isSet bool
}

func (v NullableEmailLogs) Get() *EmailLogs {
	return v.value
}

func (v *NullableEmailLogs) Set(val *EmailLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailLogs(val *EmailLogs) *NullableEmailLogs {
	return &NullableEmailLogs{value: val, isSet: true}
}

func (v NullableEmailLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


