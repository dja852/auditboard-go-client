/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EsgMetricsAPIService EsgMetricsAPI service
type EsgMetricsAPIService service

type ApiEsgMetricsEsgMetricIdDeleteRequest struct {
	ctx context.Context
	ApiService *EsgMetricsAPIService
	esgMetricId int64
}

func (r ApiEsgMetricsEsgMetricIdDeleteRequest) Execute() (*EsgMetrics, *http.Response, error) {
	return r.ApiService.EsgMetricsEsgMetricIdDeleteExecute(r)
}

/*
EsgMetricsEsgMetricIdDelete Method for EsgMetricsEsgMetricIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricId Model id
 @return ApiEsgMetricsEsgMetricIdDeleteRequest
*/
func (a *EsgMetricsAPIService) EsgMetricsEsgMetricIdDelete(ctx context.Context, esgMetricId int64) ApiEsgMetricsEsgMetricIdDeleteRequest {
	return ApiEsgMetricsEsgMetricIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricId: esgMetricId,
	}
}

// Execute executes the request
//  @return EsgMetrics
func (a *EsgMetricsAPIService) EsgMetricsEsgMetricIdDeleteExecute(r ApiEsgMetricsEsgMetricIdDeleteRequest) (*EsgMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricsAPIService.EsgMetricsEsgMetricIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metrics/{esg_metric_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricId, "esgMetricId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricsEsgMetricIdGetRequest struct {
	ctx context.Context
	ApiService *EsgMetricsAPIService
	esgMetricId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiEsgMetricsEsgMetricIdGetRequest) Include(include []string) ApiEsgMetricsEsgMetricIdGetRequest {
	r.include = &include
	return r
}

func (r ApiEsgMetricsEsgMetricIdGetRequest) Execute() (*EsgMetrics, *http.Response, error) {
	return r.ApiService.EsgMetricsEsgMetricIdGetExecute(r)
}

/*
EsgMetricsEsgMetricIdGet Method for EsgMetricsEsgMetricIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricId Model id
 @return ApiEsgMetricsEsgMetricIdGetRequest
*/
func (a *EsgMetricsAPIService) EsgMetricsEsgMetricIdGet(ctx context.Context, esgMetricId int64) ApiEsgMetricsEsgMetricIdGetRequest {
	return ApiEsgMetricsEsgMetricIdGetRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricId: esgMetricId,
	}
}

// Execute executes the request
//  @return EsgMetrics
func (a *EsgMetricsAPIService) EsgMetricsEsgMetricIdGetExecute(r ApiEsgMetricsEsgMetricIdGetRequest) (*EsgMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricsAPIService.EsgMetricsEsgMetricIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metrics/{esg_metric_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricId, "esgMetricId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricsEsgMetricIdPutRequest struct {
	ctx context.Context
	ApiService *EsgMetricsAPIService
	esgMetricId int64
	esgMetricsPut *EsgMetricsPut
}

func (r ApiEsgMetricsEsgMetricIdPutRequest) EsgMetricsPut(esgMetricsPut EsgMetricsPut) ApiEsgMetricsEsgMetricIdPutRequest {
	r.esgMetricsPut = &esgMetricsPut
	return r
}

func (r ApiEsgMetricsEsgMetricIdPutRequest) Execute() (*EsgMetrics, *http.Response, error) {
	return r.ApiService.EsgMetricsEsgMetricIdPutExecute(r)
}

/*
EsgMetricsEsgMetricIdPut Method for EsgMetricsEsgMetricIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricId Model id
 @return ApiEsgMetricsEsgMetricIdPutRequest
*/
func (a *EsgMetricsAPIService) EsgMetricsEsgMetricIdPut(ctx context.Context, esgMetricId int64) ApiEsgMetricsEsgMetricIdPutRequest {
	return ApiEsgMetricsEsgMetricIdPutRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricId: esgMetricId,
	}
}

// Execute executes the request
//  @return EsgMetrics
func (a *EsgMetricsAPIService) EsgMetricsEsgMetricIdPutExecute(r ApiEsgMetricsEsgMetricIdPutRequest) (*EsgMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricsAPIService.EsgMetricsEsgMetricIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metrics/{esg_metric_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricId, "esgMetricId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esgMetricsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricsGetRequest struct {
	ctx context.Context
	ApiService *EsgMetricsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiEsgMetricsGetRequest) Include(include []string) ApiEsgMetricsGetRequest {
	r.include = &include
	return r
}

func (r ApiEsgMetricsGetRequest) Execute() (*EsgMetricsGet200Response, *http.Response, error) {
	return r.ApiService.EsgMetricsGetExecute(r)
}

/*
EsgMetricsGet Method for EsgMetricsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEsgMetricsGetRequest
*/
func (a *EsgMetricsAPIService) EsgMetricsGet(ctx context.Context) ApiEsgMetricsGetRequest {
	return ApiEsgMetricsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EsgMetricsGet200Response
func (a *EsgMetricsAPIService) EsgMetricsGetExecute(r ApiEsgMetricsGetRequest) (*EsgMetricsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricsAPIService.EsgMetricsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metrics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricsPostRequest struct {
	ctx context.Context
	ApiService *EsgMetricsAPIService
	esgMetricsPostRequest *EsgMetricsPostRequest
}

func (r ApiEsgMetricsPostRequest) EsgMetricsPostRequest(esgMetricsPostRequest EsgMetricsPostRequest) ApiEsgMetricsPostRequest {
	r.esgMetricsPostRequest = &esgMetricsPostRequest
	return r
}

func (r ApiEsgMetricsPostRequest) Execute() (*EsgMetricsGet200Response, *http.Response, error) {
	return r.ApiService.EsgMetricsPostExecute(r)
}

/*
EsgMetricsPost Method for EsgMetricsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEsgMetricsPostRequest
*/
func (a *EsgMetricsAPIService) EsgMetricsPost(ctx context.Context) ApiEsgMetricsPostRequest {
	return ApiEsgMetricsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EsgMetricsGet200Response
func (a *EsgMetricsAPIService) EsgMetricsPostExecute(r ApiEsgMetricsPostRequest) (*EsgMetricsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricsAPIService.EsgMetricsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metrics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esgMetricsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
