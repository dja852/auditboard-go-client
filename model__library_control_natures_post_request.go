/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the LibraryControlNaturesPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LibraryControlNaturesPostRequest{}

// LibraryControlNaturesPostRequest struct for LibraryControlNaturesPostRequest
type LibraryControlNaturesPostRequest struct {
	LibraryControlNature *LibraryControlNatures `json:"library_control _nature,omitempty"`
}

// NewLibraryControlNaturesPostRequest instantiates a new LibraryControlNaturesPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLibraryControlNaturesPostRequest() *LibraryControlNaturesPostRequest {
	this := LibraryControlNaturesPostRequest{}
	return &this
}

// NewLibraryControlNaturesPostRequestWithDefaults instantiates a new LibraryControlNaturesPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLibraryControlNaturesPostRequestWithDefaults() *LibraryControlNaturesPostRequest {
	this := LibraryControlNaturesPostRequest{}
	return &this
}

// GetLibraryControlNature returns the LibraryControlNature field value if set, zero value otherwise.
func (o *LibraryControlNaturesPostRequest) GetLibraryControlNature() LibraryControlNatures {
	if o == nil || IsNil(o.LibraryControlNature) {
		var ret LibraryControlNatures
		return ret
	}
	return *o.LibraryControlNature
}

// GetLibraryControlNatureOk returns a tuple with the LibraryControlNature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryControlNaturesPostRequest) GetLibraryControlNatureOk() (*LibraryControlNatures, bool) {
	if o == nil || IsNil(o.LibraryControlNature) {
		return nil, false
	}
	return o.LibraryControlNature, true
}

// HasLibraryControlNature returns a boolean if a field has been set.
func (o *LibraryControlNaturesPostRequest) HasLibraryControlNature() bool {
	if o != nil && !IsNil(o.LibraryControlNature) {
		return true
	}

	return false
}

// SetLibraryControlNature gets a reference to the given LibraryControlNatures and assigns it to the LibraryControlNature field.
func (o *LibraryControlNaturesPostRequest) SetLibraryControlNature(v LibraryControlNatures) {
	o.LibraryControlNature = &v
}

func (o LibraryControlNaturesPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LibraryControlNaturesPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LibraryControlNature) {
		toSerialize["library_control _nature"] = o.LibraryControlNature
	}
	return toSerialize, nil
}

type NullableLibraryControlNaturesPostRequest struct {
	value *LibraryControlNaturesPostRequest
	isSet bool
}

func (v NullableLibraryControlNaturesPostRequest) Get() *LibraryControlNaturesPostRequest {
	return v.value
}

func (v *NullableLibraryControlNaturesPostRequest) Set(val *LibraryControlNaturesPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLibraryControlNaturesPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLibraryControlNaturesPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLibraryControlNaturesPostRequest(val *LibraryControlNaturesPostRequest) *NullableLibraryControlNaturesPostRequest {
	return &NullableLibraryControlNaturesPostRequest{value: val, isSet: true}
}

func (v NullableLibraryControlNaturesPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLibraryControlNaturesPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


