/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the CommentsPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentsPostRequest{}

// CommentsPostRequest struct for CommentsPostRequest
type CommentsPostRequest struct {
	Comment *Comments `json:"comment,omitempty"`
}

// NewCommentsPostRequest instantiates a new CommentsPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentsPostRequest() *CommentsPostRequest {
	this := CommentsPostRequest{}
	return &this
}

// NewCommentsPostRequestWithDefaults instantiates a new CommentsPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentsPostRequestWithDefaults() *CommentsPostRequest {
	this := CommentsPostRequest{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *CommentsPostRequest) GetComment() Comments {
	if o == nil || IsNil(o.Comment) {
		var ret Comments
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPostRequest) GetCommentOk() (*Comments, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *CommentsPostRequest) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given Comments and assigns it to the Comment field.
func (o *CommentsPostRequest) SetComment(v Comments) {
	o.Comment = &v
}

func (o CommentsPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentsPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

type NullableCommentsPostRequest struct {
	value *CommentsPostRequest
	isSet bool
}

func (v NullableCommentsPostRequest) Get() *CommentsPostRequest {
	return v.value
}

func (v *NullableCommentsPostRequest) Set(val *CommentsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentsPostRequest(val *CommentsPostRequest) *NullableCommentsPostRequest {
	return &NullableCommentsPostRequest{value: val, isSet: true}
}

func (v NullableCommentsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


