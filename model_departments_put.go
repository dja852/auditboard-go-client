/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the DepartmentsPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DepartmentsPut{}

// DepartmentsPut struct for DepartmentsPut
type DepartmentsPut struct {
	Department *AssessmentPeriodsPutAssessmentPeriod `json:"department,omitempty"`
	PreviousValues *AssessmentPeriodsPutPreviousValues `json:"previous_values,omitempty"`
}

// NewDepartmentsPut instantiates a new DepartmentsPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepartmentsPut() *DepartmentsPut {
	this := DepartmentsPut{}
	return &this
}

// NewDepartmentsPutWithDefaults instantiates a new DepartmentsPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepartmentsPutWithDefaults() *DepartmentsPut {
	this := DepartmentsPut{}
	return &this
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *DepartmentsPut) GetDepartment() AssessmentPeriodsPutAssessmentPeriod {
	if o == nil || IsNil(o.Department) {
		var ret AssessmentPeriodsPutAssessmentPeriod
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepartmentsPut) GetDepartmentOk() (*AssessmentPeriodsPutAssessmentPeriod, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *DepartmentsPut) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given AssessmentPeriodsPutAssessmentPeriod and assigns it to the Department field.
func (o *DepartmentsPut) SetDepartment(v AssessmentPeriodsPutAssessmentPeriod) {
	o.Department = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *DepartmentsPut) GetPreviousValues() AssessmentPeriodsPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret AssessmentPeriodsPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepartmentsPut) GetPreviousValuesOk() (*AssessmentPeriodsPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *DepartmentsPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given AssessmentPeriodsPutPreviousValues and assigns it to the PreviousValues field.
func (o *DepartmentsPut) SetPreviousValues(v AssessmentPeriodsPutPreviousValues) {
	o.PreviousValues = &v
}

func (o DepartmentsPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepartmentsPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableDepartmentsPut struct {
	value *DepartmentsPut
	isSet bool
}

func (v NullableDepartmentsPut) Get() *DepartmentsPut {
	return v.value
}

func (v *NullableDepartmentsPut) Set(val *DepartmentsPut) {
	v.value = val
	v.isSet = true
}

func (v NullableDepartmentsPut) IsSet() bool {
	return v.isSet
}

func (v *NullableDepartmentsPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepartmentsPut(val *DepartmentsPut) *NullableDepartmentsPut {
	return &NullableDepartmentsPut{value: val, isSet: true}
}

func (v NullableDepartmentsPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepartmentsPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


