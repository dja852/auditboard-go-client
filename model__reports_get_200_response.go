/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the ReportsGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportsGet200Response{}

// ReportsGet200Response struct for ReportsGet200Response
type ReportsGet200Response struct {
	Reports []Reports `json:"reports,omitempty"`
}

// NewReportsGet200Response instantiates a new ReportsGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportsGet200Response() *ReportsGet200Response {
	this := ReportsGet200Response{}
	return &this
}

// NewReportsGet200ResponseWithDefaults instantiates a new ReportsGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportsGet200ResponseWithDefaults() *ReportsGet200Response {
	this := ReportsGet200Response{}
	return &this
}

// GetReports returns the Reports field value if set, zero value otherwise.
func (o *ReportsGet200Response) GetReports() []Reports {
	if o == nil || IsNil(o.Reports) {
		var ret []Reports
		return ret
	}
	return o.Reports
}

// GetReportsOk returns a tuple with the Reports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportsGet200Response) GetReportsOk() ([]Reports, bool) {
	if o == nil || IsNil(o.Reports) {
		return nil, false
	}
	return o.Reports, true
}

// HasReports returns a boolean if a field has been set.
func (o *ReportsGet200Response) HasReports() bool {
	if o != nil && !IsNil(o.Reports) {
		return true
	}

	return false
}

// SetReports gets a reference to the given []Reports and assigns it to the Reports field.
func (o *ReportsGet200Response) SetReports(v []Reports) {
	o.Reports = v
}

func (o ReportsGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportsGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reports) {
		toSerialize["reports"] = o.Reports
	}
	return toSerialize, nil
}

type NullableReportsGet200Response struct {
	value *ReportsGet200Response
	isSet bool
}

func (v NullableReportsGet200Response) Get() *ReportsGet200Response {
	return v.value
}

func (v *NullableReportsGet200Response) Set(val *ReportsGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableReportsGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableReportsGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportsGet200Response(val *ReportsGet200Response) *NullableReportsGet200Response {
	return &NullableReportsGet200Response{value: val, isSet: true}
}

func (v NullableReportsGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportsGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


