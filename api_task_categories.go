/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TaskCategoriesAPIService TaskCategoriesAPI service
type TaskCategoriesAPIService service

type ApiTaskCategoriesGetRequest struct {
	ctx context.Context
	ApiService *TaskCategoriesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiTaskCategoriesGetRequest) Include(include []string) ApiTaskCategoriesGetRequest {
	r.include = &include
	return r
}

func (r ApiTaskCategoriesGetRequest) Execute() (*TaskCategoriesGet200Response, *http.Response, error) {
	return r.ApiService.TaskCategoriesGetExecute(r)
}

/*
TaskCategoriesGet Method for TaskCategoriesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTaskCategoriesGetRequest
*/
func (a *TaskCategoriesAPIService) TaskCategoriesGet(ctx context.Context) ApiTaskCategoriesGetRequest {
	return ApiTaskCategoriesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TaskCategoriesGet200Response
func (a *TaskCategoriesAPIService) TaskCategoriesGetExecute(r ApiTaskCategoriesGetRequest) (*TaskCategoriesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskCategoriesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskCategoriesAPIService.TaskCategoriesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_categories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTaskCategoriesPostRequest struct {
	ctx context.Context
	ApiService *TaskCategoriesAPIService
	taskCategoriesPostRequest *TaskCategoriesPostRequest
}

func (r ApiTaskCategoriesPostRequest) TaskCategoriesPostRequest(taskCategoriesPostRequest TaskCategoriesPostRequest) ApiTaskCategoriesPostRequest {
	r.taskCategoriesPostRequest = &taskCategoriesPostRequest
	return r
}

func (r ApiTaskCategoriesPostRequest) Execute() (*TaskCategoriesGet200Response, *http.Response, error) {
	return r.ApiService.TaskCategoriesPostExecute(r)
}

/*
TaskCategoriesPost Method for TaskCategoriesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTaskCategoriesPostRequest
*/
func (a *TaskCategoriesAPIService) TaskCategoriesPost(ctx context.Context) ApiTaskCategoriesPostRequest {
	return ApiTaskCategoriesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TaskCategoriesGet200Response
func (a *TaskCategoriesAPIService) TaskCategoriesPostExecute(r ApiTaskCategoriesPostRequest) (*TaskCategoriesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskCategoriesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskCategoriesAPIService.TaskCategoriesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_categories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskCategoriesPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTaskCategoriesTaskCategoryIdDeleteRequest struct {
	ctx context.Context
	ApiService *TaskCategoriesAPIService
	taskCategoryId int64
}

func (r ApiTaskCategoriesTaskCategoryIdDeleteRequest) Execute() (*TaskCategories, *http.Response, error) {
	return r.ApiService.TaskCategoriesTaskCategoryIdDeleteExecute(r)
}

/*
TaskCategoriesTaskCategoryIdDelete Method for TaskCategoriesTaskCategoryIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskCategoryId Model id
 @return ApiTaskCategoriesTaskCategoryIdDeleteRequest
*/
func (a *TaskCategoriesAPIService) TaskCategoriesTaskCategoryIdDelete(ctx context.Context, taskCategoryId int64) ApiTaskCategoriesTaskCategoryIdDeleteRequest {
	return ApiTaskCategoriesTaskCategoryIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		taskCategoryId: taskCategoryId,
	}
}

// Execute executes the request
//  @return TaskCategories
func (a *TaskCategoriesAPIService) TaskCategoriesTaskCategoryIdDeleteExecute(r ApiTaskCategoriesTaskCategoryIdDeleteRequest) (*TaskCategories, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskCategories
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskCategoriesAPIService.TaskCategoriesTaskCategoryIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_categories/{task_category_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_category_id"+"}", url.PathEscape(parameterValueToString(r.taskCategoryId, "taskCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTaskCategoriesTaskCategoryIdGetRequest struct {
	ctx context.Context
	ApiService *TaskCategoriesAPIService
	taskCategoryId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiTaskCategoriesTaskCategoryIdGetRequest) Include(include []string) ApiTaskCategoriesTaskCategoryIdGetRequest {
	r.include = &include
	return r
}

func (r ApiTaskCategoriesTaskCategoryIdGetRequest) Execute() (*TaskCategories, *http.Response, error) {
	return r.ApiService.TaskCategoriesTaskCategoryIdGetExecute(r)
}

/*
TaskCategoriesTaskCategoryIdGet Method for TaskCategoriesTaskCategoryIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskCategoryId Model id
 @return ApiTaskCategoriesTaskCategoryIdGetRequest
*/
func (a *TaskCategoriesAPIService) TaskCategoriesTaskCategoryIdGet(ctx context.Context, taskCategoryId int64) ApiTaskCategoriesTaskCategoryIdGetRequest {
	return ApiTaskCategoriesTaskCategoryIdGetRequest{
		ApiService: a,
		ctx: ctx,
		taskCategoryId: taskCategoryId,
	}
}

// Execute executes the request
//  @return TaskCategories
func (a *TaskCategoriesAPIService) TaskCategoriesTaskCategoryIdGetExecute(r ApiTaskCategoriesTaskCategoryIdGetRequest) (*TaskCategories, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskCategories
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskCategoriesAPIService.TaskCategoriesTaskCategoryIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_categories/{task_category_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_category_id"+"}", url.PathEscape(parameterValueToString(r.taskCategoryId, "taskCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTaskCategoriesTaskCategoryIdPutRequest struct {
	ctx context.Context
	ApiService *TaskCategoriesAPIService
	taskCategoryId int64
	taskCategoriesPut *TaskCategoriesPut
}

func (r ApiTaskCategoriesTaskCategoryIdPutRequest) TaskCategoriesPut(taskCategoriesPut TaskCategoriesPut) ApiTaskCategoriesTaskCategoryIdPutRequest {
	r.taskCategoriesPut = &taskCategoriesPut
	return r
}

func (r ApiTaskCategoriesTaskCategoryIdPutRequest) Execute() (*TaskCategories, *http.Response, error) {
	return r.ApiService.TaskCategoriesTaskCategoryIdPutExecute(r)
}

/*
TaskCategoriesTaskCategoryIdPut Method for TaskCategoriesTaskCategoryIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskCategoryId Model id
 @return ApiTaskCategoriesTaskCategoryIdPutRequest
*/
func (a *TaskCategoriesAPIService) TaskCategoriesTaskCategoryIdPut(ctx context.Context, taskCategoryId int64) ApiTaskCategoriesTaskCategoryIdPutRequest {
	return ApiTaskCategoriesTaskCategoryIdPutRequest{
		ApiService: a,
		ctx: ctx,
		taskCategoryId: taskCategoryId,
	}
}

// Execute executes the request
//  @return TaskCategories
func (a *TaskCategoriesAPIService) TaskCategoriesTaskCategoryIdPutExecute(r ApiTaskCategoriesTaskCategoryIdPutRequest) (*TaskCategories, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskCategories
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskCategoriesAPIService.TaskCategoriesTaskCategoryIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_categories/{task_category_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_category_id"+"}", url.PathEscape(parameterValueToString(r.taskCategoryId, "taskCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskCategoriesPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
