/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AuditDivisionsAPIService AuditDivisionsAPI service
type AuditDivisionsAPIService service

type ApiAuditDivisionsAuditDivisionIdDeleteRequest struct {
	ctx context.Context
	ApiService *AuditDivisionsAPIService
	auditDivisionId int64
}

func (r ApiAuditDivisionsAuditDivisionIdDeleteRequest) Execute() (*AuditDivisions, *http.Response, error) {
	return r.ApiService.AuditDivisionsAuditDivisionIdDeleteExecute(r)
}

/*
AuditDivisionsAuditDivisionIdDelete Method for AuditDivisionsAuditDivisionIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditDivisionId Model id
 @return ApiAuditDivisionsAuditDivisionIdDeleteRequest
*/
func (a *AuditDivisionsAPIService) AuditDivisionsAuditDivisionIdDelete(ctx context.Context, auditDivisionId int64) ApiAuditDivisionsAuditDivisionIdDeleteRequest {
	return ApiAuditDivisionsAuditDivisionIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		auditDivisionId: auditDivisionId,
	}
}

// Execute executes the request
//  @return AuditDivisions
func (a *AuditDivisionsAPIService) AuditDivisionsAuditDivisionIdDeleteExecute(r ApiAuditDivisionsAuditDivisionIdDeleteRequest) (*AuditDivisions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditDivisions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditDivisionsAPIService.AuditDivisionsAuditDivisionIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_divisions/{audit_division_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_division_id"+"}", url.PathEscape(parameterValueToString(r.auditDivisionId, "auditDivisionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditDivisionsAuditDivisionIdGetRequest struct {
	ctx context.Context
	ApiService *AuditDivisionsAPIService
	auditDivisionId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditDivisionsAuditDivisionIdGetRequest) Include(include []string) ApiAuditDivisionsAuditDivisionIdGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditDivisionsAuditDivisionIdGetRequest) Execute() (*AuditDivisions, *http.Response, error) {
	return r.ApiService.AuditDivisionsAuditDivisionIdGetExecute(r)
}

/*
AuditDivisionsAuditDivisionIdGet Method for AuditDivisionsAuditDivisionIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditDivisionId Model id
 @return ApiAuditDivisionsAuditDivisionIdGetRequest
*/
func (a *AuditDivisionsAPIService) AuditDivisionsAuditDivisionIdGet(ctx context.Context, auditDivisionId int64) ApiAuditDivisionsAuditDivisionIdGetRequest {
	return ApiAuditDivisionsAuditDivisionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		auditDivisionId: auditDivisionId,
	}
}

// Execute executes the request
//  @return AuditDivisions
func (a *AuditDivisionsAPIService) AuditDivisionsAuditDivisionIdGetExecute(r ApiAuditDivisionsAuditDivisionIdGetRequest) (*AuditDivisions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditDivisions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditDivisionsAPIService.AuditDivisionsAuditDivisionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_divisions/{audit_division_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_division_id"+"}", url.PathEscape(parameterValueToString(r.auditDivisionId, "auditDivisionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditDivisionsAuditDivisionIdPutRequest struct {
	ctx context.Context
	ApiService *AuditDivisionsAPIService
	auditDivisionId int64
	auditDivisionsPut *AuditDivisionsPut
}

func (r ApiAuditDivisionsAuditDivisionIdPutRequest) AuditDivisionsPut(auditDivisionsPut AuditDivisionsPut) ApiAuditDivisionsAuditDivisionIdPutRequest {
	r.auditDivisionsPut = &auditDivisionsPut
	return r
}

func (r ApiAuditDivisionsAuditDivisionIdPutRequest) Execute() (*AuditDivisions, *http.Response, error) {
	return r.ApiService.AuditDivisionsAuditDivisionIdPutExecute(r)
}

/*
AuditDivisionsAuditDivisionIdPut Method for AuditDivisionsAuditDivisionIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditDivisionId Model id
 @return ApiAuditDivisionsAuditDivisionIdPutRequest
*/
func (a *AuditDivisionsAPIService) AuditDivisionsAuditDivisionIdPut(ctx context.Context, auditDivisionId int64) ApiAuditDivisionsAuditDivisionIdPutRequest {
	return ApiAuditDivisionsAuditDivisionIdPutRequest{
		ApiService: a,
		ctx: ctx,
		auditDivisionId: auditDivisionId,
	}
}

// Execute executes the request
//  @return AuditDivisions
func (a *AuditDivisionsAPIService) AuditDivisionsAuditDivisionIdPutExecute(r ApiAuditDivisionsAuditDivisionIdPutRequest) (*AuditDivisions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditDivisions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditDivisionsAPIService.AuditDivisionsAuditDivisionIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_divisions/{audit_division_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_division_id"+"}", url.PathEscape(parameterValueToString(r.auditDivisionId, "auditDivisionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditDivisionsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditDivisionsGetRequest struct {
	ctx context.Context
	ApiService *AuditDivisionsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditDivisionsGetRequest) Include(include []string) ApiAuditDivisionsGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditDivisionsGetRequest) Execute() (*AuditDivisionsGet200Response, *http.Response, error) {
	return r.ApiService.AuditDivisionsGetExecute(r)
}

/*
AuditDivisionsGet Method for AuditDivisionsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditDivisionsGetRequest
*/
func (a *AuditDivisionsAPIService) AuditDivisionsGet(ctx context.Context) ApiAuditDivisionsGetRequest {
	return ApiAuditDivisionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditDivisionsGet200Response
func (a *AuditDivisionsAPIService) AuditDivisionsGetExecute(r ApiAuditDivisionsGetRequest) (*AuditDivisionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditDivisionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditDivisionsAPIService.AuditDivisionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_divisions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditDivisionsPostRequest struct {
	ctx context.Context
	ApiService *AuditDivisionsAPIService
	auditDivisionsPostRequest *AuditDivisionsPostRequest
}

func (r ApiAuditDivisionsPostRequest) AuditDivisionsPostRequest(auditDivisionsPostRequest AuditDivisionsPostRequest) ApiAuditDivisionsPostRequest {
	r.auditDivisionsPostRequest = &auditDivisionsPostRequest
	return r
}

func (r ApiAuditDivisionsPostRequest) Execute() (*AuditDivisionsGet200Response, *http.Response, error) {
	return r.ApiService.AuditDivisionsPostExecute(r)
}

/*
AuditDivisionsPost Method for AuditDivisionsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditDivisionsPostRequest
*/
func (a *AuditDivisionsAPIService) AuditDivisionsPost(ctx context.Context) ApiAuditDivisionsPostRequest {
	return ApiAuditDivisionsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditDivisionsGet200Response
func (a *AuditDivisionsAPIService) AuditDivisionsPostExecute(r ApiAuditDivisionsPostRequest) (*AuditDivisionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditDivisionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditDivisionsAPIService.AuditDivisionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_divisions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditDivisionsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
