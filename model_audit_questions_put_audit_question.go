/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuditQuestionsPutAuditQuestion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditQuestionsPutAuditQuestion{}

// AuditQuestionsPutAuditQuestion struct for AuditQuestionsPutAuditQuestion
type AuditQuestionsPutAuditQuestion struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	Requirements interface{} `json:"requirements,omitempty"`
	Type string `json:"type"`
	QuestionData interface{} `json:"question_data"`
	Text string `json:"text"`
	Description *string `json:"description,omitempty"`
	SourceId *int32 `json:"source_id,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	CreatedByUserId *int32 `json:"created_by_user_id,omitempty"`
	ConditionChoiceUuid *string `json:"condition_choice_uuid,omitempty"`
	Uid *string `json:"uid,omitempty"`
	ChangeableType *string `json:"changeable_type,omitempty"`
	ManagedChangeField *string `json:"managed_change_field,omitempty"`
	ManagedChangeFieldType *string `json:"managed_change_field_type,omitempty"`
	QuestionOptions interface{} `json:"question_options"`
	AllowNaResponse bool `json:"allow_na_response"`
	AllowExplanation bool `json:"allow_explanation"`
	AllowFiles bool `json:"allow_files"`
	RequireFiles bool `json:"require_files"`
	QuestionUuid *string `json:"question_uuid,omitempty"`
	ConditionQuestionUuid *string `json:"condition_question_uuid,omitempty"`
	Condition interface{} `json:"condition,omitempty"`
	RequireNaExplanation *bool `json:"require_na_explanation,omitempty"`
}

type _AuditQuestionsPutAuditQuestion AuditQuestionsPutAuditQuestion

// NewAuditQuestionsPutAuditQuestion instantiates a new AuditQuestionsPutAuditQuestion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditQuestionsPutAuditQuestion(type_ string, questionData interface{}, text string, questionOptions interface{}, allowNaResponse bool, allowExplanation bool, allowFiles bool, requireFiles bool) *AuditQuestionsPutAuditQuestion {
	this := AuditQuestionsPutAuditQuestion{}
	this.Type = type_
	this.QuestionData = questionData
	this.Text = text
	this.QuestionOptions = questionOptions
	this.AllowNaResponse = allowNaResponse
	this.AllowExplanation = allowExplanation
	this.AllowFiles = allowFiles
	this.RequireFiles = requireFiles
	var requireNaExplanation bool = false
	this.RequireNaExplanation = &requireNaExplanation
	return &this
}

// NewAuditQuestionsPutAuditQuestionWithDefaults instantiates a new AuditQuestionsPutAuditQuestion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditQuestionsPutAuditQuestionWithDefaults() *AuditQuestionsPutAuditQuestion {
	this := AuditQuestionsPutAuditQuestion{}
	var allowNaResponse bool = false
	this.AllowNaResponse = allowNaResponse
	var allowExplanation bool = false
	this.AllowExplanation = allowExplanation
	var allowFiles bool = false
	this.AllowFiles = allowFiles
	var requireFiles bool = false
	this.RequireFiles = requireFiles
	var requireNaExplanation bool = false
	this.RequireNaExplanation = &requireNaExplanation
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AuditQuestionsPutAuditQuestion) SetId(v int32) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *AuditQuestionsPutAuditQuestion) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *AuditQuestionsPutAuditQuestion) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *AuditQuestionsPutAuditQuestion) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetRequirements returns the Requirements field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditQuestionsPutAuditQuestion) GetRequirements() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Requirements
}

// GetRequirementsOk returns a tuple with the Requirements field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditQuestionsPutAuditQuestion) GetRequirementsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Requirements) {
		return nil, false
	}
	return &o.Requirements, true
}

// HasRequirements returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasRequirements() bool {
	if o != nil && !IsNil(o.Requirements) {
		return true
	}

	return false
}

// SetRequirements gets a reference to the given interface{} and assigns it to the Requirements field.
func (o *AuditQuestionsPutAuditQuestion) SetRequirements(v interface{}) {
	o.Requirements = v
}

// GetType returns the Type field value
func (o *AuditQuestionsPutAuditQuestion) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AuditQuestionsPutAuditQuestion) SetType(v string) {
	o.Type = v
}

// GetQuestionData returns the QuestionData field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *AuditQuestionsPutAuditQuestion) GetQuestionData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.QuestionData
}

// GetQuestionDataOk returns a tuple with the QuestionData field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditQuestionsPutAuditQuestion) GetQuestionDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.QuestionData) {
		return nil, false
	}
	return &o.QuestionData, true
}

// SetQuestionData sets field value
func (o *AuditQuestionsPutAuditQuestion) SetQuestionData(v interface{}) {
	o.QuestionData = v
}

// GetText returns the Text field value
func (o *AuditQuestionsPutAuditQuestion) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *AuditQuestionsPutAuditQuestion) SetText(v string) {
	o.Text = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AuditQuestionsPutAuditQuestion) SetDescription(v string) {
	o.Description = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetSourceId() int32 {
	if o == nil || IsNil(o.SourceId) {
		var ret int32
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetSourceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given int32 and assigns it to the SourceId field.
func (o *AuditQuestionsPutAuditQuestion) SetSourceId(v int32) {
	o.SourceId = &v
}

// GetCreatedByUserId returns the CreatedByUserId field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetCreatedByUserId() int32 {
	if o == nil || IsNil(o.CreatedByUserId) {
		var ret int32
		return ret
	}
	return *o.CreatedByUserId
}

// GetCreatedByUserIdOk returns a tuple with the CreatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetCreatedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedByUserId) {
		return nil, false
	}
	return o.CreatedByUserId, true
}

// HasCreatedByUserId returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasCreatedByUserId() bool {
	if o != nil && !IsNil(o.CreatedByUserId) {
		return true
	}

	return false
}

// SetCreatedByUserId gets a reference to the given int32 and assigns it to the CreatedByUserId field.
func (o *AuditQuestionsPutAuditQuestion) SetCreatedByUserId(v int32) {
	o.CreatedByUserId = &v
}

// GetConditionChoiceUuid returns the ConditionChoiceUuid field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetConditionChoiceUuid() string {
	if o == nil || IsNil(o.ConditionChoiceUuid) {
		var ret string
		return ret
	}
	return *o.ConditionChoiceUuid
}

// GetConditionChoiceUuidOk returns a tuple with the ConditionChoiceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetConditionChoiceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.ConditionChoiceUuid) {
		return nil, false
	}
	return o.ConditionChoiceUuid, true
}

// HasConditionChoiceUuid returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasConditionChoiceUuid() bool {
	if o != nil && !IsNil(o.ConditionChoiceUuid) {
		return true
	}

	return false
}

// SetConditionChoiceUuid gets a reference to the given string and assigns it to the ConditionChoiceUuid field.
func (o *AuditQuestionsPutAuditQuestion) SetConditionChoiceUuid(v string) {
	o.ConditionChoiceUuid = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *AuditQuestionsPutAuditQuestion) SetUid(v string) {
	o.Uid = &v
}

// GetChangeableType returns the ChangeableType field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetChangeableType() string {
	if o == nil || IsNil(o.ChangeableType) {
		var ret string
		return ret
	}
	return *o.ChangeableType
}

// GetChangeableTypeOk returns a tuple with the ChangeableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetChangeableTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeableType) {
		return nil, false
	}
	return o.ChangeableType, true
}

// HasChangeableType returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasChangeableType() bool {
	if o != nil && !IsNil(o.ChangeableType) {
		return true
	}

	return false
}

// SetChangeableType gets a reference to the given string and assigns it to the ChangeableType field.
func (o *AuditQuestionsPutAuditQuestion) SetChangeableType(v string) {
	o.ChangeableType = &v
}

// GetManagedChangeField returns the ManagedChangeField field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetManagedChangeField() string {
	if o == nil || IsNil(o.ManagedChangeField) {
		var ret string
		return ret
	}
	return *o.ManagedChangeField
}

// GetManagedChangeFieldOk returns a tuple with the ManagedChangeField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetManagedChangeFieldOk() (*string, bool) {
	if o == nil || IsNil(o.ManagedChangeField) {
		return nil, false
	}
	return o.ManagedChangeField, true
}

// HasManagedChangeField returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasManagedChangeField() bool {
	if o != nil && !IsNil(o.ManagedChangeField) {
		return true
	}

	return false
}

// SetManagedChangeField gets a reference to the given string and assigns it to the ManagedChangeField field.
func (o *AuditQuestionsPutAuditQuestion) SetManagedChangeField(v string) {
	o.ManagedChangeField = &v
}

// GetManagedChangeFieldType returns the ManagedChangeFieldType field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetManagedChangeFieldType() string {
	if o == nil || IsNil(o.ManagedChangeFieldType) {
		var ret string
		return ret
	}
	return *o.ManagedChangeFieldType
}

// GetManagedChangeFieldTypeOk returns a tuple with the ManagedChangeFieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetManagedChangeFieldTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ManagedChangeFieldType) {
		return nil, false
	}
	return o.ManagedChangeFieldType, true
}

// HasManagedChangeFieldType returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasManagedChangeFieldType() bool {
	if o != nil && !IsNil(o.ManagedChangeFieldType) {
		return true
	}

	return false
}

// SetManagedChangeFieldType gets a reference to the given string and assigns it to the ManagedChangeFieldType field.
func (o *AuditQuestionsPutAuditQuestion) SetManagedChangeFieldType(v string) {
	o.ManagedChangeFieldType = &v
}

// GetQuestionOptions returns the QuestionOptions field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *AuditQuestionsPutAuditQuestion) GetQuestionOptions() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.QuestionOptions
}

// GetQuestionOptionsOk returns a tuple with the QuestionOptions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditQuestionsPutAuditQuestion) GetQuestionOptionsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.QuestionOptions) {
		return nil, false
	}
	return &o.QuestionOptions, true
}

// SetQuestionOptions sets field value
func (o *AuditQuestionsPutAuditQuestion) SetQuestionOptions(v interface{}) {
	o.QuestionOptions = v
}

// GetAllowNaResponse returns the AllowNaResponse field value
func (o *AuditQuestionsPutAuditQuestion) GetAllowNaResponse() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowNaResponse
}

// GetAllowNaResponseOk returns a tuple with the AllowNaResponse field value
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetAllowNaResponseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowNaResponse, true
}

// SetAllowNaResponse sets field value
func (o *AuditQuestionsPutAuditQuestion) SetAllowNaResponse(v bool) {
	o.AllowNaResponse = v
}

// GetAllowExplanation returns the AllowExplanation field value
func (o *AuditQuestionsPutAuditQuestion) GetAllowExplanation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowExplanation
}

// GetAllowExplanationOk returns a tuple with the AllowExplanation field value
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetAllowExplanationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowExplanation, true
}

// SetAllowExplanation sets field value
func (o *AuditQuestionsPutAuditQuestion) SetAllowExplanation(v bool) {
	o.AllowExplanation = v
}

// GetAllowFiles returns the AllowFiles field value
func (o *AuditQuestionsPutAuditQuestion) GetAllowFiles() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowFiles
}

// GetAllowFilesOk returns a tuple with the AllowFiles field value
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetAllowFilesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowFiles, true
}

// SetAllowFiles sets field value
func (o *AuditQuestionsPutAuditQuestion) SetAllowFiles(v bool) {
	o.AllowFiles = v
}

// GetRequireFiles returns the RequireFiles field value
func (o *AuditQuestionsPutAuditQuestion) GetRequireFiles() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RequireFiles
}

// GetRequireFilesOk returns a tuple with the RequireFiles field value
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetRequireFilesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequireFiles, true
}

// SetRequireFiles sets field value
func (o *AuditQuestionsPutAuditQuestion) SetRequireFiles(v bool) {
	o.RequireFiles = v
}

// GetQuestionUuid returns the QuestionUuid field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetQuestionUuid() string {
	if o == nil || IsNil(o.QuestionUuid) {
		var ret string
		return ret
	}
	return *o.QuestionUuid
}

// GetQuestionUuidOk returns a tuple with the QuestionUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetQuestionUuidOk() (*string, bool) {
	if o == nil || IsNil(o.QuestionUuid) {
		return nil, false
	}
	return o.QuestionUuid, true
}

// HasQuestionUuid returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasQuestionUuid() bool {
	if o != nil && !IsNil(o.QuestionUuid) {
		return true
	}

	return false
}

// SetQuestionUuid gets a reference to the given string and assigns it to the QuestionUuid field.
func (o *AuditQuestionsPutAuditQuestion) SetQuestionUuid(v string) {
	o.QuestionUuid = &v
}

// GetConditionQuestionUuid returns the ConditionQuestionUuid field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetConditionQuestionUuid() string {
	if o == nil || IsNil(o.ConditionQuestionUuid) {
		var ret string
		return ret
	}
	return *o.ConditionQuestionUuid
}

// GetConditionQuestionUuidOk returns a tuple with the ConditionQuestionUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetConditionQuestionUuidOk() (*string, bool) {
	if o == nil || IsNil(o.ConditionQuestionUuid) {
		return nil, false
	}
	return o.ConditionQuestionUuid, true
}

// HasConditionQuestionUuid returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasConditionQuestionUuid() bool {
	if o != nil && !IsNil(o.ConditionQuestionUuid) {
		return true
	}

	return false
}

// SetConditionQuestionUuid gets a reference to the given string and assigns it to the ConditionQuestionUuid field.
func (o *AuditQuestionsPutAuditQuestion) SetConditionQuestionUuid(v string) {
	o.ConditionQuestionUuid = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditQuestionsPutAuditQuestion) GetCondition() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditQuestionsPutAuditQuestion) GetConditionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return &o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given interface{} and assigns it to the Condition field.
func (o *AuditQuestionsPutAuditQuestion) SetCondition(v interface{}) {
	o.Condition = v
}

// GetRequireNaExplanation returns the RequireNaExplanation field value if set, zero value otherwise.
func (o *AuditQuestionsPutAuditQuestion) GetRequireNaExplanation() bool {
	if o == nil || IsNil(o.RequireNaExplanation) {
		var ret bool
		return ret
	}
	return *o.RequireNaExplanation
}

// GetRequireNaExplanationOk returns a tuple with the RequireNaExplanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditQuestionsPutAuditQuestion) GetRequireNaExplanationOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireNaExplanation) {
		return nil, false
	}
	return o.RequireNaExplanation, true
}

// HasRequireNaExplanation returns a boolean if a field has been set.
func (o *AuditQuestionsPutAuditQuestion) HasRequireNaExplanation() bool {
	if o != nil && !IsNil(o.RequireNaExplanation) {
		return true
	}

	return false
}

// SetRequireNaExplanation gets a reference to the given bool and assigns it to the RequireNaExplanation field.
func (o *AuditQuestionsPutAuditQuestion) SetRequireNaExplanation(v bool) {
	o.RequireNaExplanation = &v
}

func (o AuditQuestionsPutAuditQuestion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditQuestionsPutAuditQuestion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if o.Requirements != nil {
		toSerialize["requirements"] = o.Requirements
	}
	toSerialize["type"] = o.Type
	if o.QuestionData != nil {
		toSerialize["question_data"] = o.QuestionData
	}
	toSerialize["text"] = o.Text
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.SourceId) {
		toSerialize["source_id"] = o.SourceId
	}
	if !IsNil(o.CreatedByUserId) {
		toSerialize["created_by_user_id"] = o.CreatedByUserId
	}
	if !IsNil(o.ConditionChoiceUuid) {
		toSerialize["condition_choice_uuid"] = o.ConditionChoiceUuid
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !IsNil(o.ChangeableType) {
		toSerialize["changeable_type"] = o.ChangeableType
	}
	if !IsNil(o.ManagedChangeField) {
		toSerialize["managed_change_field"] = o.ManagedChangeField
	}
	if !IsNil(o.ManagedChangeFieldType) {
		toSerialize["managed_change_field_type"] = o.ManagedChangeFieldType
	}
	if o.QuestionOptions != nil {
		toSerialize["question_options"] = o.QuestionOptions
	}
	toSerialize["allow_na_response"] = o.AllowNaResponse
	toSerialize["allow_explanation"] = o.AllowExplanation
	toSerialize["allow_files"] = o.AllowFiles
	toSerialize["require_files"] = o.RequireFiles
	if !IsNil(o.QuestionUuid) {
		toSerialize["question_uuid"] = o.QuestionUuid
	}
	if !IsNil(o.ConditionQuestionUuid) {
		toSerialize["condition_question_uuid"] = o.ConditionQuestionUuid
	}
	if o.Condition != nil {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.RequireNaExplanation) {
		toSerialize["require_na_explanation"] = o.RequireNaExplanation
	}
	return toSerialize, nil
}

func (o *AuditQuestionsPutAuditQuestion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"question_data",
		"text",
		"question_options",
		"allow_na_response",
		"allow_explanation",
		"allow_files",
		"require_files",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditQuestionsPutAuditQuestion := _AuditQuestionsPutAuditQuestion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuditQuestionsPutAuditQuestion)

	if err != nil {
		return err
	}

	*o = AuditQuestionsPutAuditQuestion(varAuditQuestionsPutAuditQuestion)

	return err
}

type NullableAuditQuestionsPutAuditQuestion struct {
	value *AuditQuestionsPutAuditQuestion
	isSet bool
}

func (v NullableAuditQuestionsPutAuditQuestion) Get() *AuditQuestionsPutAuditQuestion {
	return v.value
}

func (v *NullableAuditQuestionsPutAuditQuestion) Set(val *AuditQuestionsPutAuditQuestion) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditQuestionsPutAuditQuestion) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditQuestionsPutAuditQuestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditQuestionsPutAuditQuestion(val *AuditQuestionsPutAuditQuestion) *NullableAuditQuestionsPutAuditQuestion {
	return &NullableAuditQuestionsPutAuditQuestion{value: val, isSet: true}
}

func (v NullableAuditQuestionsPutAuditQuestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditQuestionsPutAuditQuestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


