/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the RcwProjectsPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RcwProjectsPut{}

// RcwProjectsPut struct for RcwProjectsPut
type RcwProjectsPut struct {
	RcwProject *RcwProjectsPutRcwProject `json:"rcw_project,omitempty"`
	PreviousValues *RcwProjectsPutPreviousValues `json:"previous_values,omitempty"`
}

// NewRcwProjectsPut instantiates a new RcwProjectsPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRcwProjectsPut() *RcwProjectsPut {
	this := RcwProjectsPut{}
	return &this
}

// NewRcwProjectsPutWithDefaults instantiates a new RcwProjectsPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRcwProjectsPutWithDefaults() *RcwProjectsPut {
	this := RcwProjectsPut{}
	return &this
}

// GetRcwProject returns the RcwProject field value if set, zero value otherwise.
func (o *RcwProjectsPut) GetRcwProject() RcwProjectsPutRcwProject {
	if o == nil || IsNil(o.RcwProject) {
		var ret RcwProjectsPutRcwProject
		return ret
	}
	return *o.RcwProject
}

// GetRcwProjectOk returns a tuple with the RcwProject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPut) GetRcwProjectOk() (*RcwProjectsPutRcwProject, bool) {
	if o == nil || IsNil(o.RcwProject) {
		return nil, false
	}
	return o.RcwProject, true
}

// HasRcwProject returns a boolean if a field has been set.
func (o *RcwProjectsPut) HasRcwProject() bool {
	if o != nil && !IsNil(o.RcwProject) {
		return true
	}

	return false
}

// SetRcwProject gets a reference to the given RcwProjectsPutRcwProject and assigns it to the RcwProject field.
func (o *RcwProjectsPut) SetRcwProject(v RcwProjectsPutRcwProject) {
	o.RcwProject = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *RcwProjectsPut) GetPreviousValues() RcwProjectsPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret RcwProjectsPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcwProjectsPut) GetPreviousValuesOk() (*RcwProjectsPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *RcwProjectsPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given RcwProjectsPutPreviousValues and assigns it to the PreviousValues field.
func (o *RcwProjectsPut) SetPreviousValues(v RcwProjectsPutPreviousValues) {
	o.PreviousValues = &v
}

func (o RcwProjectsPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RcwProjectsPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RcwProject) {
		toSerialize["rcw_project"] = o.RcwProject
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableRcwProjectsPut struct {
	value *RcwProjectsPut
	isSet bool
}

func (v NullableRcwProjectsPut) Get() *RcwProjectsPut {
	return v.value
}

func (v *NullableRcwProjectsPut) Set(val *RcwProjectsPut) {
	v.value = val
	v.isSet = true
}

func (v NullableRcwProjectsPut) IsSet() bool {
	return v.isSet
}

func (v *NullableRcwProjectsPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRcwProjectsPut(val *RcwProjectsPut) *NullableRcwProjectsPut {
	return &NullableRcwProjectsPut{value: val, isSet: true}
}

func (v NullableRcwProjectsPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRcwProjectsPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


