/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the ReportsPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportsPostRequest{}

// ReportsPostRequest struct for ReportsPostRequest
type ReportsPostRequest struct {
	Report *Reports `json:"report,omitempty"`
}

// NewReportsPostRequest instantiates a new ReportsPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportsPostRequest() *ReportsPostRequest {
	this := ReportsPostRequest{}
	return &this
}

// NewReportsPostRequestWithDefaults instantiates a new ReportsPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportsPostRequestWithDefaults() *ReportsPostRequest {
	this := ReportsPostRequest{}
	return &this
}

// GetReport returns the Report field value if set, zero value otherwise.
func (o *ReportsPostRequest) GetReport() Reports {
	if o == nil || IsNil(o.Report) {
		var ret Reports
		return ret
	}
	return *o.Report
}

// GetReportOk returns a tuple with the Report field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportsPostRequest) GetReportOk() (*Reports, bool) {
	if o == nil || IsNil(o.Report) {
		return nil, false
	}
	return o.Report, true
}

// HasReport returns a boolean if a field has been set.
func (o *ReportsPostRequest) HasReport() bool {
	if o != nil && !IsNil(o.Report) {
		return true
	}

	return false
}

// SetReport gets a reference to the given Reports and assigns it to the Report field.
func (o *ReportsPostRequest) SetReport(v Reports) {
	o.Report = &v
}

func (o ReportsPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportsPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Report) {
		toSerialize["report"] = o.Report
	}
	return toSerialize, nil
}

type NullableReportsPostRequest struct {
	value *ReportsPostRequest
	isSet bool
}

func (v NullableReportsPostRequest) Get() *ReportsPostRequest {
	return v.value
}

func (v *NullableReportsPostRequest) Set(val *ReportsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReportsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReportsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportsPostRequest(val *ReportsPostRequest) *NullableReportsPostRequest {
	return &NullableReportsPostRequest{value: val, isSet: true}
}

func (v NullableReportsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


