/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TaskGroupsAPIService TaskGroupsAPI service
type TaskGroupsAPIService service

type ApiTaskGroupsGetRequest struct {
	ctx context.Context
	ApiService *TaskGroupsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiTaskGroupsGetRequest) Include(include []string) ApiTaskGroupsGetRequest {
	r.include = &include
	return r
}

func (r ApiTaskGroupsGetRequest) Execute() (*TaskGroupsGet200Response, *http.Response, error) {
	return r.ApiService.TaskGroupsGetExecute(r)
}

/*
TaskGroupsGet Method for TaskGroupsGet

Used to view Projects in Workstream

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTaskGroupsGetRequest
*/
func (a *TaskGroupsAPIService) TaskGroupsGet(ctx context.Context) ApiTaskGroupsGetRequest {
	return ApiTaskGroupsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TaskGroupsGet200Response
func (a *TaskGroupsAPIService) TaskGroupsGetExecute(r ApiTaskGroupsGetRequest) (*TaskGroupsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskGroupsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskGroupsAPIService.TaskGroupsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTaskGroupsPostRequest struct {
	ctx context.Context
	ApiService *TaskGroupsAPIService
	taskGroupsPostRequest *TaskGroupsPostRequest
}

func (r ApiTaskGroupsPostRequest) TaskGroupsPostRequest(taskGroupsPostRequest TaskGroupsPostRequest) ApiTaskGroupsPostRequest {
	r.taskGroupsPostRequest = &taskGroupsPostRequest
	return r
}

func (r ApiTaskGroupsPostRequest) Execute() (*TaskGroupsGet200Response, *http.Response, error) {
	return r.ApiService.TaskGroupsPostExecute(r)
}

/*
TaskGroupsPost Method for TaskGroupsPost

Used to create Projects in Workstream

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTaskGroupsPostRequest
*/
func (a *TaskGroupsAPIService) TaskGroupsPost(ctx context.Context) ApiTaskGroupsPostRequest {
	return ApiTaskGroupsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TaskGroupsGet200Response
func (a *TaskGroupsAPIService) TaskGroupsPostExecute(r ApiTaskGroupsPostRequest) (*TaskGroupsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskGroupsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskGroupsAPIService.TaskGroupsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskGroupsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTaskGroupsTaskGroupIdBulkEnableItemsPutRequest struct {
	ctx context.Context
	ApiService *TaskGroupsAPIService
	taskGroupId int64
	taskGroupsTaskGroupIdBulkEnableItemsPutRequest *TaskGroupsTaskGroupIdBulkEnableItemsPutRequest
}

func (r ApiTaskGroupsTaskGroupIdBulkEnableItemsPutRequest) TaskGroupsTaskGroupIdBulkEnableItemsPutRequest(taskGroupsTaskGroupIdBulkEnableItemsPutRequest TaskGroupsTaskGroupIdBulkEnableItemsPutRequest) ApiTaskGroupsTaskGroupIdBulkEnableItemsPutRequest {
	r.taskGroupsTaskGroupIdBulkEnableItemsPutRequest = &taskGroupsTaskGroupIdBulkEnableItemsPutRequest
	return r
}

func (r ApiTaskGroupsTaskGroupIdBulkEnableItemsPutRequest) Execute() (*TaskGroupsGroupsBulkEnableItems, *http.Response, error) {
	return r.ApiService.TaskGroupsTaskGroupIdBulkEnableItemsPutExecute(r)
}

/*
TaskGroupsTaskGroupIdBulkEnableItemsPut Method for TaskGroupsTaskGroupIdBulkEnableItemsPut

Enables the task items for a task group in bulk. The taskItemIds field in the request body should contain the task item id's to be enabled in bulk.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskGroupId Task group id, aka Workstream project id
 @return ApiTaskGroupsTaskGroupIdBulkEnableItemsPutRequest
*/
func (a *TaskGroupsAPIService) TaskGroupsTaskGroupIdBulkEnableItemsPut(ctx context.Context, taskGroupId int64) ApiTaskGroupsTaskGroupIdBulkEnableItemsPutRequest {
	return ApiTaskGroupsTaskGroupIdBulkEnableItemsPutRequest{
		ApiService: a,
		ctx: ctx,
		taskGroupId: taskGroupId,
	}
}

// Execute executes the request
//  @return TaskGroupsGroupsBulkEnableItems
func (a *TaskGroupsAPIService) TaskGroupsTaskGroupIdBulkEnableItemsPutExecute(r ApiTaskGroupsTaskGroupIdBulkEnableItemsPutRequest) (*TaskGroupsGroupsBulkEnableItems, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskGroupsGroupsBulkEnableItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskGroupsAPIService.TaskGroupsTaskGroupIdBulkEnableItemsPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_groups/{task_group_id}/bulk_enable_items"
	localVarPath = strings.Replace(localVarPath, "{"+"task_group_id"+"}", url.PathEscape(parameterValueToString(r.taskGroupId, "taskGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskGroupsTaskGroupIdBulkEnableItemsPutRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTaskGroupsTaskGroupIdDeleteRequest struct {
	ctx context.Context
	ApiService *TaskGroupsAPIService
	taskGroupId int64
}

func (r ApiTaskGroupsTaskGroupIdDeleteRequest) Execute() (*TaskGroups, *http.Response, error) {
	return r.ApiService.TaskGroupsTaskGroupIdDeleteExecute(r)
}

/*
TaskGroupsTaskGroupIdDelete Method for TaskGroupsTaskGroupIdDelete

Used to delete Projects in Workstream

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskGroupId Model id
 @return ApiTaskGroupsTaskGroupIdDeleteRequest
*/
func (a *TaskGroupsAPIService) TaskGroupsTaskGroupIdDelete(ctx context.Context, taskGroupId int64) ApiTaskGroupsTaskGroupIdDeleteRequest {
	return ApiTaskGroupsTaskGroupIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		taskGroupId: taskGroupId,
	}
}

// Execute executes the request
//  @return TaskGroups
func (a *TaskGroupsAPIService) TaskGroupsTaskGroupIdDeleteExecute(r ApiTaskGroupsTaskGroupIdDeleteRequest) (*TaskGroups, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskGroups
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskGroupsAPIService.TaskGroupsTaskGroupIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_groups/{task_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_group_id"+"}", url.PathEscape(parameterValueToString(r.taskGroupId, "taskGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTaskGroupsTaskGroupIdGetRequest struct {
	ctx context.Context
	ApiService *TaskGroupsAPIService
	taskGroupId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiTaskGroupsTaskGroupIdGetRequest) Include(include []string) ApiTaskGroupsTaskGroupIdGetRequest {
	r.include = &include
	return r
}

func (r ApiTaskGroupsTaskGroupIdGetRequest) Execute() (*TaskGroups, *http.Response, error) {
	return r.ApiService.TaskGroupsTaskGroupIdGetExecute(r)
}

/*
TaskGroupsTaskGroupIdGet Method for TaskGroupsTaskGroupIdGet

Used to view Projects in Workstream

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskGroupId Model id
 @return ApiTaskGroupsTaskGroupIdGetRequest
*/
func (a *TaskGroupsAPIService) TaskGroupsTaskGroupIdGet(ctx context.Context, taskGroupId int64) ApiTaskGroupsTaskGroupIdGetRequest {
	return ApiTaskGroupsTaskGroupIdGetRequest{
		ApiService: a,
		ctx: ctx,
		taskGroupId: taskGroupId,
	}
}

// Execute executes the request
//  @return TaskGroups
func (a *TaskGroupsAPIService) TaskGroupsTaskGroupIdGetExecute(r ApiTaskGroupsTaskGroupIdGetRequest) (*TaskGroups, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskGroups
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskGroupsAPIService.TaskGroupsTaskGroupIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_groups/{task_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_group_id"+"}", url.PathEscape(parameterValueToString(r.taskGroupId, "taskGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTaskGroupsTaskGroupIdPutRequest struct {
	ctx context.Context
	ApiService *TaskGroupsAPIService
	taskGroupId int64
	taskGroupsPut *TaskGroupsPut
}

func (r ApiTaskGroupsTaskGroupIdPutRequest) TaskGroupsPut(taskGroupsPut TaskGroupsPut) ApiTaskGroupsTaskGroupIdPutRequest {
	r.taskGroupsPut = &taskGroupsPut
	return r
}

func (r ApiTaskGroupsTaskGroupIdPutRequest) Execute() (*TaskGroups, *http.Response, error) {
	return r.ApiService.TaskGroupsTaskGroupIdPutExecute(r)
}

/*
TaskGroupsTaskGroupIdPut Method for TaskGroupsTaskGroupIdPut

Used to edit Projects in Workstream

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskGroupId Model id
 @return ApiTaskGroupsTaskGroupIdPutRequest
*/
func (a *TaskGroupsAPIService) TaskGroupsTaskGroupIdPut(ctx context.Context, taskGroupId int64) ApiTaskGroupsTaskGroupIdPutRequest {
	return ApiTaskGroupsTaskGroupIdPutRequest{
		ApiService: a,
		ctx: ctx,
		taskGroupId: taskGroupId,
	}
}

// Execute executes the request
//  @return TaskGroups
func (a *TaskGroupsAPIService) TaskGroupsTaskGroupIdPutExecute(r ApiTaskGroupsTaskGroupIdPutRequest) (*TaskGroups, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskGroups
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskGroupsAPIService.TaskGroupsTaskGroupIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_groups/{task_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_group_id"+"}", url.PathEscape(parameterValueToString(r.taskGroupId, "taskGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskGroupsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTaskGroupsTaskGroupIdStartPutRequest struct {
	ctx context.Context
	ApiService *TaskGroupsAPIService
	taskGroupId int64
	body *bool
}

func (r ApiTaskGroupsTaskGroupIdStartPutRequest) Body(body bool) ApiTaskGroupsTaskGroupIdStartPutRequest {
	r.body = &body
	return r
}

func (r ApiTaskGroupsTaskGroupIdStartPutRequest) Execute() (*TaskGroupsStart, *http.Response, error) {
	return r.ApiService.TaskGroupsTaskGroupIdStartPutExecute(r)
}

/*
TaskGroupsTaskGroupIdStartPut Method for TaskGroupsTaskGroupIdStartPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskGroupId Task group id, aka Workstream project id
 @return ApiTaskGroupsTaskGroupIdStartPutRequest
*/
func (a *TaskGroupsAPIService) TaskGroupsTaskGroupIdStartPut(ctx context.Context, taskGroupId int64) ApiTaskGroupsTaskGroupIdStartPutRequest {
	return ApiTaskGroupsTaskGroupIdStartPutRequest{
		ApiService: a,
		ctx: ctx,
		taskGroupId: taskGroupId,
	}
}

// Execute executes the request
//  @return TaskGroupsStart
func (a *TaskGroupsAPIService) TaskGroupsTaskGroupIdStartPutExecute(r ApiTaskGroupsTaskGroupIdStartPutRequest) (*TaskGroupsStart, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskGroupsStart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskGroupsAPIService.TaskGroupsTaskGroupIdStartPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_groups/{task_group_id}/start"
	localVarPath = strings.Replace(localVarPath, "{"+"task_group_id"+"}", url.PathEscape(parameterValueToString(r.taskGroupId, "taskGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
