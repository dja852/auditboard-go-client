/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the UploadFilesPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadFilesPut{}

// UploadFilesPut struct for UploadFilesPut
type UploadFilesPut struct {
	UploadFile *UploadFilesPutUploadFile `json:"upload_file,omitempty"`
	PreviousValues *UploadFilesPutPreviousValues `json:"previous_values,omitempty"`
}

// NewUploadFilesPut instantiates a new UploadFilesPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadFilesPut() *UploadFilesPut {
	this := UploadFilesPut{}
	return &this
}

// NewUploadFilesPutWithDefaults instantiates a new UploadFilesPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadFilesPutWithDefaults() *UploadFilesPut {
	this := UploadFilesPut{}
	return &this
}

// GetUploadFile returns the UploadFile field value if set, zero value otherwise.
func (o *UploadFilesPut) GetUploadFile() UploadFilesPutUploadFile {
	if o == nil || IsNil(o.UploadFile) {
		var ret UploadFilesPutUploadFile
		return ret
	}
	return *o.UploadFile
}

// GetUploadFileOk returns a tuple with the UploadFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFilesPut) GetUploadFileOk() (*UploadFilesPutUploadFile, bool) {
	if o == nil || IsNil(o.UploadFile) {
		return nil, false
	}
	return o.UploadFile, true
}

// HasUploadFile returns a boolean if a field has been set.
func (o *UploadFilesPut) HasUploadFile() bool {
	if o != nil && !IsNil(o.UploadFile) {
		return true
	}

	return false
}

// SetUploadFile gets a reference to the given UploadFilesPutUploadFile and assigns it to the UploadFile field.
func (o *UploadFilesPut) SetUploadFile(v UploadFilesPutUploadFile) {
	o.UploadFile = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *UploadFilesPut) GetPreviousValues() UploadFilesPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret UploadFilesPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFilesPut) GetPreviousValuesOk() (*UploadFilesPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *UploadFilesPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given UploadFilesPutPreviousValues and assigns it to the PreviousValues field.
func (o *UploadFilesPut) SetPreviousValues(v UploadFilesPutPreviousValues) {
	o.PreviousValues = &v
}

func (o UploadFilesPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadFilesPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UploadFile) {
		toSerialize["upload_file"] = o.UploadFile
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableUploadFilesPut struct {
	value *UploadFilesPut
	isSet bool
}

func (v NullableUploadFilesPut) Get() *UploadFilesPut {
	return v.value
}

func (v *NullableUploadFilesPut) Set(val *UploadFilesPut) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadFilesPut) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadFilesPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadFilesPut(val *UploadFilesPut) *NullableUploadFilesPut {
	return &NullableUploadFilesPut{value: val, isSet: true}
}

func (v NullableUploadFilesPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadFilesPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


