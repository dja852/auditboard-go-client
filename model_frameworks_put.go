/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the FrameworksPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameworksPut{}

// FrameworksPut struct for FrameworksPut
type FrameworksPut struct {
	Framework *FrameworksPutFramework `json:"framework,omitempty"`
	PreviousValues *FrameworksPutPreviousValues `json:"previous_values,omitempty"`
}

// NewFrameworksPut instantiates a new FrameworksPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameworksPut() *FrameworksPut {
	this := FrameworksPut{}
	return &this
}

// NewFrameworksPutWithDefaults instantiates a new FrameworksPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameworksPutWithDefaults() *FrameworksPut {
	this := FrameworksPut{}
	return &this
}

// GetFramework returns the Framework field value if set, zero value otherwise.
func (o *FrameworksPut) GetFramework() FrameworksPutFramework {
	if o == nil || IsNil(o.Framework) {
		var ret FrameworksPutFramework
		return ret
	}
	return *o.Framework
}

// GetFrameworkOk returns a tuple with the Framework field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPut) GetFrameworkOk() (*FrameworksPutFramework, bool) {
	if o == nil || IsNil(o.Framework) {
		return nil, false
	}
	return o.Framework, true
}

// HasFramework returns a boolean if a field has been set.
func (o *FrameworksPut) HasFramework() bool {
	if o != nil && !IsNil(o.Framework) {
		return true
	}

	return false
}

// SetFramework gets a reference to the given FrameworksPutFramework and assigns it to the Framework field.
func (o *FrameworksPut) SetFramework(v FrameworksPutFramework) {
	o.Framework = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *FrameworksPut) GetPreviousValues() FrameworksPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret FrameworksPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworksPut) GetPreviousValuesOk() (*FrameworksPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *FrameworksPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given FrameworksPutPreviousValues and assigns it to the PreviousValues field.
func (o *FrameworksPut) SetPreviousValues(v FrameworksPutPreviousValues) {
	o.PreviousValues = &v
}

func (o FrameworksPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameworksPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Framework) {
		toSerialize["framework"] = o.Framework
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableFrameworksPut struct {
	value *FrameworksPut
	isSet bool
}

func (v NullableFrameworksPut) Get() *FrameworksPut {
	return v.value
}

func (v *NullableFrameworksPut) Set(val *FrameworksPut) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameworksPut) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameworksPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameworksPut(val *FrameworksPut) *NullableFrameworksPut {
	return &NullableFrameworksPut{value: val, isSet: true}
}

func (v NullableFrameworksPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameworksPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


