/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the CommentsPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentsPut{}

// CommentsPut struct for CommentsPut
type CommentsPut struct {
	Comment *CommentsPutComment `json:"comment,omitempty"`
	PreviousValues *CommentsPutPreviousValues `json:"previous_values,omitempty"`
}

// NewCommentsPut instantiates a new CommentsPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentsPut() *CommentsPut {
	this := CommentsPut{}
	return &this
}

// NewCommentsPutWithDefaults instantiates a new CommentsPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentsPutWithDefaults() *CommentsPut {
	this := CommentsPut{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *CommentsPut) GetComment() CommentsPutComment {
	if o == nil || IsNil(o.Comment) {
		var ret CommentsPutComment
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPut) GetCommentOk() (*CommentsPutComment, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *CommentsPut) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given CommentsPutComment and assigns it to the Comment field.
func (o *CommentsPut) SetComment(v CommentsPutComment) {
	o.Comment = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *CommentsPut) GetPreviousValues() CommentsPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret CommentsPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPut) GetPreviousValuesOk() (*CommentsPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *CommentsPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given CommentsPutPreviousValues and assigns it to the PreviousValues field.
func (o *CommentsPut) SetPreviousValues(v CommentsPutPreviousValues) {
	o.PreviousValues = &v
}

func (o CommentsPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentsPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableCommentsPut struct {
	value *CommentsPut
	isSet bool
}

func (v NullableCommentsPut) Get() *CommentsPut {
	return v.value
}

func (v *NullableCommentsPut) Set(val *CommentsPut) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentsPut) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentsPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentsPut(val *CommentsPut) *NullableCommentsPut {
	return &NullableCommentsPut{value: val, isSet: true}
}

func (v NullableCommentsPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentsPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


