/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RcwSchedulesAPIService RcwSchedulesAPI service
type RcwSchedulesAPIService service

type ApiRcwSchedulesGetRequest struct {
	ctx context.Context
	ApiService *RcwSchedulesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiRcwSchedulesGetRequest) Include(include []string) ApiRcwSchedulesGetRequest {
	r.include = &include
	return r
}

func (r ApiRcwSchedulesGetRequest) Execute() (*RcwSchedulesGet200Response, *http.Response, error) {
	return r.ApiService.RcwSchedulesGetExecute(r)
}

/*
RcwSchedulesGet Method for RcwSchedulesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRcwSchedulesGetRequest
*/
func (a *RcwSchedulesAPIService) RcwSchedulesGet(ctx context.Context) ApiRcwSchedulesGetRequest {
	return ApiRcwSchedulesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RcwSchedulesGet200Response
func (a *RcwSchedulesAPIService) RcwSchedulesGetExecute(r ApiRcwSchedulesGetRequest) (*RcwSchedulesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwSchedulesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwSchedulesAPIService.RcwSchedulesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_schedules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwSchedulesPostRequest struct {
	ctx context.Context
	ApiService *RcwSchedulesAPIService
	rcwSchedulesPostRequest *RcwSchedulesPostRequest
}

func (r ApiRcwSchedulesPostRequest) RcwSchedulesPostRequest(rcwSchedulesPostRequest RcwSchedulesPostRequest) ApiRcwSchedulesPostRequest {
	r.rcwSchedulesPostRequest = &rcwSchedulesPostRequest
	return r
}

func (r ApiRcwSchedulesPostRequest) Execute() (*RcwSchedulesGet200Response, *http.Response, error) {
	return r.ApiService.RcwSchedulesPostExecute(r)
}

/*
RcwSchedulesPost Method for RcwSchedulesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRcwSchedulesPostRequest
*/
func (a *RcwSchedulesAPIService) RcwSchedulesPost(ctx context.Context) ApiRcwSchedulesPostRequest {
	return ApiRcwSchedulesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RcwSchedulesGet200Response
func (a *RcwSchedulesAPIService) RcwSchedulesPostExecute(r ApiRcwSchedulesPostRequest) (*RcwSchedulesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwSchedulesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwSchedulesAPIService.RcwSchedulesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_schedules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rcwSchedulesPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwSchedulesRcwScheduleIdDeleteRequest struct {
	ctx context.Context
	ApiService *RcwSchedulesAPIService
	rcwScheduleId int64
}

func (r ApiRcwSchedulesRcwScheduleIdDeleteRequest) Execute() (*RcwSchedules, *http.Response, error) {
	return r.ApiService.RcwSchedulesRcwScheduleIdDeleteExecute(r)
}

/*
RcwSchedulesRcwScheduleIdDelete Method for RcwSchedulesRcwScheduleIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rcwScheduleId Model id
 @return ApiRcwSchedulesRcwScheduleIdDeleteRequest
*/
func (a *RcwSchedulesAPIService) RcwSchedulesRcwScheduleIdDelete(ctx context.Context, rcwScheduleId int64) ApiRcwSchedulesRcwScheduleIdDeleteRequest {
	return ApiRcwSchedulesRcwScheduleIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		rcwScheduleId: rcwScheduleId,
	}
}

// Execute executes the request
//  @return RcwSchedules
func (a *RcwSchedulesAPIService) RcwSchedulesRcwScheduleIdDeleteExecute(r ApiRcwSchedulesRcwScheduleIdDeleteRequest) (*RcwSchedules, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwSchedules
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwSchedulesAPIService.RcwSchedulesRcwScheduleIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_schedules/{rcw_schedule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"rcw_schedule_id"+"}", url.PathEscape(parameterValueToString(r.rcwScheduleId, "rcwScheduleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwSchedulesRcwScheduleIdGetRequest struct {
	ctx context.Context
	ApiService *RcwSchedulesAPIService
	rcwScheduleId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiRcwSchedulesRcwScheduleIdGetRequest) Include(include []string) ApiRcwSchedulesRcwScheduleIdGetRequest {
	r.include = &include
	return r
}

func (r ApiRcwSchedulesRcwScheduleIdGetRequest) Execute() (*RcwSchedules, *http.Response, error) {
	return r.ApiService.RcwSchedulesRcwScheduleIdGetExecute(r)
}

/*
RcwSchedulesRcwScheduleIdGet Method for RcwSchedulesRcwScheduleIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rcwScheduleId Model id
 @return ApiRcwSchedulesRcwScheduleIdGetRequest
*/
func (a *RcwSchedulesAPIService) RcwSchedulesRcwScheduleIdGet(ctx context.Context, rcwScheduleId int64) ApiRcwSchedulesRcwScheduleIdGetRequest {
	return ApiRcwSchedulesRcwScheduleIdGetRequest{
		ApiService: a,
		ctx: ctx,
		rcwScheduleId: rcwScheduleId,
	}
}

// Execute executes the request
//  @return RcwSchedules
func (a *RcwSchedulesAPIService) RcwSchedulesRcwScheduleIdGetExecute(r ApiRcwSchedulesRcwScheduleIdGetRequest) (*RcwSchedules, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwSchedules
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwSchedulesAPIService.RcwSchedulesRcwScheduleIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_schedules/{rcw_schedule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"rcw_schedule_id"+"}", url.PathEscape(parameterValueToString(r.rcwScheduleId, "rcwScheduleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRcwSchedulesRcwScheduleIdPutRequest struct {
	ctx context.Context
	ApiService *RcwSchedulesAPIService
	rcwScheduleId int64
	rcwSchedulesPut *RcwSchedulesPut
}

func (r ApiRcwSchedulesRcwScheduleIdPutRequest) RcwSchedulesPut(rcwSchedulesPut RcwSchedulesPut) ApiRcwSchedulesRcwScheduleIdPutRequest {
	r.rcwSchedulesPut = &rcwSchedulesPut
	return r
}

func (r ApiRcwSchedulesRcwScheduleIdPutRequest) Execute() (*RcwSchedules, *http.Response, error) {
	return r.ApiService.RcwSchedulesRcwScheduleIdPutExecute(r)
}

/*
RcwSchedulesRcwScheduleIdPut Method for RcwSchedulesRcwScheduleIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rcwScheduleId Model id
 @return ApiRcwSchedulesRcwScheduleIdPutRequest
*/
func (a *RcwSchedulesAPIService) RcwSchedulesRcwScheduleIdPut(ctx context.Context, rcwScheduleId int64) ApiRcwSchedulesRcwScheduleIdPutRequest {
	return ApiRcwSchedulesRcwScheduleIdPutRequest{
		ApiService: a,
		ctx: ctx,
		rcwScheduleId: rcwScheduleId,
	}
}

// Execute executes the request
//  @return RcwSchedules
func (a *RcwSchedulesAPIService) RcwSchedulesRcwScheduleIdPutExecute(r ApiRcwSchedulesRcwScheduleIdPutRequest) (*RcwSchedules, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RcwSchedules
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RcwSchedulesAPIService.RcwSchedulesRcwScheduleIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rcw_schedules/{rcw_schedule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"rcw_schedule_id"+"}", url.PathEscape(parameterValueToString(r.rcwScheduleId, "rcwScheduleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rcwSchedulesPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
