/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OpsAuditItemsAPIService OpsAuditItemsAPI service
type OpsAuditItemsAPIService service

type ApiOpsAuditItemsGetRequest struct {
	ctx context.Context
	ApiService *OpsAuditItemsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiOpsAuditItemsGetRequest) Include(include []string) ApiOpsAuditItemsGetRequest {
	r.include = &include
	return r
}

func (r ApiOpsAuditItemsGetRequest) Execute() (*OpsAuditItemsGet200Response, *http.Response, error) {
	return r.ApiService.OpsAuditItemsGetExecute(r)
}

/*
OpsAuditItemsGet Method for OpsAuditItemsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOpsAuditItemsGetRequest
*/
func (a *OpsAuditItemsAPIService) OpsAuditItemsGet(ctx context.Context) ApiOpsAuditItemsGetRequest {
	return ApiOpsAuditItemsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpsAuditItemsGet200Response
func (a *OpsAuditItemsAPIService) OpsAuditItemsGetExecute(r ApiOpsAuditItemsGetRequest) (*OpsAuditItemsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditItemsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditItemsAPIService.OpsAuditItemsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditItemsOpsAuditItemIdDeleteRequest struct {
	ctx context.Context
	ApiService *OpsAuditItemsAPIService
	opsAuditItemId int64
}

func (r ApiOpsAuditItemsOpsAuditItemIdDeleteRequest) Execute() (*OpsAuditItems, *http.Response, error) {
	return r.ApiService.OpsAuditItemsOpsAuditItemIdDeleteExecute(r)
}

/*
OpsAuditItemsOpsAuditItemIdDelete Method for OpsAuditItemsOpsAuditItemIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param opsAuditItemId Model id
 @return ApiOpsAuditItemsOpsAuditItemIdDeleteRequest
*/
func (a *OpsAuditItemsAPIService) OpsAuditItemsOpsAuditItemIdDelete(ctx context.Context, opsAuditItemId int64) ApiOpsAuditItemsOpsAuditItemIdDeleteRequest {
	return ApiOpsAuditItemsOpsAuditItemIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		opsAuditItemId: opsAuditItemId,
	}
}

// Execute executes the request
//  @return OpsAuditItems
func (a *OpsAuditItemsAPIService) OpsAuditItemsOpsAuditItemIdDeleteExecute(r ApiOpsAuditItemsOpsAuditItemIdDeleteRequest) (*OpsAuditItems, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditItemsAPIService.OpsAuditItemsOpsAuditItemIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_items/{ops_audit_item_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ops_audit_item_id"+"}", url.PathEscape(parameterValueToString(r.opsAuditItemId, "opsAuditItemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditItemsOpsAuditItemIdGetRequest struct {
	ctx context.Context
	ApiService *OpsAuditItemsAPIService
	opsAuditItemId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiOpsAuditItemsOpsAuditItemIdGetRequest) Include(include []string) ApiOpsAuditItemsOpsAuditItemIdGetRequest {
	r.include = &include
	return r
}

func (r ApiOpsAuditItemsOpsAuditItemIdGetRequest) Execute() (*OpsAuditItems, *http.Response, error) {
	return r.ApiService.OpsAuditItemsOpsAuditItemIdGetExecute(r)
}

/*
OpsAuditItemsOpsAuditItemIdGet Method for OpsAuditItemsOpsAuditItemIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param opsAuditItemId Model id
 @return ApiOpsAuditItemsOpsAuditItemIdGetRequest
*/
func (a *OpsAuditItemsAPIService) OpsAuditItemsOpsAuditItemIdGet(ctx context.Context, opsAuditItemId int64) ApiOpsAuditItemsOpsAuditItemIdGetRequest {
	return ApiOpsAuditItemsOpsAuditItemIdGetRequest{
		ApiService: a,
		ctx: ctx,
		opsAuditItemId: opsAuditItemId,
	}
}

// Execute executes the request
//  @return OpsAuditItems
func (a *OpsAuditItemsAPIService) OpsAuditItemsOpsAuditItemIdGetExecute(r ApiOpsAuditItemsOpsAuditItemIdGetRequest) (*OpsAuditItems, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditItemsAPIService.OpsAuditItemsOpsAuditItemIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_items/{ops_audit_item_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ops_audit_item_id"+"}", url.PathEscape(parameterValueToString(r.opsAuditItemId, "opsAuditItemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditItemsOpsAuditItemIdPutRequest struct {
	ctx context.Context
	ApiService *OpsAuditItemsAPIService
	opsAuditItemId int64
	opsAuditItemsPut *OpsAuditItemsPut
}

func (r ApiOpsAuditItemsOpsAuditItemIdPutRequest) OpsAuditItemsPut(opsAuditItemsPut OpsAuditItemsPut) ApiOpsAuditItemsOpsAuditItemIdPutRequest {
	r.opsAuditItemsPut = &opsAuditItemsPut
	return r
}

func (r ApiOpsAuditItemsOpsAuditItemIdPutRequest) Execute() (*OpsAuditItems, *http.Response, error) {
	return r.ApiService.OpsAuditItemsOpsAuditItemIdPutExecute(r)
}

/*
OpsAuditItemsOpsAuditItemIdPut Method for OpsAuditItemsOpsAuditItemIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param opsAuditItemId Model id
 @return ApiOpsAuditItemsOpsAuditItemIdPutRequest
*/
func (a *OpsAuditItemsAPIService) OpsAuditItemsOpsAuditItemIdPut(ctx context.Context, opsAuditItemId int64) ApiOpsAuditItemsOpsAuditItemIdPutRequest {
	return ApiOpsAuditItemsOpsAuditItemIdPutRequest{
		ApiService: a,
		ctx: ctx,
		opsAuditItemId: opsAuditItemId,
	}
}

// Execute executes the request
//  @return OpsAuditItems
func (a *OpsAuditItemsAPIService) OpsAuditItemsOpsAuditItemIdPutExecute(r ApiOpsAuditItemsOpsAuditItemIdPutRequest) (*OpsAuditItems, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditItemsAPIService.OpsAuditItemsOpsAuditItemIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_items/{ops_audit_item_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ops_audit_item_id"+"}", url.PathEscape(parameterValueToString(r.opsAuditItemId, "opsAuditItemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.opsAuditItemsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsAuditItemsPostRequest struct {
	ctx context.Context
	ApiService *OpsAuditItemsAPIService
	opsAuditItemsPostRequest *OpsAuditItemsPostRequest
}

func (r ApiOpsAuditItemsPostRequest) OpsAuditItemsPostRequest(opsAuditItemsPostRequest OpsAuditItemsPostRequest) ApiOpsAuditItemsPostRequest {
	r.opsAuditItemsPostRequest = &opsAuditItemsPostRequest
	return r
}

func (r ApiOpsAuditItemsPostRequest) Execute() (*OpsAuditItemsGet200Response, *http.Response, error) {
	return r.ApiService.OpsAuditItemsPostExecute(r)
}

/*
OpsAuditItemsPost Method for OpsAuditItemsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOpsAuditItemsPostRequest
*/
func (a *OpsAuditItemsAPIService) OpsAuditItemsPost(ctx context.Context) ApiOpsAuditItemsPostRequest {
	return ApiOpsAuditItemsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpsAuditItemsGet200Response
func (a *OpsAuditItemsAPIService) OpsAuditItemsPostExecute(r ApiOpsAuditItemsPostRequest) (*OpsAuditItemsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsAuditItemsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsAuditItemsAPIService.OpsAuditItemsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops_audit_items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.opsAuditItemsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
