/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AuditQuestionResponsesAPIService AuditQuestionResponsesAPI service
type AuditQuestionResponsesAPIService service

type ApiAuditQuestionResponsesAuditQuestionResponseIdGetRequest struct {
	ctx context.Context
	ApiService *AuditQuestionResponsesAPIService
	auditQuestionResponseId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditQuestionResponsesAuditQuestionResponseIdGetRequest) Include(include []string) ApiAuditQuestionResponsesAuditQuestionResponseIdGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditQuestionResponsesAuditQuestionResponseIdGetRequest) Execute() (*AuditQuestionResponses, *http.Response, error) {
	return r.ApiService.AuditQuestionResponsesAuditQuestionResponseIdGetExecute(r)
}

/*
AuditQuestionResponsesAuditQuestionResponseIdGet Method for AuditQuestionResponsesAuditQuestionResponseIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditQuestionResponseId Model id
 @return ApiAuditQuestionResponsesAuditQuestionResponseIdGetRequest
*/
func (a *AuditQuestionResponsesAPIService) AuditQuestionResponsesAuditQuestionResponseIdGet(ctx context.Context, auditQuestionResponseId int64) ApiAuditQuestionResponsesAuditQuestionResponseIdGetRequest {
	return ApiAuditQuestionResponsesAuditQuestionResponseIdGetRequest{
		ApiService: a,
		ctx: ctx,
		auditQuestionResponseId: auditQuestionResponseId,
	}
}

// Execute executes the request
//  @return AuditQuestionResponses
func (a *AuditQuestionResponsesAPIService) AuditQuestionResponsesAuditQuestionResponseIdGetExecute(r ApiAuditQuestionResponsesAuditQuestionResponseIdGetRequest) (*AuditQuestionResponses, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditQuestionResponses
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditQuestionResponsesAPIService.AuditQuestionResponsesAuditQuestionResponseIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_question_responses/{audit_question_response_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_question_response_id"+"}", url.PathEscape(parameterValueToString(r.auditQuestionResponseId, "auditQuestionResponseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditQuestionResponsesAuditQuestionResponseIdPutRequest struct {
	ctx context.Context
	ApiService *AuditQuestionResponsesAPIService
	auditQuestionResponseId int64
	auditQuestionResponsesPut *AuditQuestionResponsesPut
}

func (r ApiAuditQuestionResponsesAuditQuestionResponseIdPutRequest) AuditQuestionResponsesPut(auditQuestionResponsesPut AuditQuestionResponsesPut) ApiAuditQuestionResponsesAuditQuestionResponseIdPutRequest {
	r.auditQuestionResponsesPut = &auditQuestionResponsesPut
	return r
}

func (r ApiAuditQuestionResponsesAuditQuestionResponseIdPutRequest) Execute() (*AuditQuestionResponses, *http.Response, error) {
	return r.ApiService.AuditQuestionResponsesAuditQuestionResponseIdPutExecute(r)
}

/*
AuditQuestionResponsesAuditQuestionResponseIdPut Method for AuditQuestionResponsesAuditQuestionResponseIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditQuestionResponseId Model id
 @return ApiAuditQuestionResponsesAuditQuestionResponseIdPutRequest
*/
func (a *AuditQuestionResponsesAPIService) AuditQuestionResponsesAuditQuestionResponseIdPut(ctx context.Context, auditQuestionResponseId int64) ApiAuditQuestionResponsesAuditQuestionResponseIdPutRequest {
	return ApiAuditQuestionResponsesAuditQuestionResponseIdPutRequest{
		ApiService: a,
		ctx: ctx,
		auditQuestionResponseId: auditQuestionResponseId,
	}
}

// Execute executes the request
//  @return AuditQuestionResponses
func (a *AuditQuestionResponsesAPIService) AuditQuestionResponsesAuditQuestionResponseIdPutExecute(r ApiAuditQuestionResponsesAuditQuestionResponseIdPutRequest) (*AuditQuestionResponses, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditQuestionResponses
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditQuestionResponsesAPIService.AuditQuestionResponsesAuditQuestionResponseIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_question_responses/{audit_question_response_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"audit_question_response_id"+"}", url.PathEscape(parameterValueToString(r.auditQuestionResponseId, "auditQuestionResponseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditQuestionResponsesPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditQuestionResponsesGetRequest struct {
	ctx context.Context
	ApiService *AuditQuestionResponsesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditQuestionResponsesGetRequest) Include(include []string) ApiAuditQuestionResponsesGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditQuestionResponsesGetRequest) Execute() (*AuditQuestionResponsesGet200Response, *http.Response, error) {
	return r.ApiService.AuditQuestionResponsesGetExecute(r)
}

/*
AuditQuestionResponsesGet Method for AuditQuestionResponsesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditQuestionResponsesGetRequest
*/
func (a *AuditQuestionResponsesAPIService) AuditQuestionResponsesGet(ctx context.Context) ApiAuditQuestionResponsesGetRequest {
	return ApiAuditQuestionResponsesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditQuestionResponsesGet200Response
func (a *AuditQuestionResponsesAPIService) AuditQuestionResponsesGetExecute(r ApiAuditQuestionResponsesGetRequest) (*AuditQuestionResponsesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditQuestionResponsesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditQuestionResponsesAPIService.AuditQuestionResponsesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_question_responses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
