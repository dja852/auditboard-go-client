/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AuditableEntityTypesAPIService AuditableEntityTypesAPI service
type AuditableEntityTypesAPIService service

type ApiAuditableEntityTypesAuditableEntityTypeIdDeleteRequest struct {
	ctx context.Context
	ApiService *AuditableEntityTypesAPIService
	auditableEntityTypeId int64
}

func (r ApiAuditableEntityTypesAuditableEntityTypeIdDeleteRequest) Execute() (*AuditableEntityTypes, *http.Response, error) {
	return r.ApiService.AuditableEntityTypesAuditableEntityTypeIdDeleteExecute(r)
}

/*
AuditableEntityTypesAuditableEntityTypeIdDelete Method for AuditableEntityTypesAuditableEntityTypeIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditableEntityTypeId Model id
 @return ApiAuditableEntityTypesAuditableEntityTypeIdDeleteRequest
*/
func (a *AuditableEntityTypesAPIService) AuditableEntityTypesAuditableEntityTypeIdDelete(ctx context.Context, auditableEntityTypeId int64) ApiAuditableEntityTypesAuditableEntityTypeIdDeleteRequest {
	return ApiAuditableEntityTypesAuditableEntityTypeIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		auditableEntityTypeId: auditableEntityTypeId,
	}
}

// Execute executes the request
//  @return AuditableEntityTypes
func (a *AuditableEntityTypesAPIService) AuditableEntityTypesAuditableEntityTypeIdDeleteExecute(r ApiAuditableEntityTypesAuditableEntityTypeIdDeleteRequest) (*AuditableEntityTypes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditableEntityTypes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditableEntityTypesAPIService.AuditableEntityTypesAuditableEntityTypeIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auditable_entity_types/{auditable_entity_type_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auditable_entity_type_id"+"}", url.PathEscape(parameterValueToString(r.auditableEntityTypeId, "auditableEntityTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditableEntityTypesAuditableEntityTypeIdGetRequest struct {
	ctx context.Context
	ApiService *AuditableEntityTypesAPIService
	auditableEntityTypeId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditableEntityTypesAuditableEntityTypeIdGetRequest) Include(include []string) ApiAuditableEntityTypesAuditableEntityTypeIdGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditableEntityTypesAuditableEntityTypeIdGetRequest) Execute() (*AuditableEntityTypes, *http.Response, error) {
	return r.ApiService.AuditableEntityTypesAuditableEntityTypeIdGetExecute(r)
}

/*
AuditableEntityTypesAuditableEntityTypeIdGet Method for AuditableEntityTypesAuditableEntityTypeIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditableEntityTypeId Model id
 @return ApiAuditableEntityTypesAuditableEntityTypeIdGetRequest
*/
func (a *AuditableEntityTypesAPIService) AuditableEntityTypesAuditableEntityTypeIdGet(ctx context.Context, auditableEntityTypeId int64) ApiAuditableEntityTypesAuditableEntityTypeIdGetRequest {
	return ApiAuditableEntityTypesAuditableEntityTypeIdGetRequest{
		ApiService: a,
		ctx: ctx,
		auditableEntityTypeId: auditableEntityTypeId,
	}
}

// Execute executes the request
//  @return AuditableEntityTypes
func (a *AuditableEntityTypesAPIService) AuditableEntityTypesAuditableEntityTypeIdGetExecute(r ApiAuditableEntityTypesAuditableEntityTypeIdGetRequest) (*AuditableEntityTypes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditableEntityTypes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditableEntityTypesAPIService.AuditableEntityTypesAuditableEntityTypeIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auditable_entity_types/{auditable_entity_type_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auditable_entity_type_id"+"}", url.PathEscape(parameterValueToString(r.auditableEntityTypeId, "auditableEntityTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditableEntityTypesAuditableEntityTypeIdPutRequest struct {
	ctx context.Context
	ApiService *AuditableEntityTypesAPIService
	auditableEntityTypeId int64
	auditableEntityTypesPut *AuditableEntityTypesPut
}

func (r ApiAuditableEntityTypesAuditableEntityTypeIdPutRequest) AuditableEntityTypesPut(auditableEntityTypesPut AuditableEntityTypesPut) ApiAuditableEntityTypesAuditableEntityTypeIdPutRequest {
	r.auditableEntityTypesPut = &auditableEntityTypesPut
	return r
}

func (r ApiAuditableEntityTypesAuditableEntityTypeIdPutRequest) Execute() (*AuditableEntityTypes, *http.Response, error) {
	return r.ApiService.AuditableEntityTypesAuditableEntityTypeIdPutExecute(r)
}

/*
AuditableEntityTypesAuditableEntityTypeIdPut Method for AuditableEntityTypesAuditableEntityTypeIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param auditableEntityTypeId Model id
 @return ApiAuditableEntityTypesAuditableEntityTypeIdPutRequest
*/
func (a *AuditableEntityTypesAPIService) AuditableEntityTypesAuditableEntityTypeIdPut(ctx context.Context, auditableEntityTypeId int64) ApiAuditableEntityTypesAuditableEntityTypeIdPutRequest {
	return ApiAuditableEntityTypesAuditableEntityTypeIdPutRequest{
		ApiService: a,
		ctx: ctx,
		auditableEntityTypeId: auditableEntityTypeId,
	}
}

// Execute executes the request
//  @return AuditableEntityTypes
func (a *AuditableEntityTypesAPIService) AuditableEntityTypesAuditableEntityTypeIdPutExecute(r ApiAuditableEntityTypesAuditableEntityTypeIdPutRequest) (*AuditableEntityTypes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditableEntityTypes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditableEntityTypesAPIService.AuditableEntityTypesAuditableEntityTypeIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auditable_entity_types/{auditable_entity_type_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auditable_entity_type_id"+"}", url.PathEscape(parameterValueToString(r.auditableEntityTypeId, "auditableEntityTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditableEntityTypesPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditableEntityTypesGetRequest struct {
	ctx context.Context
	ApiService *AuditableEntityTypesAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAuditableEntityTypesGetRequest) Include(include []string) ApiAuditableEntityTypesGetRequest {
	r.include = &include
	return r
}

func (r ApiAuditableEntityTypesGetRequest) Execute() (*AuditableEntityTypesGet200Response, *http.Response, error) {
	return r.ApiService.AuditableEntityTypesGetExecute(r)
}

/*
AuditableEntityTypesGet Method for AuditableEntityTypesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditableEntityTypesGetRequest
*/
func (a *AuditableEntityTypesAPIService) AuditableEntityTypesGet(ctx context.Context) ApiAuditableEntityTypesGetRequest {
	return ApiAuditableEntityTypesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditableEntityTypesGet200Response
func (a *AuditableEntityTypesAPIService) AuditableEntityTypesGetExecute(r ApiAuditableEntityTypesGetRequest) (*AuditableEntityTypesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditableEntityTypesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditableEntityTypesAPIService.AuditableEntityTypesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auditable_entity_types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditableEntityTypesPostRequest struct {
	ctx context.Context
	ApiService *AuditableEntityTypesAPIService
	auditableEntityTypesPostRequest *AuditableEntityTypesPostRequest
}

func (r ApiAuditableEntityTypesPostRequest) AuditableEntityTypesPostRequest(auditableEntityTypesPostRequest AuditableEntityTypesPostRequest) ApiAuditableEntityTypesPostRequest {
	r.auditableEntityTypesPostRequest = &auditableEntityTypesPostRequest
	return r
}

func (r ApiAuditableEntityTypesPostRequest) Execute() (*AuditableEntityTypesGet200Response, *http.Response, error) {
	return r.ApiService.AuditableEntityTypesPostExecute(r)
}

/*
AuditableEntityTypesPost Method for AuditableEntityTypesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditableEntityTypesPostRequest
*/
func (a *AuditableEntityTypesAPIService) AuditableEntityTypesPost(ctx context.Context) ApiAuditableEntityTypesPostRequest {
	return ApiAuditableEntityTypesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuditableEntityTypesGet200Response
func (a *AuditableEntityTypesAPIService) AuditableEntityTypesPostExecute(r ApiAuditableEntityTypesPostRequest) (*AuditableEntityTypesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuditableEntityTypesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditableEntityTypesAPIService.AuditableEntityTypesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auditable_entity_types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditableEntityTypesPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
