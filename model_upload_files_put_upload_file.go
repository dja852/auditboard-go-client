/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UploadFilesPutUploadFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadFilesPutUploadFile{}

// UploadFilesPutUploadFile struct for UploadFilesPutUploadFile
type UploadFilesPutUploadFile struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	Name string `json:"name"`
	Url string `json:"url"`
	Key string `json:"key"`
	StorageType string `json:"storage_type"`
	Type string `json:"type"`
	FileableType *string `json:"fileable_type,omitempty"`
	FileableId *int32 `json:"fileable_id,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	UploadUserId *int32 `json:"upload_user_id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
}

type _UploadFilesPutUploadFile UploadFilesPutUploadFile

// NewUploadFilesPutUploadFile instantiates a new UploadFilesPutUploadFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadFilesPutUploadFile(name string, url string, key string, storageType string, type_ string) *UploadFilesPutUploadFile {
	this := UploadFilesPutUploadFile{}
	this.Name = name
	this.Url = url
	this.Key = key
	this.StorageType = storageType
	this.Type = type_
	return &this
}

// NewUploadFilesPutUploadFileWithDefaults instantiates a new UploadFilesPutUploadFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadFilesPutUploadFileWithDefaults() *UploadFilesPutUploadFile {
	this := UploadFilesPutUploadFile{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UploadFilesPutUploadFile) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFilesPutUploadFile) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UploadFilesPutUploadFile) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UploadFilesPutUploadFile) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *UploadFilesPutUploadFile) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UploadFilesPutUploadFile) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UploadFilesPutUploadFile) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *UploadFilesPutUploadFile) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *UploadFilesPutUploadFile) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *UploadFilesPutUploadFile) SetUrl(v string) {
	o.Url = v
}

// GetKey returns the Key field value
func (o *UploadFilesPutUploadFile) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *UploadFilesPutUploadFile) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *UploadFilesPutUploadFile) SetKey(v string) {
	o.Key = v
}

// GetStorageType returns the StorageType field value
func (o *UploadFilesPutUploadFile) GetStorageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value
// and a boolean to check if the value has been set.
func (o *UploadFilesPutUploadFile) GetStorageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageType, true
}

// SetStorageType sets field value
func (o *UploadFilesPutUploadFile) SetStorageType(v string) {
	o.StorageType = v
}

// GetType returns the Type field value
func (o *UploadFilesPutUploadFile) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UploadFilesPutUploadFile) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UploadFilesPutUploadFile) SetType(v string) {
	o.Type = v
}

// GetFileableType returns the FileableType field value if set, zero value otherwise.
func (o *UploadFilesPutUploadFile) GetFileableType() string {
	if o == nil || IsNil(o.FileableType) {
		var ret string
		return ret
	}
	return *o.FileableType
}

// GetFileableTypeOk returns a tuple with the FileableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFilesPutUploadFile) GetFileableTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FileableType) {
		return nil, false
	}
	return o.FileableType, true
}

// HasFileableType returns a boolean if a field has been set.
func (o *UploadFilesPutUploadFile) HasFileableType() bool {
	if o != nil && !IsNil(o.FileableType) {
		return true
	}

	return false
}

// SetFileableType gets a reference to the given string and assigns it to the FileableType field.
func (o *UploadFilesPutUploadFile) SetFileableType(v string) {
	o.FileableType = &v
}

// GetFileableId returns the FileableId field value if set, zero value otherwise.
func (o *UploadFilesPutUploadFile) GetFileableId() int32 {
	if o == nil || IsNil(o.FileableId) {
		var ret int32
		return ret
	}
	return *o.FileableId
}

// GetFileableIdOk returns a tuple with the FileableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFilesPutUploadFile) GetFileableIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FileableId) {
		return nil, false
	}
	return o.FileableId, true
}

// HasFileableId returns a boolean if a field has been set.
func (o *UploadFilesPutUploadFile) HasFileableId() bool {
	if o != nil && !IsNil(o.FileableId) {
		return true
	}

	return false
}

// SetFileableId gets a reference to the given int32 and assigns it to the FileableId field.
func (o *UploadFilesPutUploadFile) SetFileableId(v int32) {
	o.FileableId = &v
}

// GetUploadUserId returns the UploadUserId field value if set, zero value otherwise.
func (o *UploadFilesPutUploadFile) GetUploadUserId() int32 {
	if o == nil || IsNil(o.UploadUserId) {
		var ret int32
		return ret
	}
	return *o.UploadUserId
}

// GetUploadUserIdOk returns a tuple with the UploadUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFilesPutUploadFile) GetUploadUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UploadUserId) {
		return nil, false
	}
	return o.UploadUserId, true
}

// HasUploadUserId returns a boolean if a field has been set.
func (o *UploadFilesPutUploadFile) HasUploadUserId() bool {
	if o != nil && !IsNil(o.UploadUserId) {
		return true
	}

	return false
}

// SetUploadUserId gets a reference to the given int32 and assigns it to the UploadUserId field.
func (o *UploadFilesPutUploadFile) SetUploadUserId(v int32) {
	o.UploadUserId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *UploadFilesPutUploadFile) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFilesPutUploadFile) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *UploadFilesPutUploadFile) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *UploadFilesPutUploadFile) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UploadFilesPutUploadFile) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFilesPutUploadFile) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UploadFilesPutUploadFile) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *UploadFilesPutUploadFile) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *UploadFilesPutUploadFile) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFilesPutUploadFile) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *UploadFilesPutUploadFile) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *UploadFilesPutUploadFile) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

func (o UploadFilesPutUploadFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadFilesPutUploadFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["url"] = o.Url
	toSerialize["key"] = o.Key
	toSerialize["storage_type"] = o.StorageType
	toSerialize["type"] = o.Type
	if !IsNil(o.FileableType) {
		toSerialize["fileable_type"] = o.FileableType
	}
	if !IsNil(o.FileableId) {
		toSerialize["fileable_id"] = o.FileableId
	}
	if !IsNil(o.UploadUserId) {
		toSerialize["upload_user_id"] = o.UploadUserId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	return toSerialize, nil
}

func (o *UploadFilesPutUploadFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"url",
		"key",
		"storage_type",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUploadFilesPutUploadFile := _UploadFilesPutUploadFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUploadFilesPutUploadFile)

	if err != nil {
		return err
	}

	*o = UploadFilesPutUploadFile(varUploadFilesPutUploadFile)

	return err
}

type NullableUploadFilesPutUploadFile struct {
	value *UploadFilesPutUploadFile
	isSet bool
}

func (v NullableUploadFilesPutUploadFile) Get() *UploadFilesPutUploadFile {
	return v.value
}

func (v *NullableUploadFilesPutUploadFile) Set(val *UploadFilesPutUploadFile) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadFilesPutUploadFile) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadFilesPutUploadFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadFilesPutUploadFile(val *UploadFilesPutUploadFile) *NullableUploadFilesPutUploadFile {
	return &NullableUploadFilesPutUploadFile{value: val, isSet: true}
}

func (v NullableUploadFilesPutUploadFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadFilesPutUploadFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


