/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TaskPeriodsAPIService TaskPeriodsAPI service
type TaskPeriodsAPIService service

type ApiTaskPeriodsGetRequest struct {
	ctx context.Context
	ApiService *TaskPeriodsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiTaskPeriodsGetRequest) Include(include []string) ApiTaskPeriodsGetRequest {
	r.include = &include
	return r
}

func (r ApiTaskPeriodsGetRequest) Execute() (*TaskPeriodsGet200Response, *http.Response, error) {
	return r.ApiService.TaskPeriodsGetExecute(r)
}

/*
TaskPeriodsGet Method for TaskPeriodsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTaskPeriodsGetRequest
*/
func (a *TaskPeriodsAPIService) TaskPeriodsGet(ctx context.Context) ApiTaskPeriodsGetRequest {
	return ApiTaskPeriodsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TaskPeriodsGet200Response
func (a *TaskPeriodsAPIService) TaskPeriodsGetExecute(r ApiTaskPeriodsGetRequest) (*TaskPeriodsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskPeriodsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskPeriodsAPIService.TaskPeriodsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_periods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTaskPeriodsPostRequest struct {
	ctx context.Context
	ApiService *TaskPeriodsAPIService
	taskPeriodsPostRequest *TaskPeriodsPostRequest
}

func (r ApiTaskPeriodsPostRequest) TaskPeriodsPostRequest(taskPeriodsPostRequest TaskPeriodsPostRequest) ApiTaskPeriodsPostRequest {
	r.taskPeriodsPostRequest = &taskPeriodsPostRequest
	return r
}

func (r ApiTaskPeriodsPostRequest) Execute() (*TaskPeriodsGet200Response, *http.Response, error) {
	return r.ApiService.TaskPeriodsPostExecute(r)
}

/*
TaskPeriodsPost Method for TaskPeriodsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTaskPeriodsPostRequest
*/
func (a *TaskPeriodsAPIService) TaskPeriodsPost(ctx context.Context) ApiTaskPeriodsPostRequest {
	return ApiTaskPeriodsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TaskPeriodsGet200Response
func (a *TaskPeriodsAPIService) TaskPeriodsPostExecute(r ApiTaskPeriodsPostRequest) (*TaskPeriodsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskPeriodsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskPeriodsAPIService.TaskPeriodsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_periods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskPeriodsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTaskPeriodsTaskPeriodIdDeleteRequest struct {
	ctx context.Context
	ApiService *TaskPeriodsAPIService
	taskPeriodId int64
}

func (r ApiTaskPeriodsTaskPeriodIdDeleteRequest) Execute() (*TaskPeriods, *http.Response, error) {
	return r.ApiService.TaskPeriodsTaskPeriodIdDeleteExecute(r)
}

/*
TaskPeriodsTaskPeriodIdDelete Method for TaskPeriodsTaskPeriodIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskPeriodId Model id
 @return ApiTaskPeriodsTaskPeriodIdDeleteRequest
*/
func (a *TaskPeriodsAPIService) TaskPeriodsTaskPeriodIdDelete(ctx context.Context, taskPeriodId int64) ApiTaskPeriodsTaskPeriodIdDeleteRequest {
	return ApiTaskPeriodsTaskPeriodIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		taskPeriodId: taskPeriodId,
	}
}

// Execute executes the request
//  @return TaskPeriods
func (a *TaskPeriodsAPIService) TaskPeriodsTaskPeriodIdDeleteExecute(r ApiTaskPeriodsTaskPeriodIdDeleteRequest) (*TaskPeriods, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskPeriods
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskPeriodsAPIService.TaskPeriodsTaskPeriodIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_periods/{task_period_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_period_id"+"}", url.PathEscape(parameterValueToString(r.taskPeriodId, "taskPeriodId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTaskPeriodsTaskPeriodIdGetRequest struct {
	ctx context.Context
	ApiService *TaskPeriodsAPIService
	taskPeriodId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiTaskPeriodsTaskPeriodIdGetRequest) Include(include []string) ApiTaskPeriodsTaskPeriodIdGetRequest {
	r.include = &include
	return r
}

func (r ApiTaskPeriodsTaskPeriodIdGetRequest) Execute() (*TaskPeriods, *http.Response, error) {
	return r.ApiService.TaskPeriodsTaskPeriodIdGetExecute(r)
}

/*
TaskPeriodsTaskPeriodIdGet Method for TaskPeriodsTaskPeriodIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskPeriodId Model id
 @return ApiTaskPeriodsTaskPeriodIdGetRequest
*/
func (a *TaskPeriodsAPIService) TaskPeriodsTaskPeriodIdGet(ctx context.Context, taskPeriodId int64) ApiTaskPeriodsTaskPeriodIdGetRequest {
	return ApiTaskPeriodsTaskPeriodIdGetRequest{
		ApiService: a,
		ctx: ctx,
		taskPeriodId: taskPeriodId,
	}
}

// Execute executes the request
//  @return TaskPeriods
func (a *TaskPeriodsAPIService) TaskPeriodsTaskPeriodIdGetExecute(r ApiTaskPeriodsTaskPeriodIdGetRequest) (*TaskPeriods, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskPeriods
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskPeriodsAPIService.TaskPeriodsTaskPeriodIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_periods/{task_period_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_period_id"+"}", url.PathEscape(parameterValueToString(r.taskPeriodId, "taskPeriodId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTaskPeriodsTaskPeriodIdPutRequest struct {
	ctx context.Context
	ApiService *TaskPeriodsAPIService
	taskPeriodId int64
	taskPeriodsPut *TaskPeriodsPut
}

func (r ApiTaskPeriodsTaskPeriodIdPutRequest) TaskPeriodsPut(taskPeriodsPut TaskPeriodsPut) ApiTaskPeriodsTaskPeriodIdPutRequest {
	r.taskPeriodsPut = &taskPeriodsPut
	return r
}

func (r ApiTaskPeriodsTaskPeriodIdPutRequest) Execute() (*TaskPeriods, *http.Response, error) {
	return r.ApiService.TaskPeriodsTaskPeriodIdPutExecute(r)
}

/*
TaskPeriodsTaskPeriodIdPut Method for TaskPeriodsTaskPeriodIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskPeriodId Model id
 @return ApiTaskPeriodsTaskPeriodIdPutRequest
*/
func (a *TaskPeriodsAPIService) TaskPeriodsTaskPeriodIdPut(ctx context.Context, taskPeriodId int64) ApiTaskPeriodsTaskPeriodIdPutRequest {
	return ApiTaskPeriodsTaskPeriodIdPutRequest{
		ApiService: a,
		ctx: ctx,
		taskPeriodId: taskPeriodId,
	}
}

// Execute executes the request
//  @return TaskPeriods
func (a *TaskPeriodsAPIService) TaskPeriodsTaskPeriodIdPutExecute(r ApiTaskPeriodsTaskPeriodIdPutRequest) (*TaskPeriods, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskPeriods
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskPeriodsAPIService.TaskPeriodsTaskPeriodIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_periods/{task_period_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_period_id"+"}", url.PathEscape(parameterValueToString(r.taskPeriodId, "taskPeriodId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskPeriodsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
