/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubprocessesDataPutSubprocessesDatum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubprocessesDataPutSubprocessesDatum{}

// SubprocessesDataPutSubprocessesDatum struct for SubprocessesDataPutSubprocessesDatum
type SubprocessesDataPutSubprocessesDatum struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	File *string `json:"file,omitempty"`
	// Note: This is a Foreign Key to `subprocesses.id`.<fk table='subprocesses' column='id'/>
	SubprocessId int32 `json:"subprocess_id"`
	// Note: This is a Foreign Key to `processes_data.id`.<fk table='processes_data' column='id'/>
	ProcessesDatumId int32 `json:"processes_datum_id"`
	Scopes interface{} `json:"scopes,omitempty"`
}

type _SubprocessesDataPutSubprocessesDatum SubprocessesDataPutSubprocessesDatum

// NewSubprocessesDataPutSubprocessesDatum instantiates a new SubprocessesDataPutSubprocessesDatum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubprocessesDataPutSubprocessesDatum(subprocessId int32, processesDatumId int32) *SubprocessesDataPutSubprocessesDatum {
	this := SubprocessesDataPutSubprocessesDatum{}
	this.SubprocessId = subprocessId
	this.ProcessesDatumId = processesDatumId
	return &this
}

// NewSubprocessesDataPutSubprocessesDatumWithDefaults instantiates a new SubprocessesDataPutSubprocessesDatum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubprocessesDataPutSubprocessesDatumWithDefaults() *SubprocessesDataPutSubprocessesDatum {
	this := SubprocessesDataPutSubprocessesDatum{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubprocessesDataPutSubprocessesDatum) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesDataPutSubprocessesDatum) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubprocessesDataPutSubprocessesDatum) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SubprocessesDataPutSubprocessesDatum) SetId(v int32) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SubprocessesDataPutSubprocessesDatum) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesDataPutSubprocessesDatum) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SubprocessesDataPutSubprocessesDatum) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *SubprocessesDataPutSubprocessesDatum) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SubprocessesDataPutSubprocessesDatum) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesDataPutSubprocessesDatum) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SubprocessesDataPutSubprocessesDatum) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *SubprocessesDataPutSubprocessesDatum) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *SubprocessesDataPutSubprocessesDatum) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesDataPutSubprocessesDatum) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *SubprocessesDataPutSubprocessesDatum) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *SubprocessesDataPutSubprocessesDatum) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *SubprocessesDataPutSubprocessesDatum) GetFile() string {
	if o == nil || IsNil(o.File) {
		var ret string
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubprocessesDataPutSubprocessesDatum) GetFileOk() (*string, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *SubprocessesDataPutSubprocessesDatum) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given string and assigns it to the File field.
func (o *SubprocessesDataPutSubprocessesDatum) SetFile(v string) {
	o.File = &v
}

// GetSubprocessId returns the SubprocessId field value
func (o *SubprocessesDataPutSubprocessesDatum) GetSubprocessId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SubprocessId
}

// GetSubprocessIdOk returns a tuple with the SubprocessId field value
// and a boolean to check if the value has been set.
func (o *SubprocessesDataPutSubprocessesDatum) GetSubprocessIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubprocessId, true
}

// SetSubprocessId sets field value
func (o *SubprocessesDataPutSubprocessesDatum) SetSubprocessId(v int32) {
	o.SubprocessId = v
}

// GetProcessesDatumId returns the ProcessesDatumId field value
func (o *SubprocessesDataPutSubprocessesDatum) GetProcessesDatumId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProcessesDatumId
}

// GetProcessesDatumIdOk returns a tuple with the ProcessesDatumId field value
// and a boolean to check if the value has been set.
func (o *SubprocessesDataPutSubprocessesDatum) GetProcessesDatumIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessesDatumId, true
}

// SetProcessesDatumId sets field value
func (o *SubprocessesDataPutSubprocessesDatum) SetProcessesDatumId(v int32) {
	o.ProcessesDatumId = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubprocessesDataPutSubprocessesDatum) GetScopes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubprocessesDataPutSubprocessesDatum) GetScopesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return &o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *SubprocessesDataPutSubprocessesDatum) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given interface{} and assigns it to the Scopes field.
func (o *SubprocessesDataPutSubprocessesDatum) SetScopes(v interface{}) {
	o.Scopes = v
}

func (o SubprocessesDataPutSubprocessesDatum) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubprocessesDataPutSubprocessesDatum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	toSerialize["subprocess_id"] = o.SubprocessId
	toSerialize["processes_datum_id"] = o.ProcessesDatumId
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

func (o *SubprocessesDataPutSubprocessesDatum) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subprocess_id",
		"processes_datum_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubprocessesDataPutSubprocessesDatum := _SubprocessesDataPutSubprocessesDatum{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubprocessesDataPutSubprocessesDatum)

	if err != nil {
		return err
	}

	*o = SubprocessesDataPutSubprocessesDatum(varSubprocessesDataPutSubprocessesDatum)

	return err
}

type NullableSubprocessesDataPutSubprocessesDatum struct {
	value *SubprocessesDataPutSubprocessesDatum
	isSet bool
}

func (v NullableSubprocessesDataPutSubprocessesDatum) Get() *SubprocessesDataPutSubprocessesDatum {
	return v.value
}

func (v *NullableSubprocessesDataPutSubprocessesDatum) Set(val *SubprocessesDataPutSubprocessesDatum) {
	v.value = val
	v.isSet = true
}

func (v NullableSubprocessesDataPutSubprocessesDatum) IsSet() bool {
	return v.isSet
}

func (v *NullableSubprocessesDataPutSubprocessesDatum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubprocessesDataPutSubprocessesDatum(val *SubprocessesDataPutSubprocessesDatum) *NullableSubprocessesDataPutSubprocessesDatum {
	return &NullableSubprocessesDataPutSubprocessesDatum{value: val, isSet: true}
}

func (v NullableSubprocessesDataPutSubprocessesDatum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubprocessesDataPutSubprocessesDatum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


