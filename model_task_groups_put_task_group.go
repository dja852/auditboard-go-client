/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaskGroupsPutTaskGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskGroupsPutTaskGroup{}

// TaskGroupsPutTaskGroup struct for TaskGroupsPutTaskGroup
type TaskGroupsPutTaskGroup struct {
	// Note: This is a Primary Key.<pk/>
	Id *int32 `json:"id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	// Note: This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
	CreatorUserId int32 `json:"creator_user_id"`
	// Note: This is a Foreign Key to `task_categories.id`.<fk table='task_categories' column='id'/>
	TaskCategoryId *int32 `json:"task_category_id,omitempty"`
	ArchivedAt *string `json:"archived_at,omitempty"`
	// Note: This is a Foreign Key to `task_periods.id`.<fk table='task_periods' column='id'/>
	TaskPeriodId *int32 `json:"task_period_id,omitempty"`
	// Note: This is a Foreign Key to `surveys.id`.<fk table='surveys' column='id'/>
	SurveyId *int32 `json:"survey_id,omitempty"`
	StartedAt *string `json:"started_at,omitempty"`
	Status *string `json:"status,omitempty"`
	Title *string `json:"title,omitempty"`
	AllowYesToAll bool `json:"allow_yes_to_all"`
	// Note: This is a Foreign Key to `test_sections.id`.<fk table='test_sections' column='id'/>
	TestSectionId *int32 `json:"test_section_id,omitempty"`
	EmailProjectStart interface{} `json:"email_project_start,omitempty"`
	EmailPreparerDigest interface{} `json:"email_preparer_digest,omitempty"`
	EmailReviewerDigest interface{} `json:"email_reviewer_digest,omitempty"`
	EmailAdminDigest interface{} `json:"email_admin_digest,omitempty"`
	Uid *string `json:"uid,omitempty"`
	ReviewerUsers interface{} `json:"reviewer_users,omitempty"`
	AssigneeUsers interface{} `json:"assignee_users,omitempty"`
	IsMultiReviewer *bool `json:"is_multi_reviewer,omitempty"`
	ProjectOptions interface{} `json:"project_options,omitempty"`
	IsManagedChange *bool `json:"is_managed_change,omitempty"`
	SubscriberUsers interface{} `json:"subscriber_users,omitempty"`
	EmailSubscriberDigest interface{} `json:"email_subscriber_digest,omitempty"`
	// Note: This is a Foreign Key to `assessments.id`.<fk table='assessments' column='id'/>
	AssessmentId *int32 `json:"assessment_id,omitempty"`
	AdditionalAssigneeUsers interface{} `json:"additional_assignee_users,omitempty"`
	AdditionalPreparersEnabled *bool `json:"additional_preparers_enabled,omitempty"`
	EmailAdditionalPreparerDigest interface{} `json:"email_additional_preparer_digest,omitempty"`
	// Note: This is a Foreign Key to `task_groups.id`.<fk table='task_groups' column='id'/>
	HistoricalProjectId *int32 `json:"historical_project_id,omitempty"`
	Scopes interface{} `json:"scopes"`
	ScheduledStartDate *string `json:"scheduled_start_date,omitempty"`
	Totals interface{} `json:"totals,omitempty"`
	ShortTitle *string `json:"short_title,omitempty"`
	// Note: This is a Foreign Key to `recurring_task_groups.id`.<fk table='recurring_task_groups' column='id'/>
	RecurringTaskGroupId *int32 `json:"recurring_task_group_id,omitempty"`
	// Note: This is a Foreign Key to `auditable_entities.id`.<fk table='auditable_entities' column='id'/>
	AuditableEntityId *int32 `json:"auditable_entity_id,omitempty"`
	MultiReviewerMode string `json:"multi_reviewer_mode"`
	RequiredReviewerCount *int32 `json:"required_reviewer_count,omitempty"`
	UserTotals interface{} `json:"user_totals,omitempty"`
}

type _TaskGroupsPutTaskGroup TaskGroupsPutTaskGroup

// NewTaskGroupsPutTaskGroup instantiates a new TaskGroupsPutTaskGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskGroupsPutTaskGroup(creatorUserId int32, allowYesToAll bool, scopes interface{}, multiReviewerMode string) *TaskGroupsPutTaskGroup {
	this := TaskGroupsPutTaskGroup{}
	this.CreatorUserId = creatorUserId
	this.AllowYesToAll = allowYesToAll
	var isMultiReviewer bool = false
	this.IsMultiReviewer = &isMultiReviewer
	var isManagedChange bool = false
	this.IsManagedChange = &isManagedChange
	var additionalPreparersEnabled bool = false
	this.AdditionalPreparersEnabled = &additionalPreparersEnabled
	this.Scopes = scopes
	this.MultiReviewerMode = multiReviewerMode
	return &this
}

// NewTaskGroupsPutTaskGroupWithDefaults instantiates a new TaskGroupsPutTaskGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskGroupsPutTaskGroupWithDefaults() *TaskGroupsPutTaskGroup {
	this := TaskGroupsPutTaskGroup{}
	var allowYesToAll bool = false
	this.AllowYesToAll = allowYesToAll
	var isMultiReviewer bool = false
	this.IsMultiReviewer = &isMultiReviewer
	var isManagedChange bool = false
	this.IsManagedChange = &isManagedChange
	var additionalPreparersEnabled bool = false
	this.AdditionalPreparersEnabled = &additionalPreparersEnabled
	var multiReviewerMode string = "sequential"
	this.MultiReviewerMode = multiReviewerMode
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TaskGroupsPutTaskGroup) SetId(v int32) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *TaskGroupsPutTaskGroup) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *TaskGroupsPutTaskGroup) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *TaskGroupsPutTaskGroup) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetCreatorUserId returns the CreatorUserId field value
func (o *TaskGroupsPutTaskGroup) GetCreatorUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatorUserId
}

// GetCreatorUserIdOk returns a tuple with the CreatorUserId field value
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetCreatorUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorUserId, true
}

// SetCreatorUserId sets field value
func (o *TaskGroupsPutTaskGroup) SetCreatorUserId(v int32) {
	o.CreatorUserId = v
}

// GetTaskCategoryId returns the TaskCategoryId field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetTaskCategoryId() int32 {
	if o == nil || IsNil(o.TaskCategoryId) {
		var ret int32
		return ret
	}
	return *o.TaskCategoryId
}

// GetTaskCategoryIdOk returns a tuple with the TaskCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetTaskCategoryIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TaskCategoryId) {
		return nil, false
	}
	return o.TaskCategoryId, true
}

// HasTaskCategoryId returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasTaskCategoryId() bool {
	if o != nil && !IsNil(o.TaskCategoryId) {
		return true
	}

	return false
}

// SetTaskCategoryId gets a reference to the given int32 and assigns it to the TaskCategoryId field.
func (o *TaskGroupsPutTaskGroup) SetTaskCategoryId(v int32) {
	o.TaskCategoryId = &v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetArchivedAt() string {
	if o == nil || IsNil(o.ArchivedAt) {
		var ret string
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetArchivedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ArchivedAt) {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasArchivedAt() bool {
	if o != nil && !IsNil(o.ArchivedAt) {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given string and assigns it to the ArchivedAt field.
func (o *TaskGroupsPutTaskGroup) SetArchivedAt(v string) {
	o.ArchivedAt = &v
}

// GetTaskPeriodId returns the TaskPeriodId field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetTaskPeriodId() int32 {
	if o == nil || IsNil(o.TaskPeriodId) {
		var ret int32
		return ret
	}
	return *o.TaskPeriodId
}

// GetTaskPeriodIdOk returns a tuple with the TaskPeriodId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetTaskPeriodIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TaskPeriodId) {
		return nil, false
	}
	return o.TaskPeriodId, true
}

// HasTaskPeriodId returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasTaskPeriodId() bool {
	if o != nil && !IsNil(o.TaskPeriodId) {
		return true
	}

	return false
}

// SetTaskPeriodId gets a reference to the given int32 and assigns it to the TaskPeriodId field.
func (o *TaskGroupsPutTaskGroup) SetTaskPeriodId(v int32) {
	o.TaskPeriodId = &v
}

// GetSurveyId returns the SurveyId field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetSurveyId() int32 {
	if o == nil || IsNil(o.SurveyId) {
		var ret int32
		return ret
	}
	return *o.SurveyId
}

// GetSurveyIdOk returns a tuple with the SurveyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetSurveyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SurveyId) {
		return nil, false
	}
	return o.SurveyId, true
}

// HasSurveyId returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasSurveyId() bool {
	if o != nil && !IsNil(o.SurveyId) {
		return true
	}

	return false
}

// SetSurveyId gets a reference to the given int32 and assigns it to the SurveyId field.
func (o *TaskGroupsPutTaskGroup) SetSurveyId(v int32) {
	o.SurveyId = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetStartedAt() string {
	if o == nil || IsNil(o.StartedAt) {
		var ret string
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetStartedAtOk() (*string, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given string and assigns it to the StartedAt field.
func (o *TaskGroupsPutTaskGroup) SetStartedAt(v string) {
	o.StartedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TaskGroupsPutTaskGroup) SetStatus(v string) {
	o.Status = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *TaskGroupsPutTaskGroup) SetTitle(v string) {
	o.Title = &v
}

// GetAllowYesToAll returns the AllowYesToAll field value
func (o *TaskGroupsPutTaskGroup) GetAllowYesToAll() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowYesToAll
}

// GetAllowYesToAllOk returns a tuple with the AllowYesToAll field value
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetAllowYesToAllOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowYesToAll, true
}

// SetAllowYesToAll sets field value
func (o *TaskGroupsPutTaskGroup) SetAllowYesToAll(v bool) {
	o.AllowYesToAll = v
}

// GetTestSectionId returns the TestSectionId field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetTestSectionId() int32 {
	if o == nil || IsNil(o.TestSectionId) {
		var ret int32
		return ret
	}
	return *o.TestSectionId
}

// GetTestSectionIdOk returns a tuple with the TestSectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetTestSectionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TestSectionId) {
		return nil, false
	}
	return o.TestSectionId, true
}

// HasTestSectionId returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasTestSectionId() bool {
	if o != nil && !IsNil(o.TestSectionId) {
		return true
	}

	return false
}

// SetTestSectionId gets a reference to the given int32 and assigns it to the TestSectionId field.
func (o *TaskGroupsPutTaskGroup) SetTestSectionId(v int32) {
	o.TestSectionId = &v
}

// GetEmailProjectStart returns the EmailProjectStart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskGroupsPutTaskGroup) GetEmailProjectStart() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EmailProjectStart
}

// GetEmailProjectStartOk returns a tuple with the EmailProjectStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskGroupsPutTaskGroup) GetEmailProjectStartOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EmailProjectStart) {
		return nil, false
	}
	return &o.EmailProjectStart, true
}

// HasEmailProjectStart returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasEmailProjectStart() bool {
	if o != nil && !IsNil(o.EmailProjectStart) {
		return true
	}

	return false
}

// SetEmailProjectStart gets a reference to the given interface{} and assigns it to the EmailProjectStart field.
func (o *TaskGroupsPutTaskGroup) SetEmailProjectStart(v interface{}) {
	o.EmailProjectStart = v
}

// GetEmailPreparerDigest returns the EmailPreparerDigest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskGroupsPutTaskGroup) GetEmailPreparerDigest() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EmailPreparerDigest
}

// GetEmailPreparerDigestOk returns a tuple with the EmailPreparerDigest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskGroupsPutTaskGroup) GetEmailPreparerDigestOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EmailPreparerDigest) {
		return nil, false
	}
	return &o.EmailPreparerDigest, true
}

// HasEmailPreparerDigest returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasEmailPreparerDigest() bool {
	if o != nil && !IsNil(o.EmailPreparerDigest) {
		return true
	}

	return false
}

// SetEmailPreparerDigest gets a reference to the given interface{} and assigns it to the EmailPreparerDigest field.
func (o *TaskGroupsPutTaskGroup) SetEmailPreparerDigest(v interface{}) {
	o.EmailPreparerDigest = v
}

// GetEmailReviewerDigest returns the EmailReviewerDigest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskGroupsPutTaskGroup) GetEmailReviewerDigest() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EmailReviewerDigest
}

// GetEmailReviewerDigestOk returns a tuple with the EmailReviewerDigest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskGroupsPutTaskGroup) GetEmailReviewerDigestOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EmailReviewerDigest) {
		return nil, false
	}
	return &o.EmailReviewerDigest, true
}

// HasEmailReviewerDigest returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasEmailReviewerDigest() bool {
	if o != nil && !IsNil(o.EmailReviewerDigest) {
		return true
	}

	return false
}

// SetEmailReviewerDigest gets a reference to the given interface{} and assigns it to the EmailReviewerDigest field.
func (o *TaskGroupsPutTaskGroup) SetEmailReviewerDigest(v interface{}) {
	o.EmailReviewerDigest = v
}

// GetEmailAdminDigest returns the EmailAdminDigest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskGroupsPutTaskGroup) GetEmailAdminDigest() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EmailAdminDigest
}

// GetEmailAdminDigestOk returns a tuple with the EmailAdminDigest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskGroupsPutTaskGroup) GetEmailAdminDigestOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EmailAdminDigest) {
		return nil, false
	}
	return &o.EmailAdminDigest, true
}

// HasEmailAdminDigest returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasEmailAdminDigest() bool {
	if o != nil && !IsNil(o.EmailAdminDigest) {
		return true
	}

	return false
}

// SetEmailAdminDigest gets a reference to the given interface{} and assigns it to the EmailAdminDigest field.
func (o *TaskGroupsPutTaskGroup) SetEmailAdminDigest(v interface{}) {
	o.EmailAdminDigest = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *TaskGroupsPutTaskGroup) SetUid(v string) {
	o.Uid = &v
}

// GetReviewerUsers returns the ReviewerUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskGroupsPutTaskGroup) GetReviewerUsers() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ReviewerUsers
}

// GetReviewerUsersOk returns a tuple with the ReviewerUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskGroupsPutTaskGroup) GetReviewerUsersOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ReviewerUsers) {
		return nil, false
	}
	return &o.ReviewerUsers, true
}

// HasReviewerUsers returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasReviewerUsers() bool {
	if o != nil && !IsNil(o.ReviewerUsers) {
		return true
	}

	return false
}

// SetReviewerUsers gets a reference to the given interface{} and assigns it to the ReviewerUsers field.
func (o *TaskGroupsPutTaskGroup) SetReviewerUsers(v interface{}) {
	o.ReviewerUsers = v
}

// GetAssigneeUsers returns the AssigneeUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskGroupsPutTaskGroup) GetAssigneeUsers() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AssigneeUsers
}

// GetAssigneeUsersOk returns a tuple with the AssigneeUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskGroupsPutTaskGroup) GetAssigneeUsersOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AssigneeUsers) {
		return nil, false
	}
	return &o.AssigneeUsers, true
}

// HasAssigneeUsers returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasAssigneeUsers() bool {
	if o != nil && !IsNil(o.AssigneeUsers) {
		return true
	}

	return false
}

// SetAssigneeUsers gets a reference to the given interface{} and assigns it to the AssigneeUsers field.
func (o *TaskGroupsPutTaskGroup) SetAssigneeUsers(v interface{}) {
	o.AssigneeUsers = v
}

// GetIsMultiReviewer returns the IsMultiReviewer field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetIsMultiReviewer() bool {
	if o == nil || IsNil(o.IsMultiReviewer) {
		var ret bool
		return ret
	}
	return *o.IsMultiReviewer
}

// GetIsMultiReviewerOk returns a tuple with the IsMultiReviewer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetIsMultiReviewerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMultiReviewer) {
		return nil, false
	}
	return o.IsMultiReviewer, true
}

// HasIsMultiReviewer returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasIsMultiReviewer() bool {
	if o != nil && !IsNil(o.IsMultiReviewer) {
		return true
	}

	return false
}

// SetIsMultiReviewer gets a reference to the given bool and assigns it to the IsMultiReviewer field.
func (o *TaskGroupsPutTaskGroup) SetIsMultiReviewer(v bool) {
	o.IsMultiReviewer = &v
}

// GetProjectOptions returns the ProjectOptions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskGroupsPutTaskGroup) GetProjectOptions() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ProjectOptions
}

// GetProjectOptionsOk returns a tuple with the ProjectOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskGroupsPutTaskGroup) GetProjectOptionsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ProjectOptions) {
		return nil, false
	}
	return &o.ProjectOptions, true
}

// HasProjectOptions returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasProjectOptions() bool {
	if o != nil && !IsNil(o.ProjectOptions) {
		return true
	}

	return false
}

// SetProjectOptions gets a reference to the given interface{} and assigns it to the ProjectOptions field.
func (o *TaskGroupsPutTaskGroup) SetProjectOptions(v interface{}) {
	o.ProjectOptions = v
}

// GetIsManagedChange returns the IsManagedChange field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetIsManagedChange() bool {
	if o == nil || IsNil(o.IsManagedChange) {
		var ret bool
		return ret
	}
	return *o.IsManagedChange
}

// GetIsManagedChangeOk returns a tuple with the IsManagedChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetIsManagedChangeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsManagedChange) {
		return nil, false
	}
	return o.IsManagedChange, true
}

// HasIsManagedChange returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasIsManagedChange() bool {
	if o != nil && !IsNil(o.IsManagedChange) {
		return true
	}

	return false
}

// SetIsManagedChange gets a reference to the given bool and assigns it to the IsManagedChange field.
func (o *TaskGroupsPutTaskGroup) SetIsManagedChange(v bool) {
	o.IsManagedChange = &v
}

// GetSubscriberUsers returns the SubscriberUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskGroupsPutTaskGroup) GetSubscriberUsers() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SubscriberUsers
}

// GetSubscriberUsersOk returns a tuple with the SubscriberUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskGroupsPutTaskGroup) GetSubscriberUsersOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SubscriberUsers) {
		return nil, false
	}
	return &o.SubscriberUsers, true
}

// HasSubscriberUsers returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasSubscriberUsers() bool {
	if o != nil && !IsNil(o.SubscriberUsers) {
		return true
	}

	return false
}

// SetSubscriberUsers gets a reference to the given interface{} and assigns it to the SubscriberUsers field.
func (o *TaskGroupsPutTaskGroup) SetSubscriberUsers(v interface{}) {
	o.SubscriberUsers = v
}

// GetEmailSubscriberDigest returns the EmailSubscriberDigest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskGroupsPutTaskGroup) GetEmailSubscriberDigest() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EmailSubscriberDigest
}

// GetEmailSubscriberDigestOk returns a tuple with the EmailSubscriberDigest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskGroupsPutTaskGroup) GetEmailSubscriberDigestOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EmailSubscriberDigest) {
		return nil, false
	}
	return &o.EmailSubscriberDigest, true
}

// HasEmailSubscriberDigest returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasEmailSubscriberDigest() bool {
	if o != nil && !IsNil(o.EmailSubscriberDigest) {
		return true
	}

	return false
}

// SetEmailSubscriberDigest gets a reference to the given interface{} and assigns it to the EmailSubscriberDigest field.
func (o *TaskGroupsPutTaskGroup) SetEmailSubscriberDigest(v interface{}) {
	o.EmailSubscriberDigest = v
}

// GetAssessmentId returns the AssessmentId field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetAssessmentId() int32 {
	if o == nil || IsNil(o.AssessmentId) {
		var ret int32
		return ret
	}
	return *o.AssessmentId
}

// GetAssessmentIdOk returns a tuple with the AssessmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetAssessmentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AssessmentId) {
		return nil, false
	}
	return o.AssessmentId, true
}

// HasAssessmentId returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasAssessmentId() bool {
	if o != nil && !IsNil(o.AssessmentId) {
		return true
	}

	return false
}

// SetAssessmentId gets a reference to the given int32 and assigns it to the AssessmentId field.
func (o *TaskGroupsPutTaskGroup) SetAssessmentId(v int32) {
	o.AssessmentId = &v
}

// GetAdditionalAssigneeUsers returns the AdditionalAssigneeUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskGroupsPutTaskGroup) GetAdditionalAssigneeUsers() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AdditionalAssigneeUsers
}

// GetAdditionalAssigneeUsersOk returns a tuple with the AdditionalAssigneeUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskGroupsPutTaskGroup) GetAdditionalAssigneeUsersOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AdditionalAssigneeUsers) {
		return nil, false
	}
	return &o.AdditionalAssigneeUsers, true
}

// HasAdditionalAssigneeUsers returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasAdditionalAssigneeUsers() bool {
	if o != nil && !IsNil(o.AdditionalAssigneeUsers) {
		return true
	}

	return false
}

// SetAdditionalAssigneeUsers gets a reference to the given interface{} and assigns it to the AdditionalAssigneeUsers field.
func (o *TaskGroupsPutTaskGroup) SetAdditionalAssigneeUsers(v interface{}) {
	o.AdditionalAssigneeUsers = v
}

// GetAdditionalPreparersEnabled returns the AdditionalPreparersEnabled field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetAdditionalPreparersEnabled() bool {
	if o == nil || IsNil(o.AdditionalPreparersEnabled) {
		var ret bool
		return ret
	}
	return *o.AdditionalPreparersEnabled
}

// GetAdditionalPreparersEnabledOk returns a tuple with the AdditionalPreparersEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetAdditionalPreparersEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AdditionalPreparersEnabled) {
		return nil, false
	}
	return o.AdditionalPreparersEnabled, true
}

// HasAdditionalPreparersEnabled returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasAdditionalPreparersEnabled() bool {
	if o != nil && !IsNil(o.AdditionalPreparersEnabled) {
		return true
	}

	return false
}

// SetAdditionalPreparersEnabled gets a reference to the given bool and assigns it to the AdditionalPreparersEnabled field.
func (o *TaskGroupsPutTaskGroup) SetAdditionalPreparersEnabled(v bool) {
	o.AdditionalPreparersEnabled = &v
}

// GetEmailAdditionalPreparerDigest returns the EmailAdditionalPreparerDigest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskGroupsPutTaskGroup) GetEmailAdditionalPreparerDigest() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EmailAdditionalPreparerDigest
}

// GetEmailAdditionalPreparerDigestOk returns a tuple with the EmailAdditionalPreparerDigest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskGroupsPutTaskGroup) GetEmailAdditionalPreparerDigestOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EmailAdditionalPreparerDigest) {
		return nil, false
	}
	return &o.EmailAdditionalPreparerDigest, true
}

// HasEmailAdditionalPreparerDigest returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasEmailAdditionalPreparerDigest() bool {
	if o != nil && !IsNil(o.EmailAdditionalPreparerDigest) {
		return true
	}

	return false
}

// SetEmailAdditionalPreparerDigest gets a reference to the given interface{} and assigns it to the EmailAdditionalPreparerDigest field.
func (o *TaskGroupsPutTaskGroup) SetEmailAdditionalPreparerDigest(v interface{}) {
	o.EmailAdditionalPreparerDigest = v
}

// GetHistoricalProjectId returns the HistoricalProjectId field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetHistoricalProjectId() int32 {
	if o == nil || IsNil(o.HistoricalProjectId) {
		var ret int32
		return ret
	}
	return *o.HistoricalProjectId
}

// GetHistoricalProjectIdOk returns a tuple with the HistoricalProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetHistoricalProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.HistoricalProjectId) {
		return nil, false
	}
	return o.HistoricalProjectId, true
}

// HasHistoricalProjectId returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasHistoricalProjectId() bool {
	if o != nil && !IsNil(o.HistoricalProjectId) {
		return true
	}

	return false
}

// SetHistoricalProjectId gets a reference to the given int32 and assigns it to the HistoricalProjectId field.
func (o *TaskGroupsPutTaskGroup) SetHistoricalProjectId(v int32) {
	o.HistoricalProjectId = &v
}

// GetScopes returns the Scopes field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *TaskGroupsPutTaskGroup) GetScopes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskGroupsPutTaskGroup) GetScopesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return &o.Scopes, true
}

// SetScopes sets field value
func (o *TaskGroupsPutTaskGroup) SetScopes(v interface{}) {
	o.Scopes = v
}

// GetScheduledStartDate returns the ScheduledStartDate field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetScheduledStartDate() string {
	if o == nil || IsNil(o.ScheduledStartDate) {
		var ret string
		return ret
	}
	return *o.ScheduledStartDate
}

// GetScheduledStartDateOk returns a tuple with the ScheduledStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetScheduledStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduledStartDate) {
		return nil, false
	}
	return o.ScheduledStartDate, true
}

// HasScheduledStartDate returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasScheduledStartDate() bool {
	if o != nil && !IsNil(o.ScheduledStartDate) {
		return true
	}

	return false
}

// SetScheduledStartDate gets a reference to the given string and assigns it to the ScheduledStartDate field.
func (o *TaskGroupsPutTaskGroup) SetScheduledStartDate(v string) {
	o.ScheduledStartDate = &v
}

// GetTotals returns the Totals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskGroupsPutTaskGroup) GetTotals() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Totals
}

// GetTotalsOk returns a tuple with the Totals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskGroupsPutTaskGroup) GetTotalsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Totals) {
		return nil, false
	}
	return &o.Totals, true
}

// HasTotals returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasTotals() bool {
	if o != nil && !IsNil(o.Totals) {
		return true
	}

	return false
}

// SetTotals gets a reference to the given interface{} and assigns it to the Totals field.
func (o *TaskGroupsPutTaskGroup) SetTotals(v interface{}) {
	o.Totals = v
}

// GetShortTitle returns the ShortTitle field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetShortTitle() string {
	if o == nil || IsNil(o.ShortTitle) {
		var ret string
		return ret
	}
	return *o.ShortTitle
}

// GetShortTitleOk returns a tuple with the ShortTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetShortTitleOk() (*string, bool) {
	if o == nil || IsNil(o.ShortTitle) {
		return nil, false
	}
	return o.ShortTitle, true
}

// HasShortTitle returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasShortTitle() bool {
	if o != nil && !IsNil(o.ShortTitle) {
		return true
	}

	return false
}

// SetShortTitle gets a reference to the given string and assigns it to the ShortTitle field.
func (o *TaskGroupsPutTaskGroup) SetShortTitle(v string) {
	o.ShortTitle = &v
}

// GetRecurringTaskGroupId returns the RecurringTaskGroupId field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetRecurringTaskGroupId() int32 {
	if o == nil || IsNil(o.RecurringTaskGroupId) {
		var ret int32
		return ret
	}
	return *o.RecurringTaskGroupId
}

// GetRecurringTaskGroupIdOk returns a tuple with the RecurringTaskGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetRecurringTaskGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RecurringTaskGroupId) {
		return nil, false
	}
	return o.RecurringTaskGroupId, true
}

// HasRecurringTaskGroupId returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasRecurringTaskGroupId() bool {
	if o != nil && !IsNil(o.RecurringTaskGroupId) {
		return true
	}

	return false
}

// SetRecurringTaskGroupId gets a reference to the given int32 and assigns it to the RecurringTaskGroupId field.
func (o *TaskGroupsPutTaskGroup) SetRecurringTaskGroupId(v int32) {
	o.RecurringTaskGroupId = &v
}

// GetAuditableEntityId returns the AuditableEntityId field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetAuditableEntityId() int32 {
	if o == nil || IsNil(o.AuditableEntityId) {
		var ret int32
		return ret
	}
	return *o.AuditableEntityId
}

// GetAuditableEntityIdOk returns a tuple with the AuditableEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetAuditableEntityIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AuditableEntityId) {
		return nil, false
	}
	return o.AuditableEntityId, true
}

// HasAuditableEntityId returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasAuditableEntityId() bool {
	if o != nil && !IsNil(o.AuditableEntityId) {
		return true
	}

	return false
}

// SetAuditableEntityId gets a reference to the given int32 and assigns it to the AuditableEntityId field.
func (o *TaskGroupsPutTaskGroup) SetAuditableEntityId(v int32) {
	o.AuditableEntityId = &v
}

// GetMultiReviewerMode returns the MultiReviewerMode field value
func (o *TaskGroupsPutTaskGroup) GetMultiReviewerMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MultiReviewerMode
}

// GetMultiReviewerModeOk returns a tuple with the MultiReviewerMode field value
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetMultiReviewerModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MultiReviewerMode, true
}

// SetMultiReviewerMode sets field value
func (o *TaskGroupsPutTaskGroup) SetMultiReviewerMode(v string) {
	o.MultiReviewerMode = v
}

// GetRequiredReviewerCount returns the RequiredReviewerCount field value if set, zero value otherwise.
func (o *TaskGroupsPutTaskGroup) GetRequiredReviewerCount() int32 {
	if o == nil || IsNil(o.RequiredReviewerCount) {
		var ret int32
		return ret
	}
	return *o.RequiredReviewerCount
}

// GetRequiredReviewerCountOk returns a tuple with the RequiredReviewerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupsPutTaskGroup) GetRequiredReviewerCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RequiredReviewerCount) {
		return nil, false
	}
	return o.RequiredReviewerCount, true
}

// HasRequiredReviewerCount returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasRequiredReviewerCount() bool {
	if o != nil && !IsNil(o.RequiredReviewerCount) {
		return true
	}

	return false
}

// SetRequiredReviewerCount gets a reference to the given int32 and assigns it to the RequiredReviewerCount field.
func (o *TaskGroupsPutTaskGroup) SetRequiredReviewerCount(v int32) {
	o.RequiredReviewerCount = &v
}

// GetUserTotals returns the UserTotals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskGroupsPutTaskGroup) GetUserTotals() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.UserTotals
}

// GetUserTotalsOk returns a tuple with the UserTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskGroupsPutTaskGroup) GetUserTotalsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.UserTotals) {
		return nil, false
	}
	return &o.UserTotals, true
}

// HasUserTotals returns a boolean if a field has been set.
func (o *TaskGroupsPutTaskGroup) HasUserTotals() bool {
	if o != nil && !IsNil(o.UserTotals) {
		return true
	}

	return false
}

// SetUserTotals gets a reference to the given interface{} and assigns it to the UserTotals field.
func (o *TaskGroupsPutTaskGroup) SetUserTotals(v interface{}) {
	o.UserTotals = v
}

func (o TaskGroupsPutTaskGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskGroupsPutTaskGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	toSerialize["creator_user_id"] = o.CreatorUserId
	if !IsNil(o.TaskCategoryId) {
		toSerialize["task_category_id"] = o.TaskCategoryId
	}
	if !IsNil(o.ArchivedAt) {
		toSerialize["archived_at"] = o.ArchivedAt
	}
	if !IsNil(o.TaskPeriodId) {
		toSerialize["task_period_id"] = o.TaskPeriodId
	}
	if !IsNil(o.SurveyId) {
		toSerialize["survey_id"] = o.SurveyId
	}
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	toSerialize["allow_yes_to_all"] = o.AllowYesToAll
	if !IsNil(o.TestSectionId) {
		toSerialize["test_section_id"] = o.TestSectionId
	}
	if o.EmailProjectStart != nil {
		toSerialize["email_project_start"] = o.EmailProjectStart
	}
	if o.EmailPreparerDigest != nil {
		toSerialize["email_preparer_digest"] = o.EmailPreparerDigest
	}
	if o.EmailReviewerDigest != nil {
		toSerialize["email_reviewer_digest"] = o.EmailReviewerDigest
	}
	if o.EmailAdminDigest != nil {
		toSerialize["email_admin_digest"] = o.EmailAdminDigest
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if o.ReviewerUsers != nil {
		toSerialize["reviewer_users"] = o.ReviewerUsers
	}
	if o.AssigneeUsers != nil {
		toSerialize["assignee_users"] = o.AssigneeUsers
	}
	if !IsNil(o.IsMultiReviewer) {
		toSerialize["is_multi_reviewer"] = o.IsMultiReviewer
	}
	if o.ProjectOptions != nil {
		toSerialize["project_options"] = o.ProjectOptions
	}
	if !IsNil(o.IsManagedChange) {
		toSerialize["is_managed_change"] = o.IsManagedChange
	}
	if o.SubscriberUsers != nil {
		toSerialize["subscriber_users"] = o.SubscriberUsers
	}
	if o.EmailSubscriberDigest != nil {
		toSerialize["email_subscriber_digest"] = o.EmailSubscriberDigest
	}
	if !IsNil(o.AssessmentId) {
		toSerialize["assessment_id"] = o.AssessmentId
	}
	if o.AdditionalAssigneeUsers != nil {
		toSerialize["additional_assignee_users"] = o.AdditionalAssigneeUsers
	}
	if !IsNil(o.AdditionalPreparersEnabled) {
		toSerialize["additional_preparers_enabled"] = o.AdditionalPreparersEnabled
	}
	if o.EmailAdditionalPreparerDigest != nil {
		toSerialize["email_additional_preparer_digest"] = o.EmailAdditionalPreparerDigest
	}
	if !IsNil(o.HistoricalProjectId) {
		toSerialize["historical_project_id"] = o.HistoricalProjectId
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.ScheduledStartDate) {
		toSerialize["scheduled_start_date"] = o.ScheduledStartDate
	}
	if o.Totals != nil {
		toSerialize["totals"] = o.Totals
	}
	if !IsNil(o.ShortTitle) {
		toSerialize["short_title"] = o.ShortTitle
	}
	if !IsNil(o.RecurringTaskGroupId) {
		toSerialize["recurring_task_group_id"] = o.RecurringTaskGroupId
	}
	if !IsNil(o.AuditableEntityId) {
		toSerialize["auditable_entity_id"] = o.AuditableEntityId
	}
	toSerialize["multi_reviewer_mode"] = o.MultiReviewerMode
	if !IsNil(o.RequiredReviewerCount) {
		toSerialize["required_reviewer_count"] = o.RequiredReviewerCount
	}
	if o.UserTotals != nil {
		toSerialize["user_totals"] = o.UserTotals
	}
	return toSerialize, nil
}

func (o *TaskGroupsPutTaskGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"creator_user_id",
		"allow_yes_to_all",
		"scopes",
		"multi_reviewer_mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskGroupsPutTaskGroup := _TaskGroupsPutTaskGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskGroupsPutTaskGroup)

	if err != nil {
		return err
	}

	*o = TaskGroupsPutTaskGroup(varTaskGroupsPutTaskGroup)

	return err
}

type NullableTaskGroupsPutTaskGroup struct {
	value *TaskGroupsPutTaskGroup
	isSet bool
}

func (v NullableTaskGroupsPutTaskGroup) Get() *TaskGroupsPutTaskGroup {
	return v.value
}

func (v *NullableTaskGroupsPutTaskGroup) Set(val *TaskGroupsPutTaskGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskGroupsPutTaskGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskGroupsPutTaskGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskGroupsPutTaskGroup(val *TaskGroupsPutTaskGroup) *NullableTaskGroupsPutTaskGroup {
	return &NullableTaskGroupsPutTaskGroup{value: val, isSet: true}
}

func (v NullableTaskGroupsPutTaskGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskGroupsPutTaskGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


