/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"encoding/json"
)

// checks if the ControlsDataArchivesPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsDataArchivesPut{}

// ControlsDataArchivesPut struct for ControlsDataArchivesPut
type ControlsDataArchivesPut struct {
	ControlsDataArchive *ControlsDataArchivesPutControlsDataArchive `json:"controls_data_archive,omitempty"`
	PreviousValues *ControlsDataArchivesPutPreviousValues `json:"previous_values,omitempty"`
}

// NewControlsDataArchivesPut instantiates a new ControlsDataArchivesPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsDataArchivesPut() *ControlsDataArchivesPut {
	this := ControlsDataArchivesPut{}
	return &this
}

// NewControlsDataArchivesPutWithDefaults instantiates a new ControlsDataArchivesPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsDataArchivesPutWithDefaults() *ControlsDataArchivesPut {
	this := ControlsDataArchivesPut{}
	return &this
}

// GetControlsDataArchive returns the ControlsDataArchive field value if set, zero value otherwise.
func (o *ControlsDataArchivesPut) GetControlsDataArchive() ControlsDataArchivesPutControlsDataArchive {
	if o == nil || IsNil(o.ControlsDataArchive) {
		var ret ControlsDataArchivesPutControlsDataArchive
		return ret
	}
	return *o.ControlsDataArchive
}

// GetControlsDataArchiveOk returns a tuple with the ControlsDataArchive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPut) GetControlsDataArchiveOk() (*ControlsDataArchivesPutControlsDataArchive, bool) {
	if o == nil || IsNil(o.ControlsDataArchive) {
		return nil, false
	}
	return o.ControlsDataArchive, true
}

// HasControlsDataArchive returns a boolean if a field has been set.
func (o *ControlsDataArchivesPut) HasControlsDataArchive() bool {
	if o != nil && !IsNil(o.ControlsDataArchive) {
		return true
	}

	return false
}

// SetControlsDataArchive gets a reference to the given ControlsDataArchivesPutControlsDataArchive and assigns it to the ControlsDataArchive field.
func (o *ControlsDataArchivesPut) SetControlsDataArchive(v ControlsDataArchivesPutControlsDataArchive) {
	o.ControlsDataArchive = &v
}

// GetPreviousValues returns the PreviousValues field value if set, zero value otherwise.
func (o *ControlsDataArchivesPut) GetPreviousValues() ControlsDataArchivesPutPreviousValues {
	if o == nil || IsNil(o.PreviousValues) {
		var ret ControlsDataArchivesPutPreviousValues
		return ret
	}
	return *o.PreviousValues
}

// GetPreviousValuesOk returns a tuple with the PreviousValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsDataArchivesPut) GetPreviousValuesOk() (*ControlsDataArchivesPutPreviousValues, bool) {
	if o == nil || IsNil(o.PreviousValues) {
		return nil, false
	}
	return o.PreviousValues, true
}

// HasPreviousValues returns a boolean if a field has been set.
func (o *ControlsDataArchivesPut) HasPreviousValues() bool {
	if o != nil && !IsNil(o.PreviousValues) {
		return true
	}

	return false
}

// SetPreviousValues gets a reference to the given ControlsDataArchivesPutPreviousValues and assigns it to the PreviousValues field.
func (o *ControlsDataArchivesPut) SetPreviousValues(v ControlsDataArchivesPutPreviousValues) {
	o.PreviousValues = &v
}

func (o ControlsDataArchivesPut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsDataArchivesPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ControlsDataArchive) {
		toSerialize["controls_data_archive"] = o.ControlsDataArchive
	}
	if !IsNil(o.PreviousValues) {
		toSerialize["previous_values"] = o.PreviousValues
	}
	return toSerialize, nil
}

type NullableControlsDataArchivesPut struct {
	value *ControlsDataArchivesPut
	isSet bool
}

func (v NullableControlsDataArchivesPut) Get() *ControlsDataArchivesPut {
	return v.value
}

func (v *NullableControlsDataArchivesPut) Set(val *ControlsDataArchivesPut) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsDataArchivesPut) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsDataArchivesPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsDataArchivesPut(val *ControlsDataArchivesPut) *NullableControlsDataArchivesPut {
	return &NullableControlsDataArchivesPut{value: val, isSet: true}
}

func (v NullableControlsDataArchivesPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsDataArchivesPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


