/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AllowedTeamsAPIService AllowedTeamsAPI service
type AllowedTeamsAPIService service

type ApiAllowedTeamsAllowedTeamIdDeleteRequest struct {
	ctx context.Context
	ApiService *AllowedTeamsAPIService
	allowedTeamId int64
}

func (r ApiAllowedTeamsAllowedTeamIdDeleteRequest) Execute() (*AllowedTeams, *http.Response, error) {
	return r.ApiService.AllowedTeamsAllowedTeamIdDeleteExecute(r)
}

/*
AllowedTeamsAllowedTeamIdDelete Method for AllowedTeamsAllowedTeamIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param allowedTeamId Model id
 @return ApiAllowedTeamsAllowedTeamIdDeleteRequest
*/
func (a *AllowedTeamsAPIService) AllowedTeamsAllowedTeamIdDelete(ctx context.Context, allowedTeamId int64) ApiAllowedTeamsAllowedTeamIdDeleteRequest {
	return ApiAllowedTeamsAllowedTeamIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		allowedTeamId: allowedTeamId,
	}
}

// Execute executes the request
//  @return AllowedTeams
func (a *AllowedTeamsAPIService) AllowedTeamsAllowedTeamIdDeleteExecute(r ApiAllowedTeamsAllowedTeamIdDeleteRequest) (*AllowedTeams, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllowedTeams
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedTeamsAPIService.AllowedTeamsAllowedTeamIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/allowed_teams/{allowed_team_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"allowed_team_id"+"}", url.PathEscape(parameterValueToString(r.allowedTeamId, "allowedTeamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAllowedTeamsAllowedTeamIdGetRequest struct {
	ctx context.Context
	ApiService *AllowedTeamsAPIService
	allowedTeamId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAllowedTeamsAllowedTeamIdGetRequest) Include(include []string) ApiAllowedTeamsAllowedTeamIdGetRequest {
	r.include = &include
	return r
}

func (r ApiAllowedTeamsAllowedTeamIdGetRequest) Execute() (*AllowedTeams, *http.Response, error) {
	return r.ApiService.AllowedTeamsAllowedTeamIdGetExecute(r)
}

/*
AllowedTeamsAllowedTeamIdGet Method for AllowedTeamsAllowedTeamIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param allowedTeamId Model id
 @return ApiAllowedTeamsAllowedTeamIdGetRequest
*/
func (a *AllowedTeamsAPIService) AllowedTeamsAllowedTeamIdGet(ctx context.Context, allowedTeamId int64) ApiAllowedTeamsAllowedTeamIdGetRequest {
	return ApiAllowedTeamsAllowedTeamIdGetRequest{
		ApiService: a,
		ctx: ctx,
		allowedTeamId: allowedTeamId,
	}
}

// Execute executes the request
//  @return AllowedTeams
func (a *AllowedTeamsAPIService) AllowedTeamsAllowedTeamIdGetExecute(r ApiAllowedTeamsAllowedTeamIdGetRequest) (*AllowedTeams, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllowedTeams
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedTeamsAPIService.AllowedTeamsAllowedTeamIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/allowed_teams/{allowed_team_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"allowed_team_id"+"}", url.PathEscape(parameterValueToString(r.allowedTeamId, "allowedTeamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAllowedTeamsAllowedTeamIdPutRequest struct {
	ctx context.Context
	ApiService *AllowedTeamsAPIService
	allowedTeamId int64
	allowedTeamsPut *AllowedTeamsPut
}

func (r ApiAllowedTeamsAllowedTeamIdPutRequest) AllowedTeamsPut(allowedTeamsPut AllowedTeamsPut) ApiAllowedTeamsAllowedTeamIdPutRequest {
	r.allowedTeamsPut = &allowedTeamsPut
	return r
}

func (r ApiAllowedTeamsAllowedTeamIdPutRequest) Execute() (*AllowedTeams, *http.Response, error) {
	return r.ApiService.AllowedTeamsAllowedTeamIdPutExecute(r)
}

/*
AllowedTeamsAllowedTeamIdPut Method for AllowedTeamsAllowedTeamIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param allowedTeamId Model id
 @return ApiAllowedTeamsAllowedTeamIdPutRequest
*/
func (a *AllowedTeamsAPIService) AllowedTeamsAllowedTeamIdPut(ctx context.Context, allowedTeamId int64) ApiAllowedTeamsAllowedTeamIdPutRequest {
	return ApiAllowedTeamsAllowedTeamIdPutRequest{
		ApiService: a,
		ctx: ctx,
		allowedTeamId: allowedTeamId,
	}
}

// Execute executes the request
//  @return AllowedTeams
func (a *AllowedTeamsAPIService) AllowedTeamsAllowedTeamIdPutExecute(r ApiAllowedTeamsAllowedTeamIdPutRequest) (*AllowedTeams, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllowedTeams
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedTeamsAPIService.AllowedTeamsAllowedTeamIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/allowed_teams/{allowed_team_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"allowed_team_id"+"}", url.PathEscape(parameterValueToString(r.allowedTeamId, "allowedTeamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.allowedTeamsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAllowedTeamsGetRequest struct {
	ctx context.Context
	ApiService *AllowedTeamsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiAllowedTeamsGetRequest) Include(include []string) ApiAllowedTeamsGetRequest {
	r.include = &include
	return r
}

func (r ApiAllowedTeamsGetRequest) Execute() (*AllowedTeamsGet200Response, *http.Response, error) {
	return r.ApiService.AllowedTeamsGetExecute(r)
}

/*
AllowedTeamsGet Method for AllowedTeamsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAllowedTeamsGetRequest
*/
func (a *AllowedTeamsAPIService) AllowedTeamsGet(ctx context.Context) ApiAllowedTeamsGetRequest {
	return ApiAllowedTeamsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AllowedTeamsGet200Response
func (a *AllowedTeamsAPIService) AllowedTeamsGetExecute(r ApiAllowedTeamsGetRequest) (*AllowedTeamsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllowedTeamsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedTeamsAPIService.AllowedTeamsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/allowed_teams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAllowedTeamsPostRequest struct {
	ctx context.Context
	ApiService *AllowedTeamsAPIService
	allowedTeamsPostRequest *AllowedTeamsPostRequest
}

func (r ApiAllowedTeamsPostRequest) AllowedTeamsPostRequest(allowedTeamsPostRequest AllowedTeamsPostRequest) ApiAllowedTeamsPostRequest {
	r.allowedTeamsPostRequest = &allowedTeamsPostRequest
	return r
}

func (r ApiAllowedTeamsPostRequest) Execute() (*AllowedTeamsGet200Response, *http.Response, error) {
	return r.ApiService.AllowedTeamsPostExecute(r)
}

/*
AllowedTeamsPost Method for AllowedTeamsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAllowedTeamsPostRequest
*/
func (a *AllowedTeamsAPIService) AllowedTeamsPost(ctx context.Context) ApiAllowedTeamsPostRequest {
	return ApiAllowedTeamsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AllowedTeamsGet200Response
func (a *AllowedTeamsAPIService) AllowedTeamsPostExecute(r ApiAllowedTeamsPostRequest) (*AllowedTeamsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllowedTeamsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedTeamsAPIService.AllowedTeamsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/allowed_teams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.allowedTeamsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
