/*
AuditBoard Developer Portal API Documentation

External API reference documentation.

API version: 23.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EsgMetricUnitOptionsAPIService EsgMetricUnitOptionsAPI service
type EsgMetricUnitOptionsAPIService service

type ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdDeleteRequest struct {
	ctx context.Context
	ApiService *EsgMetricUnitOptionsAPIService
	esgMetricUnitOptionId int64
}

func (r ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdDeleteRequest) Execute() (*EsgMetricUnitOptions, *http.Response, error) {
	return r.ApiService.EsgMetricUnitOptionsEsgMetricUnitOptionIdDeleteExecute(r)
}

/*
EsgMetricUnitOptionsEsgMetricUnitOptionIdDelete Method for EsgMetricUnitOptionsEsgMetricUnitOptionIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricUnitOptionId Model id
 @return ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdDeleteRequest
*/
func (a *EsgMetricUnitOptionsAPIService) EsgMetricUnitOptionsEsgMetricUnitOptionIdDelete(ctx context.Context, esgMetricUnitOptionId int64) ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdDeleteRequest {
	return ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricUnitOptionId: esgMetricUnitOptionId,
	}
}

// Execute executes the request
//  @return EsgMetricUnitOptions
func (a *EsgMetricUnitOptionsAPIService) EsgMetricUnitOptionsEsgMetricUnitOptionIdDeleteExecute(r ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdDeleteRequest) (*EsgMetricUnitOptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricUnitOptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricUnitOptionsAPIService.EsgMetricUnitOptionsEsgMetricUnitOptionIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_unit_options/{esg_metric_unit_option_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_unit_option_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricUnitOptionId, "esgMetricUnitOptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdGetRequest struct {
	ctx context.Context
	ApiService *EsgMetricUnitOptionsAPIService
	esgMetricUnitOptionId int64
	include *[]string
}

// Possible sideloaded relationships
func (r ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdGetRequest) Include(include []string) ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdGetRequest {
	r.include = &include
	return r
}

func (r ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdGetRequest) Execute() (*EsgMetricUnitOptions, *http.Response, error) {
	return r.ApiService.EsgMetricUnitOptionsEsgMetricUnitOptionIdGetExecute(r)
}

/*
EsgMetricUnitOptionsEsgMetricUnitOptionIdGet Method for EsgMetricUnitOptionsEsgMetricUnitOptionIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricUnitOptionId Model id
 @return ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdGetRequest
*/
func (a *EsgMetricUnitOptionsAPIService) EsgMetricUnitOptionsEsgMetricUnitOptionIdGet(ctx context.Context, esgMetricUnitOptionId int64) ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdGetRequest {
	return ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricUnitOptionId: esgMetricUnitOptionId,
	}
}

// Execute executes the request
//  @return EsgMetricUnitOptions
func (a *EsgMetricUnitOptionsAPIService) EsgMetricUnitOptionsEsgMetricUnitOptionIdGetExecute(r ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdGetRequest) (*EsgMetricUnitOptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricUnitOptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricUnitOptionsAPIService.EsgMetricUnitOptionsEsgMetricUnitOptionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_unit_options/{esg_metric_unit_option_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_unit_option_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricUnitOptionId, "esgMetricUnitOptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdPutRequest struct {
	ctx context.Context
	ApiService *EsgMetricUnitOptionsAPIService
	esgMetricUnitOptionId int64
	esgMetricUnitOptionsPut *EsgMetricUnitOptionsPut
}

func (r ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdPutRequest) EsgMetricUnitOptionsPut(esgMetricUnitOptionsPut EsgMetricUnitOptionsPut) ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdPutRequest {
	r.esgMetricUnitOptionsPut = &esgMetricUnitOptionsPut
	return r
}

func (r ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdPutRequest) Execute() (*EsgMetricUnitOptions, *http.Response, error) {
	return r.ApiService.EsgMetricUnitOptionsEsgMetricUnitOptionIdPutExecute(r)
}

/*
EsgMetricUnitOptionsEsgMetricUnitOptionIdPut Method for EsgMetricUnitOptionsEsgMetricUnitOptionIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param esgMetricUnitOptionId Model id
 @return ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdPutRequest
*/
func (a *EsgMetricUnitOptionsAPIService) EsgMetricUnitOptionsEsgMetricUnitOptionIdPut(ctx context.Context, esgMetricUnitOptionId int64) ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdPutRequest {
	return ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdPutRequest{
		ApiService: a,
		ctx: ctx,
		esgMetricUnitOptionId: esgMetricUnitOptionId,
	}
}

// Execute executes the request
//  @return EsgMetricUnitOptions
func (a *EsgMetricUnitOptionsAPIService) EsgMetricUnitOptionsEsgMetricUnitOptionIdPutExecute(r ApiEsgMetricUnitOptionsEsgMetricUnitOptionIdPutRequest) (*EsgMetricUnitOptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricUnitOptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricUnitOptionsAPIService.EsgMetricUnitOptionsEsgMetricUnitOptionIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_unit_options/{esg_metric_unit_option_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"esg_metric_unit_option_id"+"}", url.PathEscape(parameterValueToString(r.esgMetricUnitOptionId, "esgMetricUnitOptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esgMetricUnitOptionsPut
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricUnitOptionsGetRequest struct {
	ctx context.Context
	ApiService *EsgMetricUnitOptionsAPIService
	include *[]string
}

// Possible sideloaded relationships
func (r ApiEsgMetricUnitOptionsGetRequest) Include(include []string) ApiEsgMetricUnitOptionsGetRequest {
	r.include = &include
	return r
}

func (r ApiEsgMetricUnitOptionsGetRequest) Execute() (*EsgMetricUnitOptionsGet200Response, *http.Response, error) {
	return r.ApiService.EsgMetricUnitOptionsGetExecute(r)
}

/*
EsgMetricUnitOptionsGet Method for EsgMetricUnitOptionsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEsgMetricUnitOptionsGetRequest
*/
func (a *EsgMetricUnitOptionsAPIService) EsgMetricUnitOptionsGet(ctx context.Context) ApiEsgMetricUnitOptionsGetRequest {
	return ApiEsgMetricUnitOptionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EsgMetricUnitOptionsGet200Response
func (a *EsgMetricUnitOptionsAPIService) EsgMetricUnitOptionsGetExecute(r ApiEsgMetricUnitOptionsGetRequest) (*EsgMetricUnitOptionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricUnitOptionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricUnitOptionsAPIService.EsgMetricUnitOptionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_unit_options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEsgMetricUnitOptionsPostRequest struct {
	ctx context.Context
	ApiService *EsgMetricUnitOptionsAPIService
	esgMetricUnitOptionsPostRequest *EsgMetricUnitOptionsPostRequest
}

func (r ApiEsgMetricUnitOptionsPostRequest) EsgMetricUnitOptionsPostRequest(esgMetricUnitOptionsPostRequest EsgMetricUnitOptionsPostRequest) ApiEsgMetricUnitOptionsPostRequest {
	r.esgMetricUnitOptionsPostRequest = &esgMetricUnitOptionsPostRequest
	return r
}

func (r ApiEsgMetricUnitOptionsPostRequest) Execute() (*EsgMetricUnitOptionsGet200Response, *http.Response, error) {
	return r.ApiService.EsgMetricUnitOptionsPostExecute(r)
}

/*
EsgMetricUnitOptionsPost Method for EsgMetricUnitOptionsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEsgMetricUnitOptionsPostRequest
*/
func (a *EsgMetricUnitOptionsAPIService) EsgMetricUnitOptionsPost(ctx context.Context) ApiEsgMetricUnitOptionsPostRequest {
	return ApiEsgMetricUnitOptionsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EsgMetricUnitOptionsGet200Response
func (a *EsgMetricUnitOptionsAPIService) EsgMetricUnitOptionsPostExecute(r ApiEsgMetricUnitOptionsPostRequest) (*EsgMetricUnitOptionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EsgMetricUnitOptionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsgMetricUnitOptionsAPIService.EsgMetricUnitOptionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/esg_metric_unit_options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esgMetricUnitOptionsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
